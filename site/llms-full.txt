# Google ADK Extras

> Production-ready services, credentials, and FastAPI wiring for Google ADK

Production-ready services, credential flows (OAuth2/JWT/Basic), and FastAPI wiring for Google ADK.
Durable backends for sessions, artifacts, and memory with simple URI config and a fluent builder.


# Overview

# Google ADK Extras

Production-ready extensions for Google ADK (Agent Development Kit). This library adds durable service backends (sessions, artifacts, memory), practical credential services (OAuth2/JWT/Basic), and clean FastAPI wiring so you can run ADK agents with real storage and auth.

- Works with ADK’s Runner, agents, tools, callbacks, and Dev UI.
- Provides a fluent `AdkBuilder` to assemble a FastAPI app or a `Runner`.
- Ships drop-in implementations for durable services and credential flows.

What this is not: a fork of ADK. It builds on top of google-adk.

## Public API Surface

- `AdkBuilder`
- `get_enhanced_fast_api_app`
- `EnhancedAdkWebServer`
- `EnhancedRunner` (thin wrapper)
- `CustomAgentLoader` (programmatic agents)
- Services via subpackages: `sessions`, `artifacts`, `memory`, `credentials`

See Quickstarts for copy‑paste examples.
# Getting Started

# Getting Started

## Install

Requirements: Python 3.12+, `google-adk`.

- Core: `uv pip install google-adk-extras`
- Pick extras for your backends:
- SQL: `uv pip install google-adk-extras[sql]`
- MongoDB: `uv pip install google-adk-extras[mongodb]`
- Redis: `uv pip install google-adk-extras[redis]`
- YAML: `uv pip install google-adk-extras[yaml]`
- S3: `uv pip install google-adk-extras[s3]`
- JWT: `uv pip install google-adk-extras[jwt]`
- Web server: `uv pip install google-adk-extras[web]`

## Minimal FastAPI App

```
from google_adk_extras import AdkBuilder

app = (
    AdkBuilder()
    .with_agents_dir("./agents")
    .with_session_service("sqlite:///./sessions.db")
    .with_artifact_service("local://./artifacts")
    .with_memory_service("yaml://./memory")
    .with_web_ui(True)
    .with_agent_reload(True)
    .build_fastapi_app()
)
```

Run with: `uvicorn app:app --reload`.

## Minimal Runner

```
runner = (
    AdkBuilder()
    .with_agents_dir("./agents")
    .with_session_service("sqlite:///./sessions.db")
    .with_memory_service("yaml://./memory")
    .with_artifact_service("local://./artifacts")
    .build_runner("my_agent")
)
```

See Examples for complete scripts.
# Quickstarts

# Quickstarts

This page mirrors the `examples/` folder with copy‑paste starters.

## FastAPI App

```
from google_adk_extras import AdkBuilder

app = (
    AdkBuilder()
    .with_agents_dir("./agents")
    .with_session_service("sqlite:///./sessions.db")
    .with_artifact_service("local://./artifacts")
    .with_memory_service("yaml://./memory")
    .with_web_ui(True)
    .with_agent_reload(True)
    .build_fastapi_app()
)
```

Run: `uvicorn app:app --reload`.

## Runner

```
runner = (
    AdkBuilder()
    .with_agents_dir("./agents")
    .with_session_service("sqlite:///./sessions.db")
    .with_memory_service("yaml://./memory")
    .with_artifact_service("local://./artifacts")
    .build_runner("my_agent")
)
```

## Programmatic Agents

```
from google_adk_extras import AdkBuilder, CustomAgentLoader
from google.adk.agents.base_agent import BaseAgent

class EchoAgent(BaseAgent):
    name = "echo"
    async def _run_async_impl(self, ctx):
        text = ctx.user_content.text if ctx.user_content else ""
        yield self.create_text_response(f"Echo: {text}")

loader = CustomAgentLoader()
loader.register_agent("echo_app", EchoAgent())

app = (
    AdkBuilder()
    .with_agent_loader(loader)
    .with_session_service("sqlite:///./sessions.db")
    .with_artifact_service("local://./artifacts")
    .with_memory_service("yaml://./memory")
    .build_fastapi_app()
)
```
# FastAPI Integration

# FastAPI Integration

Use `get_enhanced_fast_api_app` indirectly via `AdkBuilder.build_fastapi_app()`.

Key points

- Accepts your provided `credential_service` (no forced in‑memory default).
- Honors ADK’s Dev UI when assets are present.
- Preserves ADK’s runner caching/cleanup semantics via `EnhancedAdkWebServer`.

Example

```
app = (
  AdkBuilder()
  .with_agents_dir("./agents")
  .with_session_service("sqlite:///./sessions.db")
  .with_artifact_service("local://./artifacts")
  .with_memory_service("yaml://./memory")
  .build_fastapi_app()
)
```

Dev UI

- Set `with_web_ui(True)`; if ADK’s web assets are available, the UI is served.
- Use `with_agent_reload(True)` for filesystem agent hot‑reload.
# Services

# Durable Services

ADK defines service interfaces; this package provides drop‑in durable implementations.

## Sessions

- `SQLSessionService` — SQLAlchemy; JSON‑serialized state/events. URI: `sqlite:///...`, `postgresql://...`, `mysql://...`.
- `MongoSessionService` — Per‑session document. URI: `mongodb://host/db`.
- `RedisSessionService` — Hashes/sets per session/user. URI: `redis://host:6379`.
- `YamlFileSessionService` — Files under `base/app/user/{session_id}.yaml`. URI: `yaml://./path`.

Configure via builder:

```
AdkBuilder().with_session_service("sqlite:///./sessions.db")
```

## Artifacts

- `LocalFolderArtifactService` — Metadata JSON + versioned data files. URI: `local://./artifacts`.
- `S3ArtifactService` — S3‑compatible buckets. URI: `s3://bucket`.
- `SQLArtifactService` — Blobs per version in SQL. URI like sessions.
- `MongoArtifactService` — Blobs in MongoDB. URI like sessions.

```
AdkBuilder().with_artifact_service("local://./artifacts")
```

## Memory

- `SQLMemoryService`, `MongoMemoryService`, `RedisMemoryService`, `YamlFileMemoryService`
- Extracts text from `google.genai.types.Content` parts and indexes basic terms for search.

```
AdkBuilder().with_memory_service("yaml://./memory")
```

Notes

- Use the matching install extras: `[sql]`, `[mongodb]`, `[redis]`, `[yaml]`, `[s3]`.
- Service instances are also supported: `.with_session_service_instance(SQLSessionService(...))`.

# Credentials

Provide auth to tools and agents using credential services.

## OAuth2

- `GoogleOAuth2CredentialService`
- `GitHubOAuth2CredentialService`
- `MicrosoftOAuth2CredentialService`
- `XOAuth2CredentialService`

```
from google_adk_extras.credentials import GoogleOAuth2CredentialService

cred = GoogleOAuth2CredentialService(
    client_id="...",
    client_secret="...",
    scopes=["openid", "email", "profile"],
)

app = AdkBuilder().with_credential_service(cred).build_fastapi_app()
```

## JWT

- `JWTCredentialService` (requires `PyJWT` via extra `[jwt]`).

## HTTP Basic

- `HTTPBasicAuthCredentialService` and multi‑user variant.

Notes

- You can also configure via URIs (see URIs page).
- Credential storage defaults to ADK’s session/in‑memory stores.
# Programmatic Agents

# Programmatic Agents

You don’t need on‑disk agent folders. Register agent instances directly.

```
from google_adk_extras import AdkBuilder, CustomAgentLoader
from google.adk.agents.base_agent import BaseAgent

class EchoAgent(BaseAgent):
    name = "echo"
    async def _run_async_impl(self, ctx):
        text = ctx.user_content.text if ctx.user_content else ""
        yield self.create_text_response(f"Echo: {text}")

loader = CustomAgentLoader()
loader.register_agent("echo_app", EchoAgent())

app = (
  AdkBuilder()
  .with_agent_loader(loader)
  .with_session_service("sqlite:///./sessions.db")
  .build_fastapi_app()
)
```

Guidance

- Use programmatic loading for testing or dynamic agent assembly.
- Do not mix `with_agents_dir()` and registered instances in one builder.
# URIs & Configuration

# URIs & Configuration

Builder methods accept URIs for quick configuration.

## Sessions

- SQLite: `sqlite:///./sessions.db`
- Postgres: `postgresql://user:pass@host/db`
- MySQL: `mysql://user:pass@host/db`
- MongoDB: `mongodb://host:27017/db`
- Redis: `redis://localhost:6379`
- YAML: `yaml://./sessions`

## Artifacts

- Local folder: `local://./artifacts`
- S3: `s3://bucket-name`
- SQL / MongoDB: same schemes as sessions

## Memory

- YAML/Redis/SQL/MongoDB, same schemes as sessions

## Credentials

- Google OAuth2: `oauth2-google://client_id:secret@scopes=openid,email,profile`
- GitHub OAuth2: `oauth2-github://client_id:secret@scopes=user,repo`
- Microsoft OAuth2: `oauth2-microsoft://<tenant>/<client_id>:<secret>@scopes=User.Read`
- X OAuth2: `oauth2-x://client_id:secret@scopes=tweet.read,users.read`
- JWT: `jwt://<secret>@algorithm=HS256&issuer=my-app&expiration_minutes=60`
- HTTP Basic: `basic-auth://username:password@realm=My%20API`

Tips

- Use service instances when you need advanced options.
- Some backends require installing extras (`[sql]`, `[mongodb]`, `[redis]`, `[yaml]`, `[s3]`, `[jwt]`).
# Examples

# Examples

These examples are kept small and runnable; see the `examples/` folder.

- `examples/fastapi_app.py` — full app with durable backends.
- `examples/runner_basic.py` — runner without FastAPI.
- `examples/custom_loader.py` — programmatic agents.
- `examples/services/` — focused snippets per backend.
- `examples/credentials/` — focused credential usage.

Install extras to match what you run, e.g. `uv pip install google-adk-extras[sql,yaml,web]`.
# Troubleshooting

# Troubleshooting

Common issues and fixes.

## ImportError: optional dependency

If `import jwt` or database clients fail, install the matching extras:

```
uv pip install google-adk-extras[jwt]      # PyJWT
uv pip install google-adk-extras[sql]      # SQLAlchemy
uv pip install google-adk-extras[mongodb]  # PyMongo
uv pip install google-adk-extras[redis]    # redis
uv pip install google-adk-extras[s3]       # boto3
```

## Dev UI not showing

- Ensure ADK’s web assets are available; set `.with_web_ui(True)`.
- If assets are missing, the app still runs; only the UI is skipped.

## Agents not found

- Using folders: ensure `./agents/<app>/agent.json` exists.
- Using `CustomAgentLoader`: confirm `register_agent(name, instance)` and use that `name`.

## State or events not saved

- Check the selected session backend and connection string.
- For SQL, confirm the DB file is writable and the table was created.

## Cloud tracing

- Not supported in this package (OpenTelemetry removed). If needed, add tracing in your app.
