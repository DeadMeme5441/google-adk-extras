{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Google ADK Extras","text":"<p>Production-ready extensions for Google ADK (Agent Development Kit). This library adds durable service backends (sessions, artifacts, memory), practical credential services (OAuth2/JWT/Basic), and clean FastAPI wiring so you can run ADK agents with real storage and auth.</p> <ul> <li>Works with ADK\u2019s Runner, agents, tools, callbacks, and Dev UI.</li> <li>Provides a fluent <code>AdkBuilder</code> to assemble a FastAPI app or a <code>Runner</code>.</li> <li>Ships drop-in implementations for durable services and credential flows.</li> </ul> <p>What this is not: a fork of ADK. It builds on top of google-adk.</p>"},{"location":"#public-api-surface","title":"Public API Surface","text":"<ul> <li><code>AdkBuilder</code></li> <li><code>get_enhanced_fast_api_app</code></li> <li><code>EnhancedAdkWebServer</code></li> <li><code>EnhancedRunner</code> (thin wrapper)</li> <li><code>CustomAgentLoader</code> (programmatic agents)</li> <li>Services via subpackages: <code>sessions</code>, <code>artifacts</code>, <code>memory</code>, <code>credentials</code></li> </ul> <p>See Quickstarts for copy\u2011paste examples.</p>"},{"location":"agent-loading/","title":"Programmatic Agents","text":"<p>You don\u2019t need on\u2011disk agent folders. Register agent instances directly.</p> <pre><code>from google_adk_extras import AdkBuilder, CustomAgentLoader\nfrom google.adk.agents.base_agent import BaseAgent\n\nclass EchoAgent(BaseAgent):\n    name = \"echo\"\n    async def _run_async_impl(self, ctx):\n        text = ctx.user_content.text if ctx.user_content else \"\"\n        yield self.create_text_response(f\"Echo: {text}\")\n\nloader = CustomAgentLoader()\nloader.register_agent(\"echo_app\", EchoAgent())\n\napp = (\n  AdkBuilder()\n  .with_agent_loader(loader)\n  .with_session_service(\"sqlite:///./sessions.db\")\n  .build_fastapi_app()\n)\n</code></pre> <p>Guidance - Use programmatic loading for testing or dynamic agent assembly. - Do not mix <code>with_agents_dir()</code> and registered instances in one builder.</p>"},{"location":"credentials/","title":"Credentials","text":"<p>Provide auth to tools and agents using credential services.</p>"},{"location":"credentials/#oauth2","title":"OAuth2","text":"<ul> <li><code>GoogleOAuth2CredentialService</code></li> <li><code>GitHubOAuth2CredentialService</code></li> <li><code>MicrosoftOAuth2CredentialService</code></li> <li><code>XOAuth2CredentialService</code></li> </ul> <pre><code>from google_adk_extras.credentials import GoogleOAuth2CredentialService\n\ncred = GoogleOAuth2CredentialService(\n    client_id=\"...\",\n    client_secret=\"...\",\n    scopes=[\"openid\", \"email\", \"profile\"],\n)\n\napp = AdkBuilder().with_credential_service(cred).build_fastapi_app()\n</code></pre>"},{"location":"credentials/#jwt","title":"JWT","text":"<ul> <li><code>JWTCredentialService</code> (requires <code>PyJWT</code> via extra <code>[jwt]</code>).</li> </ul>"},{"location":"credentials/#http-basic","title":"HTTP Basic","text":"<ul> <li><code>HTTPBasicAuthCredentialService</code> and multi\u2011user variant.</li> </ul> <p>Notes - You can also configure via URIs (see URIs page). - Credential storage defaults to ADK\u2019s session/in\u2011memory stores.</p>"},{"location":"examples/","title":"Examples","text":"<p>These examples are kept small and runnable; see the <code>examples/</code> folder.</p> <ul> <li><code>examples/fastapi_app.py</code> \u2014 full app with durable backends.</li> <li><code>examples/runner_basic.py</code> \u2014 runner without FastAPI.</li> <li><code>examples/custom_loader.py</code> \u2014 programmatic agents.</li> <li><code>examples/services/</code> \u2014 focused snippets per backend.</li> <li><code>examples/credentials/</code> \u2014 focused credential usage.</li> </ul> <p>Install extras to match what you run, e.g. <code>uv pip install google-adk-extras[sql,yaml,web]</code>.</p>"},{"location":"fastapi/","title":"FastAPI Integration","text":"<p>Use <code>get_enhanced_fast_api_app</code> indirectly via <code>AdkBuilder.build_fastapi_app()</code>.</p> <p>Key points - Accepts your provided <code>credential_service</code> (no forced in\u2011memory default). - Honors ADK\u2019s Dev UI when assets are present. - Preserves ADK\u2019s runner caching/cleanup semantics via <code>EnhancedAdkWebServer</code>.</p> <p>Example</p> <pre><code>app = (\n  AdkBuilder()\n  .with_agents_dir(\"./agents\")\n  .with_session_service(\"sqlite:///./sessions.db\")\n  .with_artifact_service(\"local://./artifacts\")\n  .with_memory_service(\"yaml://./memory\")\n  .build_fastapi_app()\n)\n</code></pre> <p>Dev UI - Set <code>with_web_ui(True)</code>; if ADK\u2019s web assets are available, the UI is served. - Use <code>with_agent_reload(True)</code> for filesystem agent hot\u2011reload.</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#install","title":"Install","text":"<p>Requirements: Python 3.12+, <code>google-adk</code>.</p> <ul> <li>Core: <code>uv pip install google-adk-extras</code></li> <li>Pick extras for your backends:</li> <li>SQL: <code>uv pip install google-adk-extras[sql]</code></li> <li>MongoDB: <code>uv pip install google-adk-extras[mongodb]</code></li> <li>Redis: <code>uv pip install google-adk-extras[redis]</code></li> <li>YAML: <code>uv pip install google-adk-extras[yaml]</code></li> <li>S3: <code>uv pip install google-adk-extras[s3]</code></li> <li>JWT: <code>uv pip install google-adk-extras[jwt]</code></li> <li>Web server: <code>uv pip install google-adk-extras[web]</code></li> </ul>"},{"location":"getting-started/#minimal-fastapi-app","title":"Minimal FastAPI App","text":"<pre><code>from google_adk_extras import AdkBuilder\n\napp = (\n    AdkBuilder()\n    .with_agents_dir(\"./agents\")\n    .with_session_service(\"sqlite:///./sessions.db\")\n    .with_artifact_service(\"local://./artifacts\")\n    .with_memory_service(\"yaml://./memory\")\n    .with_web_ui(True)\n    .with_agent_reload(True)\n    .build_fastapi_app()\n)\n</code></pre> <p>Run with: <code>uvicorn app:app --reload</code>.</p>"},{"location":"getting-started/#minimal-runner","title":"Minimal Runner","text":"<pre><code>runner = (\n    AdkBuilder()\n    .with_agents_dir(\"./agents\")\n    .with_session_service(\"sqlite:///./sessions.db\")\n    .with_memory_service(\"yaml://./memory\")\n    .with_artifact_service(\"local://./artifacts\")\n    .build_runner(\"my_agent\")\n)\n</code></pre> <p>See Examples for complete scripts.</p>"},{"location":"quickstarts/","title":"Quickstarts","text":"<p>This page mirrors the <code>examples/</code> folder with copy\u2011paste starters.</p>"},{"location":"quickstarts/#fastapi-app","title":"FastAPI App","text":"<pre><code>from google_adk_extras import AdkBuilder\n\napp = (\n    AdkBuilder()\n    .with_agents_dir(\"./agents\")\n    .with_session_service(\"sqlite:///./sessions.db\")\n    .with_artifact_service(\"local://./artifacts\")\n    .with_memory_service(\"yaml://./memory\")\n    .with_web_ui(True)\n    .with_agent_reload(True)\n    .build_fastapi_app()\n)\n</code></pre> <p>Run: <code>uvicorn app:app --reload</code>.</p>"},{"location":"quickstarts/#runner","title":"Runner","text":"<pre><code>runner = (\n    AdkBuilder()\n    .with_agents_dir(\"./agents\")\n    .with_session_service(\"sqlite:///./sessions.db\")\n    .with_memory_service(\"yaml://./memory\")\n    .with_artifact_service(\"local://./artifacts\")\n    .build_runner(\"my_agent\")\n)\n</code></pre>"},{"location":"quickstarts/#programmatic-agents","title":"Programmatic Agents","text":"<pre><code>from google_adk_extras import AdkBuilder, CustomAgentLoader\nfrom google.adk.agents.base_agent import BaseAgent\n\nclass EchoAgent(BaseAgent):\n    name = \"echo\"\n    async def _run_async_impl(self, ctx):\n        text = ctx.user_content.text if ctx.user_content else \"\"\n        yield self.create_text_response(f\"Echo: {text}\")\n\nloader = CustomAgentLoader()\nloader.register_agent(\"echo_app\", EchoAgent())\n\napp = (\n    AdkBuilder()\n    .with_agent_loader(loader)\n    .with_session_service(\"sqlite:///./sessions.db\")\n    .with_artifact_service(\"local://./artifacts\")\n    .with_memory_service(\"yaml://./memory\")\n    .build_fastapi_app()\n)\n</code></pre>"},{"location":"services/","title":"Durable Services","text":"<p>ADK defines service interfaces; this package provides drop\u2011in durable implementations.</p>"},{"location":"services/#sessions","title":"Sessions","text":"<ul> <li><code>SQLSessionService</code> \u2014 SQLAlchemy; JSON\u2011serialized state/events. URI: <code>sqlite:///...</code>, <code>postgresql://...</code>, <code>mysql://...</code>.</li> <li><code>MongoSessionService</code> \u2014 Per\u2011session document. URI: <code>mongodb://host/db</code>.</li> <li><code>RedisSessionService</code> \u2014 Hashes/sets per session/user. URI: <code>redis://host:6379</code>.</li> <li><code>YamlFileSessionService</code> \u2014 Files under <code>base/app/user/{session_id}.yaml</code>. URI: <code>yaml://./path</code>.</li> </ul> <p>Configure via builder:</p> <pre><code>AdkBuilder().with_session_service(\"sqlite:///./sessions.db\")\n</code></pre>"},{"location":"services/#artifacts","title":"Artifacts","text":"<ul> <li><code>LocalFolderArtifactService</code> \u2014 Metadata JSON + versioned data files. URI: <code>local://./artifacts</code>.</li> <li><code>S3ArtifactService</code> \u2014 S3\u2011compatible buckets. URI: <code>s3://bucket</code>.</li> <li><code>SQLArtifactService</code> \u2014 Blobs per version in SQL. URI like sessions.</li> <li><code>MongoArtifactService</code> \u2014 Blobs in MongoDB. URI like sessions.</li> </ul> <pre><code>AdkBuilder().with_artifact_service(\"local://./artifacts\")\n</code></pre>"},{"location":"services/#memory","title":"Memory","text":"<ul> <li><code>SQLMemoryService</code>, <code>MongoMemoryService</code>, <code>RedisMemoryService</code>, <code>YamlFileMemoryService</code></li> <li>Extracts text from <code>google.genai.types.Content</code> parts and indexes basic terms for search.</li> </ul> <pre><code>AdkBuilder().with_memory_service(\"yaml://./memory\")\n</code></pre> <p>Notes - Use the matching install extras: <code>[sql]</code>, <code>[mongodb]</code>, <code>[redis]</code>, <code>[yaml]</code>, <code>[s3]</code>. - Service instances are also supported: <code>.with_session_service_instance(SQLSessionService(...))</code>.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Common issues and fixes.</p>"},{"location":"troubleshooting/#importerror-optional-dependency","title":"ImportError: optional dependency","text":"<p>If <code>import jwt</code> or database clients fail, install the matching extras:</p> <pre><code>uv pip install google-adk-extras[jwt]      # PyJWT\nuv pip install google-adk-extras[sql]      # SQLAlchemy\nuv pip install google-adk-extras[mongodb]  # PyMongo\nuv pip install google-adk-extras[redis]    # redis\nuv pip install google-adk-extras[s3]       # boto3\n</code></pre>"},{"location":"troubleshooting/#dev-ui-not-showing","title":"Dev UI not showing","text":"<ul> <li>Ensure ADK\u2019s web assets are available; set <code>.with_web_ui(True)</code>.</li> <li>If assets are missing, the app still runs; only the UI is skipped.</li> </ul>"},{"location":"troubleshooting/#agents-not-found","title":"Agents not found","text":"<ul> <li>Using folders: ensure <code>./agents/&lt;app&gt;/agent.json</code> exists.</li> <li>Using <code>CustomAgentLoader</code>: confirm <code>register_agent(name, instance)</code> and use that <code>name</code>.</li> </ul>"},{"location":"troubleshooting/#state-or-events-not-saved","title":"State or events not saved","text":"<ul> <li>Check the selected session backend and connection string.</li> <li>For SQL, confirm the DB file is writable and the table was created.</li> </ul>"},{"location":"troubleshooting/#cloud-tracing","title":"Cloud tracing","text":"<ul> <li>Not supported in this package (OpenTelemetry removed). If needed, add tracing in your app.</li> </ul>"},{"location":"uris/","title":"URIs &amp; Configuration","text":"<p>Builder methods accept URIs for quick configuration.</p>"},{"location":"uris/#sessions","title":"Sessions","text":"<ul> <li>SQLite: <code>sqlite:///./sessions.db</code></li> <li>Postgres: <code>postgresql://user:pass@host/db</code></li> <li>MySQL: <code>mysql://user:pass@host/db</code></li> <li>MongoDB: <code>mongodb://host:27017/db</code></li> <li>Redis: <code>redis://localhost:6379</code></li> <li>YAML: <code>yaml://./sessions</code></li> </ul>"},{"location":"uris/#artifacts","title":"Artifacts","text":"<ul> <li>Local folder: <code>local://./artifacts</code></li> <li>S3: <code>s3://bucket-name</code></li> <li>SQL / MongoDB: same schemes as sessions</li> </ul>"},{"location":"uris/#memory","title":"Memory","text":"<ul> <li>YAML/Redis/SQL/MongoDB, same schemes as sessions</li> </ul>"},{"location":"uris/#credentials","title":"Credentials","text":"<ul> <li>Google OAuth2: <code>oauth2-google://client_id:secret@scopes=openid,email,profile</code></li> <li>GitHub OAuth2: <code>oauth2-github://client_id:secret@scopes=user,repo</code></li> <li>Microsoft OAuth2: <code>oauth2-microsoft://&lt;tenant&gt;/&lt;client_id&gt;:&lt;secret&gt;@scopes=User.Read</code></li> <li>X OAuth2: <code>oauth2-x://client_id:secret@scopes=tweet.read,users.read</code></li> <li>JWT: <code>jwt://&lt;secret&gt;@algorithm=HS256&amp;issuer=my-app&amp;expiration_minutes=60</code></li> <li>HTTP Basic: <code>basic-auth://username:password@realm=My%20API</code></li> </ul> <p>Tips - Use service instances when you need advanced options. - Some backends require installing extras (<code>[sql]</code>, <code>[mongodb]</code>, <code>[redis]</code>, <code>[yaml]</code>, <code>[s3]</code>, <code>[jwt]</code>).</p>"}]}