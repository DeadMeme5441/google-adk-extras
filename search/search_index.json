{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Google ADK Extras","text":"<p>Production-ready extensions for Google ADK: robust services (sessions, memory, artifacts), credential services, an enhanced runner, registries, and a clean FastAPI integration for deployment.</p> <p>Why this package?</p> <ul> <li>Custom service implementations with multiple backends (SQL, MongoDB, Redis, S3, YAML)</li> <li>Credential services (OAuth2 providers, JWT, Basic) that plug into ADK</li> <li>Enhanced Runner with YAML-driven configuration, retries, circuit breakers, and rich errors</li> <li>Agent and Tool registries with health monitoring, caching, and events</li> <li>Enhanced FastAPI app/server that cleanly supports custom credential services</li> </ul> <p>Quick links</p> <ul> <li>Get Started \u2192 Installation and Quickstarts</li> <li>Concepts \u2192 Runner, Services, Registries, Configuration</li> <li>How\u2011To \u2192 Credentials, Storage, FastAPI, Tool Strategies, Error Handling</li> <li>Tutorials \u2192 End\u2011to\u2011end scenarios (OAuth app, YAML runtime, OpenAPI tools, deploy)</li> <li>Reference \u2192 API, configuration, URIs, errors</li> </ul> <pre><code>flowchart LR\n  A[Client / FastAPI] --&gt;|requests| R(EnhancedRunner)\n  R --&gt;|persist| S[(Sessions)]\n  R --&gt;|store| M[(Memory)]\n  R --&gt;|save/load| F[(Artifacts)]\n  R --&gt;|auth| C[(Credentials)]\n  R --&gt;|exec| T{{Tools via Strategies}}\n  subgraph Registries\n    AR[AgentRegistry] --- TR[ToolRegistry]\n  end\n  R --- AR\n  R --- TR</code></pre> <p>Compatibility</p> <ul> <li>Python 3.12+</li> <li>Works with Google ADK; install extras for chosen backends as needed</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>See GitHub Releases for version history and notes:</p> <p>https://github.com/DeadMeme5441/google-adk-extras/releases</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Thanks for your interest in improving Google ADK Extras!</p>"},{"location":"contributing/#dev-setup","title":"Dev Setup","text":"<pre><code>git clone https://github.com/DeadMeme5441/google-adk-extras.git\ncd google-adk-extras\nuv sync   # or: pip install -e .[all]\n</code></pre>"},{"location":"contributing/#tests","title":"Tests","text":"<pre><code>uv run pytest -q\n</code></pre>"},{"location":"contributing/#guidelines","title":"Guidelines","text":"<ul> <li>Keep changes minimal and focused; match existing style.</li> <li>Add tests for new functionality.</li> <li>Update docs/examples when behavior changes.</li> <li>Avoid introducing unrelated formatting or refactors in PRs.</li> </ul>"},{"location":"contributing/#pr-checklist","title":"PR Checklist","text":"<ul> <li> Code compiles and tests pass</li> <li> New/changed docs included</li> <li> Backwards compatibility preserved</li> <li> Security considerations addressed (if applicable)</li> </ul>"},{"location":"phase1-enhanced-runner-foundation/","title":"Phase 1: Enhanced Runner Foundation","text":""},{"location":"phase1-enhanced-runner-foundation/#overview","title":"Overview","text":"<p>Phase 1 of the Enhanced ADK Runner system provides a solid foundation for YAML-driven agent systems with advanced configurability, robust error handling, and flexible tool execution strategies. This phase extends Google ADK's Runner with enhanced capabilities while maintaining full backward compatibility.</p>"},{"location":"phase1-enhanced-runner-foundation/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                      EnhancedRunner                             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u2022 Extends Google ADK Runner                                     \u2502\n\u2502 \u2022 YAML-driven configuration                                     \u2502\n\u2502 \u2022 Rich error handling with context                             \u2502\n\u2502 \u2022 Performance metrics collection                               \u2502\n\u2502 \u2022 Configurable tool execution strategies                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                    \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502               \u2502               \u2502\n         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n         \u2502  EnhancedRunConfig  \u2502   \u2502    \u2502 YamlSystemContext \u2502\n         \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524   \u2502    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n         \u2502 \u2022 YAML config       \u2502   \u2502    \u2502 \u2022 System tracking \u2502\n         \u2502 \u2022 Tool timeouts     \u2502   \u2502    \u2502 \u2022 Error context   \u2502\n         \u2502 \u2022 Retry policies    \u2502   \u2502    \u2502 \u2022 Location info   \u2502\n         \u2502 \u2022 Debug settings    \u2502   \u2502    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n                                    \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502    ToolExecutionStrategy      \u2502\n                    \u2502         Manager               \u2502\n                    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n                    \u2502 \u2022 Strategy routing            \u2502\n                    \u2502 \u2022 MCP/OpenAPI/Function tools  \u2502\n                    \u2502 \u2022 Timeout &amp; retry management  \u2502\n                    \u2502 \u2022 Circuit breaker pattern     \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"phase1-enhanced-runner-foundation/#core-components","title":"Core Components","text":""},{"location":"phase1-enhanced-runner-foundation/#1-enhancedrunner","title":"1. EnhancedRunner","text":"<p>The main runner class that extends Google ADK's Runner with enhanced capabilities.</p> <p>Key Features: - Drop-in replacement for ADK's Runner - YAML-driven configuration support - Rich error handling with system context - Performance metrics collection - Configurable tool execution strategies</p> <p>Basic Usage: <pre><code>from google_adk_extras.runners import EnhancedRunner, EnhancedRunConfig\n\n# Drop-in replacement usage\nrunner = EnhancedRunner(\n    app_name=\"my-agent-system\",\n    agent=my_agent,\n    session_service=session_service,\n)\n\n# With enhanced configuration\nenhanced_config = EnhancedRunConfig.from_yaml_dict({\n    'max_llm_calls': 200,\n    'tool_timeouts': {'mcp_tools': 30.0},\n    'debug': {'enabled': True}\n})\n\nrunner = EnhancedRunner(\n    app_name=\"yaml-system\",\n    agent=my_agent,\n    session_service=session_service,\n    enhanced_config=enhanced_config\n)\n</code></pre></p>"},{"location":"phase1-enhanced-runner-foundation/#2-enhancedrunconfig","title":"2. EnhancedRunConfig","text":"<p>A comprehensive configuration class that extends ADK's RunConfig with YAML support and advanced features.</p> <p>Configuration Structure: <pre><code># Basic ADK settings\nstreaming_mode: \"NONE\"\nmax_llm_calls: 150\n\n# Tool execution timeouts\ntool_timeouts:\n  mcp_tools: 30.0\n  openapi_tools: 60.0\n  function_tools: 10.0\n  mcp_connection_timeout: 10.0\n  openapi_connection_timeout: 15.0\n  tool_specific_timeouts:\n    slow_mcp_tool: 120.0\n    critical_api: 5.0\n\n# Retry policies for different operation types\nretry_policies:\n  default:\n    max_attempts: 3\n    strategy: \"EXPONENTIAL_BACKOFF\"\n    base_delay: 1.0\n    max_delay: 60.0\n    jitter: true\n  mcp_tools:\n    max_attempts: 2\n    strategy: \"IMMEDIATE\"\n  openapi_tools:\n    max_attempts: 4\n    strategy: \"FIXED_DELAY\"\n    base_delay: 2.0\n\n# A2A (Agent-to-Agent) configuration\na2a_config:\n  timeout: 30.0\n  connection_pool_size: 10\n  retry_config:\n    max_attempts: 3\n    strategy: \"EXPONENTIAL_BACKOFF\"\n\n# Debug and development settings\ndebug:\n  enabled: true\n  trace_agent_flow: true\n  trace_tool_execution: false\n  performance_profiling: true\n  log_level: \"DEBUG\"\n  capture_exceptions: true\n\n# Advanced features\nenable_circuit_breaker: true\nenable_tool_registry: true\nenable_agent_registry: true\nmax_concurrent_tools: 5\ntool_execution_queue_size: 100\nvalidate_tool_configs: true\nstrict_mode: false\n</code></pre></p> <p>Programmatic Usage: <pre><code>from google_adk_extras.runners.config import EnhancedRunConfig\n\n# From YAML dictionary\nconfig = EnhancedRunConfig.from_yaml_dict(yaml_config)\n\n# Direct creation\nconfig = EnhancedRunConfig(\n    base_config=RunConfig(max_llm_calls=200),\n    tool_timeouts=ToolTimeoutConfig(mcp_tools=45.0),\n    enable_circuit_breaker=True\n)\n\n# Configuration merging\nupdated_config = config.merge_with_yaml({\n    'tool_timeouts': {'mcp_tools': 60.0},\n    'enable_circuit_breaker': False\n})\n</code></pre></p>"},{"location":"phase1-enhanced-runner-foundation/#3-error-handling-system","title":"3. Error Handling System","text":"<p>Rich error handling with YAML system context for enhanced debugging.</p> <p>Error Classes: - <code>YamlSystemError</code>: Base error class with system context - <code>ToolExecutionError</code>: Specific to tool execution failures - <code>ConfigurationError</code>: Configuration-related errors - <code>RegistryError</code>: Agent/tool registry errors</p> <p>YamlSystemContext: <pre><code>from google_adk_extras.runners.errors import YamlSystemContext\n\ncontext = YamlSystemContext(\n    system_name=\"customer-support\",\n    config_path=\"/path/to/config.yaml\",\n    current_agent=\"main_agent\",\n    current_tool=\"extract_data\",\n    invocation_id=\"inv_123\",\n    session_id=\"sess_456\",\n    user_id=\"user_789\"\n)\n\n# Context chaining\nagent_context = context.with_agent(\"new_agent\")\ntool_context = agent_context.with_tool(\"new_tool\")\n</code></pre></p> <p>Error Usage: <pre><code>from google_adk_extras.runners.errors import ToolExecutionError\n\ntry:\n    # Tool execution\n    result = await execute_tool()\nexcept Exception as e:\n    raise ToolExecutionError(\n        \"Tool execution failed due to timeout\",\n        context=context.with_tool(\"failing_tool\"),\n        original_error=e,\n        tool_type=\"mcp\",\n        execution_time=30.5,\n        timeout=30.0,\n        suggested_fixes=[\n            \"Increase tool timeout in configuration\",\n            \"Check MCP server connectivity\"\n        ]\n    )\n</code></pre></p>"},{"location":"phase1-enhanced-runner-foundation/#4-tool-execution-strategies","title":"4. Tool Execution Strategies","text":"<p>Flexible tool execution system supporting different tool types with specific handling.</p> <p>Strategy Types: - <code>DefaultToolExecutionStrategy</code>: Basic tool execution with timeout and retry - <code>McpToolExecutionStrategy</code>: MCP-specific handling with connection timeouts - <code>OpenApiToolExecutionStrategy</code>: API tools with circuit breaker pattern - <code>FunctionToolExecutionStrategy</code>: Python function tools with optimizations</p> <p>Usage: <pre><code>from google_adk_extras.runners.strategies import (\n    ToolExecutionStrategyManager,\n    McpToolExecutionStrategy,\n    OpenApiToolExecutionStrategy\n)\n\n# Custom strategy manager\nmanager = ToolExecutionStrategyManager()\n\n# Register strategies\nmcp_strategy = McpToolExecutionStrategy(\n    timeout=45.0,\n    connection_timeout=10.0,\n    retry_config=RetryConfig(max_attempts=2)\n)\nmanager.register_strategy('mcp', mcp_strategy)\n\nopenapi_strategy = OpenApiToolExecutionStrategy(\n    timeout=60.0,\n    circuit_breaker_config=CircuitBreakerConfig(failure_threshold=3)\n)\nmanager.register_strategy('openapi', openapi_strategy)\n\n# Use with runner\nrunner = EnhancedRunner(\n    app_name=\"custom-strategy-app\",\n    agent=agent,\n    session_service=session_service,\n    tool_strategy_manager=manager\n)\n</code></pre></p> <p>Circuit Breaker Pattern: <pre><code>from google_adk_extras.runners.strategies import CircuitBreaker, CircuitBreakerConfig\n\nconfig = CircuitBreakerConfig(\n    failure_threshold=5,      # Open circuit after 5 failures\n    recovery_timeout=60.0,    # Wait 60s before trying half-open\n    success_threshold=3,      # Need 3 successes to close circuit\n    timeout=30.0             # Individual request timeout\n)\n\ncircuit_breaker = CircuitBreaker(config)\n\n# Check if can execute\nif circuit_breaker.can_execute():\n    try:\n        result = await execute_operation()\n        circuit_breaker.record_success()\n    except Exception:\n        circuit_breaker.record_failure()\n        raise\n</code></pre></p> <p>Retry System: <pre><code>from google_adk_extras.runners.strategies import RetryExecutor, RetryConfig, RetryStrategy\n\nretry_config = RetryConfig(\n    max_attempts=3,\n    strategy=RetryStrategy.EXPONENTIAL_BACKOFF,\n    base_delay=1.0,\n    max_delay=60.0,\n    backoff_multiplier=2.0,\n    jitter=True\n)\n\nexecutor = RetryExecutor(retry_config)\n\nresult = await executor.execute(async_operation)\n</code></pre></p>"},{"location":"phase1-enhanced-runner-foundation/#performance-monitoring","title":"Performance Monitoring","text":"<p>Built-in performance metrics collection for monitoring system health.</p> <p>Available Metrics: - <code>total_invocations</code>: Total number of runner invocations - <code>total_tool_executions</code>: Total tool executions - <code>avg_invocation_time</code>: Average invocation time - <code>avg_tool_execution_time</code>: Average tool execution time - <code>error_count</code>: Total number of errors - <code>error_rate</code>: Error rate (errors / total invocations) - <code>success_rate</code>: Success rate (1 - error_rate)</p> <p>Usage: <pre><code># Get performance metrics\nmetrics = runner.get_performance_metrics()\nprint(f\"Success rate: {metrics['success_rate']:.2%}\")\nprint(f\"Average invocation time: {metrics['avg_invocation_time']:.2f}s\")\n\n# Reset metrics\nrunner.reset_performance_metrics()\n\n# Get debug information\ndebug_info = runner.get_debug_info()\nprint(debug_info['performance_metrics'])\n</code></pre></p>"},{"location":"phase1-enhanced-runner-foundation/#integration-with-agent-compose-kit","title":"Integration with Agent-Compose-Kit","text":"<p>The Enhanced Runner is designed for seamless integration with agent-compose-kit's YAML-driven systems.</p> <p>Agent-Compose-Kit Configuration: <pre><code># In agent-compose-kit config\nruntime:\n  streaming_mode: \"NONE\"\n  max_llm_calls: 200\n  tool_timeouts:\n    mcp_tools: 30.0\n    openapi_tools: 60.0\n  retry_policies:\n    default:\n      max_attempts: 3\n      strategy: \"EXPONENTIAL_BACKOFF\"\n  debug:\n    enabled: true\n    trace_agent_flow: true\n</code></pre></p> <p>Integration Code: <pre><code># In agent-compose-kit integration\nfrom google_adk_extras.runners import EnhancedRunner, EnhancedRunConfig\n\ndef create_enhanced_runner(system_config, agent, services):\n    # Extract runtime configuration\n    runtime_config = system_config.get('runtime', {})\n\n    # Create enhanced config\n    enhanced_config = EnhancedRunConfig.from_yaml_dict(runtime_config)\n\n    # Create YAML context\n    yaml_context = YamlSystemContext(\n        system_name=system_config['name'],\n        config_path=system_config['_config_path'],\n        current_agent=system_config['agents'][0]['name']\n    )\n\n    # Create enhanced runner\n    return EnhancedRunner(\n        app_name=system_config['name'],\n        agent=agent,\n        session_service=services['session'],\n        artifact_service=services.get('artifact'),\n        memory_service=services.get('memory'),\n        enhanced_config=enhanced_config,\n        yaml_context=yaml_context\n    )\n</code></pre></p>"},{"location":"phase1-enhanced-runner-foundation/#error-debugging","title":"Error Debugging","text":"<p>Enhanced error messages with full context for easier debugging.</p> <p>Error Message Example: <pre><code>[customer-support -&gt; agent:main_agent -&gt; tool:extract_data] Tool execution timed out (tool_type: mcp) (executed for 30.5s, timeout: 30.0s)\n  Caused by: ConnectionError: Connection to MCP server failed\n  Error Code: TOOL_TIMEOUT_001\n  Suggested fixes:\n    1. Increase tool timeout in configuration\n    2. Check MCP server connectivity  \n    3. Verify network configuration\n    4. Review MCP server logs\n</code></pre></p> <p>Debug Information: <pre><code>try:\n    result = await runner.run_async(...)\nexcept YamlSystemError as e:\n    debug_info = e.get_debug_info()\n\n    print(f\"Error Type: {debug_info['error_type']}\")\n    print(f\"System: {debug_info['context']['system_name']}\")\n    print(f\"Agent: {debug_info['context']['current_agent']}\")\n    print(f\"Tool: {debug_info['context']['current_tool']}\")\n    print(f\"Invocation: {debug_info['context']['invocation_id']}\")\n\n    if debug_info.get('original_error'):\n        print(f\"Original Error: {debug_info['original_error']['type']}\")\n        print(\"Traceback:\", debug_info['original_error']['traceback'])\n</code></pre></p>"},{"location":"phase1-enhanced-runner-foundation/#configuration-management","title":"Configuration Management","text":"<p>Dynamic configuration updates and merging capabilities.</p> <p>Runtime Configuration Updates: <pre><code># Update configuration at runtime\nrunner.merge_config_from_yaml({\n    'tool_timeouts': {'mcp_tools': 60.0},\n    'debug': {'trace_tool_execution': True},\n    'max_concurrent_tools': 10\n})\n\n# Update YAML context\nnew_context = runner.yaml_context.with_agent(\"new_agent\")\nrunner.update_yaml_context(new_context)\n\n# Complete configuration replacement\nnew_config = EnhancedRunConfig.from_yaml_dict(new_yaml_config)\nrunner.update_enhanced_config(new_config)\n</code></pre></p>"},{"location":"phase1-enhanced-runner-foundation/#best-practices","title":"Best Practices","text":""},{"location":"phase1-enhanced-runner-foundation/#1-configuration-organization","title":"1. Configuration Organization","text":"<pre><code># Organize configurations by environment\ndev_config = {\n    'debug': {'enabled': True, 'trace_agent_flow': True},\n    'tool_timeouts': {'mcp_tools': 60.0},  # Longer timeouts for development\n    'strict_mode': False\n}\n\nprod_config = {\n    'debug': {'enabled': False, 'performance_profiling': True},\n    'tool_timeouts': {'mcp_tools': 30.0},\n    'enable_circuit_breaker': True,\n    'strict_mode': True\n}\n</code></pre>"},{"location":"phase1-enhanced-runner-foundation/#2-error-handling","title":"2. Error Handling","text":"<pre><code># Always provide context in error handling\ntry:\n    result = await runner.run_async(...)\nexcept YamlSystemError as e:\n    logger.error(f\"System error in {e.context.get_location_string()}: {e}\")\n\n    # Log debug info for investigation\n    debug_info = e.get_debug_info()\n    logger.debug(f\"Full error context: {debug_info}\")\n\n    # Apply suggested fixes if available\n    for fix in e.suggested_fixes:\n        logger.info(f\"Suggested fix: {fix}\")\n</code></pre>"},{"location":"phase1-enhanced-runner-foundation/#3-performance-monitoring","title":"3. Performance Monitoring","text":"<pre><code># Regular metrics collection\nasync def monitor_performance():\n    while True:\n        metrics = runner.get_performance_metrics()\n\n        if metrics['error_rate'] &gt; 0.1:  # 10% error rate\n            logger.warning(f\"High error rate: {metrics['error_rate']:.2%}\")\n\n        if metrics['avg_invocation_time'] &gt; 5.0:  # 5 second average\n            logger.warning(f\"High latency: {metrics['avg_invocation_time']:.2f}s\")\n\n        await asyncio.sleep(60)  # Check every minute\n</code></pre>"},{"location":"phase1-enhanced-runner-foundation/#4-tool-strategy-configuration","title":"4. Tool Strategy Configuration","text":"<pre><code># Configure strategies based on tool characteristics\ndef configure_strategies(runner, tool_info):\n    for tool_name, info in tool_info.items():\n        if info['type'] == 'mcp':\n            # Configure MCP tools with appropriate timeouts\n            if info.get('slow', False):\n                runner.enhanced_config.tool_timeouts.tool_specific_timeouts[tool_name] = 120.0\n\n        elif info['type'] == 'openapi':\n            # Configure API tools with circuit breakers for external services\n            if info.get('external', False):\n                # These will use circuit breaker by default\n                pass\n</code></pre>"},{"location":"phase1-enhanced-runner-foundation/#testing","title":"Testing","text":"<p>Comprehensive test coverage with both unit and integration tests.</p> <p>Unit Tests: - <code>tests/unit/test_enhanced_runner_config.py</code>: Configuration system tests - <code>tests/unit/test_enhanced_runner_errors.py</code>: Error handling tests - <code>tests/unit/test_enhanced_runner_strategies.py</code>: Strategy system tests - <code>tests/unit/test_enhanced_runner.py</code>: Main runner tests</p> <p>Integration Tests: - <code>tests/integration/test_phase1_integration.py</code>: End-to-end integration tests</p> <p>Running Tests: <pre><code># Run all tests\npytest tests/\n\n# Run unit tests only\npytest tests/unit/\n\n# Run integration tests only\npytest tests/integration/\n\n# Run with coverage\npytest --cov=google_adk_extras.runners tests/\n</code></pre></p>"},{"location":"phase1-enhanced-runner-foundation/#api-reference","title":"API Reference","text":""},{"location":"phase1-enhanced-runner-foundation/#enhancedrunner","title":"EnhancedRunner","text":"<pre><code>class EnhancedRunner(Runner):\n    def __init__(\n        self,\n        *,\n        app_name: str,\n        agent: BaseAgent,\n        plugins: Optional[List[BasePlugin]] = None,\n        artifact_service: Optional[BaseArtifactService] = None,\n        session_service: BaseSessionService,\n        memory_service: Optional[BaseMemoryService] = None,\n        credential_service: Optional[BaseCredentialService] = None,\n        enhanced_config: Optional[EnhancedRunConfig] = None,\n        yaml_context: Optional[YamlSystemContext] = None,\n        tool_strategy_manager: Optional[ToolExecutionStrategyManager] = None,\n        tool_registry: Optional[Any] = None,\n        agent_registry: Optional[Any] = None,\n    )\n\n    async def run_async(\n        self,\n        *,\n        user_id: str,\n        session_id: str,\n        new_message: types.Content,\n        state_delta: Optional[Dict[str, Any]] = None,\n        run_config: Optional[RunConfig] = None,\n    ) -&gt; AsyncGenerator[Event, None]\n\n    def get_performance_metrics(self) -&gt; Dict[str, Any]\n    def reset_performance_metrics(self) -&gt; None\n    def update_yaml_context(self, context: YamlSystemContext) -&gt; None\n    def update_enhanced_config(self, config: EnhancedRunConfig) -&gt; None\n    def merge_config_from_yaml(self, yaml_config: Dict[str, Any]) -&gt; None\n    def get_debug_info(self) -&gt; Dict[str, Any]\n</code></pre>"},{"location":"phase1-enhanced-runner-foundation/#enhancedrunconfig","title":"EnhancedRunConfig","text":"<pre><code>class EnhancedRunConfig(BaseModel):\n    base_config: RunConfig\n    tool_timeouts: ToolTimeoutConfig\n    retry_policies: Dict[str, RetryConfig]\n    a2a_config: A2AConfig\n    enable_circuit_breaker: bool\n    circuit_breaker_config: CircuitBreakerConfig\n    enable_tool_registry: bool\n    enable_agent_registry: bool\n    max_concurrent_tools: int\n    tool_execution_queue_size: int\n    debug_config: DebugConfig\n    validate_tool_configs: bool\n    strict_mode: bool\n\n    @classmethod\n    def from_yaml_dict(cls, yaml_config: Dict[str, Any]) -&gt; 'EnhancedRunConfig'\n\n    def to_base_run_config(self) -&gt; RunConfig\n    def get_tool_timeout(self, tool_name: str, tool_type: str = \"function\") -&gt; float\n    def get_retry_config(self, operation_type: str = \"default\") -&gt; RetryConfig\n    def merge_with_yaml(self, yaml_config: Dict[str, Any]) -&gt; 'EnhancedRunConfig'\n</code></pre>"},{"location":"phase1-enhanced-runner-foundation/#yamlsystemcontext","title":"YamlSystemContext","text":"<pre><code>@dataclass\nclass YamlSystemContext:\n    system_name: str\n    config_path: Optional[Union[str, Path]] = None\n    current_agent: Optional[str] = None\n    current_tool: Optional[str] = None\n    invocation_id: Optional[str] = None\n    session_id: Optional[str] = None\n    user_id: Optional[str] = None\n    additional_context: Dict[str, Any] = field(default_factory=dict)\n\n    def with_agent(self, agent_name: str) -&gt; 'YamlSystemContext'\n    def with_tool(self, tool_name: str) -&gt; 'YamlSystemContext'\n    def with_invocation(self, invocation_id: str, session_id: str, user_id: str) -&gt; 'YamlSystemContext'\n    def add_context(self, key: str, value: Any) -&gt; 'YamlSystemContext'\n    def get_location_string(self) -&gt; str\n</code></pre>"},{"location":"phase1-enhanced-runner-foundation/#migration-guide","title":"Migration Guide","text":""},{"location":"phase1-enhanced-runner-foundation/#from-standard-adk-runner","title":"From Standard ADK Runner","text":"<pre><code># Before: Standard ADK Runner\nfrom google.adk.runners import Runner\n\nrunner = Runner(\n    app_name=\"my-app\",\n    agent=agent,\n    session_service=session_service,\n)\n\n# After: Enhanced ADK Runner (drop-in replacement)\nfrom google_adk_extras.runners import EnhancedRunner\n\nrunner = EnhancedRunner(\n    app_name=\"my-app\", \n    agent=agent,\n    session_service=session_service,\n    # No other changes required!\n)\n</code></pre>"},{"location":"phase1-enhanced-runner-foundation/#adding-enhanced-features","title":"Adding Enhanced Features","text":"<pre><code># Add YAML configuration\nenhanced_config = EnhancedRunConfig.from_yaml_dict(yaml_config)\n\nrunner = EnhancedRunner(\n    app_name=\"my-app\",\n    agent=agent,\n    session_service=session_service,\n    enhanced_config=enhanced_config,  # Add enhanced config\n    yaml_context=YamlSystemContext(   # Add context tracking\n        system_name=\"my-system\",\n        config_path=\"/path/to/config.yaml\"\n    )\n)\n</code></pre>"},{"location":"phase1-enhanced-runner-foundation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"phase1-enhanced-runner-foundation/#common-issues","title":"Common Issues","text":"<p>1. Import Errors <pre><code># Make sure to import from the correct module\nfrom google_adk_extras.runners import EnhancedRunner  # Correct\nfrom google_adk_extras import EnhancedRunner  # Incorrect\n</code></pre></p> <p>2. Configuration Validation Errors <pre><code># Enable strict mode to catch configuration errors early\nconfig = EnhancedRunConfig.from_yaml_dict({\n    'strict_mode': True,  # Will validate configurations strictly\n    'validate_tool_configs': True  # Will validate tool configurations\n})\n</code></pre></p> <p>3. Performance Issues <pre><code># Monitor and adjust configuration\nmetrics = runner.get_performance_metrics()\nif metrics['avg_invocation_time'] &gt; 5.0:\n    # Increase concurrent tools or adjust timeouts\n    runner.merge_config_from_yaml({\n        'max_concurrent_tools': 10,\n        'tool_timeouts': {'mcp_tools': 45.0}\n    })\n</code></pre></p> <p>4. Circuit Breaker Issues <pre><code># Check circuit breaker state in debug info\ndebug_info = runner.get_debug_info()\nfor strategy_name, strategy in runner.tool_strategy_manager.strategies.items():\n    if hasattr(strategy, 'circuit_breaker'):\n        print(f\"{strategy_name} circuit breaker state: {strategy.circuit_breaker.state}\")\n</code></pre></p>"},{"location":"phase1-enhanced-runner-foundation/#next-steps","title":"Next Steps","text":"<p>Phase 1 provides the foundation for enhanced ADK Runner functionality. The next phases will build upon this foundation:</p> <ul> <li>Phase 2: Registry integration for dynamic agent/tool loading</li> <li>Phase 3: Advanced developer experience with debugging utilities and performance profiling</li> </ul> <p>For more information about upcoming phases, see the project roadmap and phase-specific documentation.</p>"},{"location":"concepts/configuration/","title":"Configuration System","text":"<p>Load runtime configuration from YAML/JSON/TOML/dicts/env/remote with interpolation and validation.</p> <pre><code>from google_adk_extras.configuration import ConfigurationSystem\nfrom google_adk_extras.runners.config import EnhancedRunConfig\n\nconfig_system = ConfigurationSystem()\nresult = config_system.load_config(EnhancedRunConfig, \"config.yaml\")\nrun_cfg = result.config\n</code></pre> <p>Environment interpolation supports:</p> <ul> <li>Shell style: <code>${VAR}</code>, with default <code>${VAR:default}</code></li> <li>Python expressions: <code>${{ os.environ.get('X', 'fallback') }}</code></li> </ul> <p>Example YAML:</p> <pre><code>services:\n  session:\n    type: sql\n    connection_string: ${DATABASE_URL}\n</code></pre> <p>Validation</p> <ul> <li>Adapter returns <code>validation_issues</code> with severity (error/warning/info)</li> <li>Strict mode can fail fast on errors</li> </ul>"},{"location":"concepts/enhanced-runner/","title":"Enhanced Runner","text":"<p>Drop-in replacement for ADK\u2019s Runner with YAML-driven configuration, tool strategies, and rich error context.</p> <p>Core features</p> <ul> <li><code>EnhancedRunConfig</code> extends ADK <code>RunConfig</code> (timeouts, retries, circuit breaker, A2A, debug)</li> <li>Tool execution strategies: MCP, OpenAPI, Function (timeouts + retries + optional CB)</li> <li>YAML system context in errors: agent/tool/session/user metadata for troubleshooting</li> <li>Registries integration (optional): Agent and Tool registries with health/events/caching</li> </ul> <p>Create from YAML:</p> <pre><code>from google_adk_extras.runners.config import EnhancedRunConfig\n\nconfig = EnhancedRunConfig.from_yaml_dict({\n  \"streaming_mode\": \"NONE\",\n  \"max_llm_calls\": 200,\n  \"tool_timeouts\": {\"openapi_tools\": 60.0, \"function_tools\": 10.0},\n  \"retry_policies\": {\"default\": {\"max_attempts\": 3}},\n  \"debug\": {\"enabled\": True}\n})\n</code></pre> <p>Get debug info at runtime:</p> <pre><code>runner.get_debug_info()\n</code></pre> <p>Errors include suggested fixes and YAML context (<code>YamlSystemError</code>, <code>ToolExecutionError</code>).</p>"},{"location":"concepts/registries/","title":"Registries","text":"<p>Agent and Tool registries provide hot\u2011swapping, dynamic loading, health monitoring, caching, and events.</p>"},{"location":"concepts/registries/#agent-registry","title":"Agent Registry","text":"<ul> <li>Extends <code>CustomAgentLoader</code> with events/health/caching</li> <li>Hot\u2011swap agents with validation</li> </ul> <pre><code>from google_adk_extras.runners.registry import EnhancedAgentRegistry\n\nareg = EnhancedAgentRegistry()\nareg.register_agent(\"chat\", my_agent)\nassert \"chat\" in areg.list_agents()\n</code></pre>"},{"location":"concepts/registries/#tool-registry","title":"Tool Registry","text":"<ul> <li>Registers tools and toolsets; integrates with strategies</li> <li>Tracks usage, errors, health; supports auth detection</li> </ul> <pre><code>from google_adk_extras.runners.registry import EnhancedToolRegistry\nfrom google.adk.tools.function_tool import FunctionTool\n\nasync def hello_tool(ctx):\n    return \"hello\"\n\ntreg = EnhancedToolRegistry()\nawait treg.register_function_tool(\"hello\", hello_tool)\n</code></pre>"},{"location":"concepts/registries/#configuration","title":"Configuration","text":"<p>Pydantic models for registry behavior (caching, health intervals, fallback strategies). See Configuration Reference for fields and defaults.</p>"},{"location":"concepts/services/","title":"Services","text":"<p>Production-ready service implementations for sessions, memory, and artifacts.</p>"},{"location":"concepts/services/#sessions","title":"Sessions","text":"<p>Backends: SQL (SQLAlchemy), MongoDB, Redis, YAML files, In-memory.</p> <p>Common API (async): <code>initialize()</code>, <code>create_session</code>, <code>get_session</code>, <code>list_sessions</code>, <code>append_event</code>, <code>delete_session</code>.</p> <p>Example (SQL):</p> <pre><code>from google_adk_extras.sessions import SQLSessionService\nsvc = SQLSessionService(\"sqlite:///sessions.db\")\nawait svc.initialize()\n</code></pre>"},{"location":"concepts/services/#memory","title":"Memory","text":"<p>Backends: SQL (indexing text content), MongoDB, Redis, YAML files, In-memory.</p> <p>Example (SQL):</p> <pre><code>from google_adk_extras.memory import SQLMemoryService\nmem = SQLMemoryService(\"sqlite:///memory.db\")\nawait mem.initialize()\n</code></pre> <p>Search supports simple OR-term matching across extracted text content.</p>"},{"location":"concepts/services/#artifacts","title":"Artifacts","text":"<p>Backends: Local folder (versioned), S3 (+ compatible), SQL, MongoDB, In-memory.</p> <p>Example (local):</p> <pre><code>from google_adk_extras.artifacts import LocalFolderArtifactService\nart = LocalFolderArtifactService(\"./artifacts\")\nawait art.initialize()\n</code></pre>"},{"location":"concepts/services/#credentials","title":"Credentials","text":"<p>Providers: Google/GitHub/Microsoft/X (OAuth2), JWT, HTTP Basic.</p> <p>Example (JWT):</p> <pre><code>from google_adk_extras.credentials import JWTCredentialService\njwt = JWTCredentialService(secret=\"your-secret\")\nawait jwt.initialize()\n</code></pre> <p>Notes</p> <ul> <li>All custom services inherit base classes that ensure <code>initialize()</code> is called before use.</li> <li>Choose backends to match your environment (dev vs prod) and scale needs.</li> </ul>"},{"location":"examples/","title":"Examples","text":"<p>This repository includes runnable examples under <code>examples/</code>:</p> <ul> <li>Sessions: <code>examples/session/*.py</code> (SQL, Redis, MongoDB, YAML)</li> <li>Memory: <code>examples/memory/*.py</code> (SQL, Redis, MongoDB, YAML)</li> <li>Artifacts: <code>examples/artifact/*.py</code> (Local, S3, SQL, MongoDB)</li> <li>Credentials: <code>examples/credentials/*.py</code> (Google, GitHub, Microsoft, X, JWT, HTTP Basic)</li> <li>Builder &amp; FastAPI: <code>examples/adk_builder_example.py</code>, <code>examples/google_adk_integration.py</code></li> <li>Dynamic chatbot &amp; agent instances: <code>examples/dynamic_chatbot_example.py</code>, <code>examples/agent_instances_example.py</code></li> </ul> <p>Each script includes minimal setup; install the relevant extra and run with Python 3.12+.</p>"},{"location":"get-started/installation/","title":"Installation","text":"<p>Install the core package:</p> <pre><code>pip install google-adk-extras\n</code></pre> <p>Optional backends (install what you need):</p> <pre><code># MongoDB\npip install google-adk-extras[mongodb]\n\n# Redis\npip install google-adk-extras[redis]\n\n# S3\npip install google-adk-extras[s3]\n\n# Everything\npip install google-adk-extras[all]\n</code></pre> <p>From source (dev):</p> <pre><code>git clone https://github.com/DeadMeme5441/google-adk-extras.git\ncd google-adk-extras\nuv sync   # or: pip install -e .\n</code></pre> <p>Verify your environment:</p> <ul> <li>Python 3.12+</li> <li>google-adk installed automatically as a dependency</li> <li>Optional: database or services (Postgres, Redis, Mongo, AWS) if you plan to use them</li> </ul>"},{"location":"get-started/quickstart-fastapi/","title":"Quickstart: Enhanced FastAPI","text":"<p>Serve your agents with a FastAPI app that uses EnhancedRunner and supports custom credential services.</p> <pre><code>from fastapi import FastAPI\nfrom google.adk.cli.utils.agent_loader import AgentLoader\n\nfrom google_adk_extras.enhanced_fastapi import get_enhanced_fast_api_app\nfrom google_adk_extras.credentials import GoogleOAuth2CredentialService\n\n# Directory with your ADK agents (agent.json/root_agent.yaml)\nagents_dir = \"./agents\"\n\n# Optional: custom credential service (Google OAuth2 shown)\ncred = GoogleOAuth2CredentialService(\n    client_id=\"your-client-id\",\n    client_secret=\"your-client-secret\",\n    scopes=[\"openid\", \"email\", \"profile\"]\n)\n\napp: FastAPI = get_enhanced_fast_api_app(\n    agents_dir=agents_dir,\n    session_service_uri=\"sqlite:///sessions.db\",\n    artifact_service_uri=\"local://./artifacts\",\n    memory_service_uri=\"yaml://./memory\",\n    credential_service=cred,\n    allow_origins=[\"*\"],\n    web=True,\n    a2a=False,\n    reload_agents=True,\n)\n</code></pre> <p>Run locally:</p> <pre><code>uvicorn my_app:app --reload\n</code></pre> <p>What this shows</p> <ul> <li>Enhanced FastAPI wiring that respects custom credential services</li> <li>Uses EnhancedAdkWebServer under the hood to return EnhancedRunner per app</li> <li>Same ADK routes + optional dev builder endpoints</li> </ul>"},{"location":"get-started/quickstart-runner/","title":"Quickstart: Enhanced Runner","text":"<p>Create and run an agent using the EnhancedRunner with services and credentials.</p> <pre><code>from google.adk.agents.base_agent import BaseAgent\nfrom google.genai import types\n\nfrom google_adk_extras.runners import EnhancedRunner\nfrom google_adk_extras.runners.config import EnhancedRunConfig\nfrom google_adk_extras.runners.errors import YamlSystemContext\nfrom google_adk_extras.sessions import SQLSessionService\nfrom google_adk_extras.memory import SQLMemoryService\nfrom google_adk_extras.artifacts import LocalFolderArtifactService\nfrom google_adk_extras.credentials import JWTCredentialService\n\n# Your agent (simplified example)\nclass EchoAgent(BaseAgent):\n    async def _run_async_impl(self, *, user_id, session_id, new_message, state_delta=None, run_config=None):\n        # Emit a single text reply\n        yield types.Event(author=\"echo\", content=types.Content(parts=[types.Part(text=\"Hello from EnhancedRunner!\")]))\n\n# Services\nsession_service = SQLSessionService(\"sqlite:///sessions.db\")\nmemory_service = SQLMemoryService(\"sqlite:///memory.db\")\nartifact_service = LocalFolderArtifactService(\"./artifacts\")\ncredential_service = JWTCredentialService(secret=\"supersecret\")\n\n# Enhanced config\nconfig = EnhancedRunConfig.from_yaml_dict({\n    \"max_llm_calls\": 100,\n    \"tool_timeouts\": {\"function_tools\": 10.0},\n    \"retry_policies\": {\"default\": {\"max_attempts\": 2}},\n    \"debug\": {\"enabled\": True}\n})\n\nrunner = EnhancedRunner(\n    app_name=\"my_app\",\n    agent=EchoAgent(),\n    session_service=session_service,\n    artifact_service=artifact_service,\n    memory_service=memory_service,\n    credential_service=credential_service,\n    enhanced_config=config,\n    yaml_context=YamlSystemContext(system_name=\"demo\")\n)\n\n# Run once\nimport asyncio\nasync def main():\n    async for event in runner.run_async(\n        user_id=\"u1\",\n        session_id=\"s1\",\n        new_message=types.Content(parts=[types.Part(text=\"Hi\")])\n    ):\n        print(event)\n\nasyncio.run(main())\n</code></pre> <p>What this shows</p> <ul> <li>Drop-in EnhancedRunner with services and credentials</li> <li>YAML-derived runtime config and debug context</li> <li>Async run producing ADK events</li> </ul>"},{"location":"how-to/artifacts/","title":"Artifacts (How\u2011To)","text":"<p>Store and retrieve binary artifacts (with versioning).</p>"},{"location":"how-to/artifacts/#local-folder","title":"Local Folder","text":"<pre><code>from google_adk_extras.artifacts import LocalFolderArtifactService\nfrom google.genai import types\n\nsvc = LocalFolderArtifactService(\"./artifacts\")\nawait svc.initialize()\n\npart = types.Part(inline_data=types.Blob(data=b\"hello\", mime_type=\"text/plain\"))\nv = await svc.save_artifact(app_name=\"my_app\", user_id=\"u1\", session_id=\"s1\", filename=\"greeting\", artifact=part)\nloaded = await svc.load_artifact(app_name=\"my_app\", user_id=\"u1\", session_id=\"s1\", filename=\"greeting\", version=v)\n</code></pre>"},{"location":"how-to/artifacts/#s3","title":"S3","text":"<pre><code>from google_adk_extras.artifacts import S3ArtifactService\nsvc = S3ArtifactService(bucket_name=\"my-bucket\")\nawait svc.initialize()\n</code></pre> <p>Other backends: SQL, MongoDB.</p> <p>Tips</p> <ul> <li>Local is great for dev; use S3/SQL/Mongo in production.</li> <li>Use <code>list_versions</code> to implement rollback flows.</li> </ul>"},{"location":"how-to/builder/","title":"AdkBuilder (How\u2011To)","text":"<p>Fluent builder to assemble services, agent loader/instances, and build a FastAPI app or Runner.</p> <pre><code>from google_adk_extras import AdkBuilder\nfrom google_adk_extras.credentials import GoogleOAuth2CredentialService\n\napp = (\n  AdkBuilder()\n  .with_agents_dir(\"./agents\")\n  .with_session_service(\"sqlite:///sessions.db\")\n  .with_artifact_service(\"local://./artifacts\")\n  .with_memory_service(\"yaml://./memory\")\n  .with_credential_service(GoogleOAuth2CredentialService(\n      client_id=\"...\", client_secret=\"...\", scopes=[\"openid\", \"email\"]\n  ))\n  .with_web_ui(True)\n  .with_agent_reload(True)\n  .build_fastapi_app()\n)\n</code></pre> <p>Notes</p> <ul> <li>URIs vs instances: use URIs for simple wiring, or pass pre\u2011built instances for advanced control.</li> <li>Programmatic agent insertion: <code>with_agent_instance(name, agent)</code> or <code>with_agents({..})</code>.</li> </ul>"},{"location":"how-to/credentials/","title":"Credentials (How\u2011To)","text":"<p>Use OAuth2 providers, JWT, or HTTP Basic with ADK.</p>"},{"location":"how-to/credentials/#google-oauth2","title":"Google OAuth2","text":"<pre><code>from google_adk_extras.credentials import GoogleOAuth2CredentialService\n\ncred = GoogleOAuth2CredentialService(\n  client_id=\"...\",\n  client_secret=\"...\",\n  scopes=[\"openid\", \"email\", \"profile\"]\n)\nawait cred.initialize()\n</code></pre>"},{"location":"how-to/credentials/#jwt","title":"JWT","text":"<pre><code>from google_adk_extras.credentials import JWTCredentialService\njwt = JWTCredentialService(secret=\"secret\", issuer=\"my-app\")\nawait jwt.initialize()\n</code></pre>"},{"location":"how-to/credentials/#http-basic","title":"HTTP Basic","text":"<pre><code>from google_adk_extras.credentials import HTTPBasicAuthCredentialService\nbasic = HTTPBasicAuthCredentialService(username=\"u\", password=\"p\", realm=\"API\")\nawait basic.initialize()\n</code></pre> <p>Integrate with Runner or FastAPI by passing the <code>credential_service</code>.</p> <p>Security</p> <ul> <li>Store secrets securely (env vars or secret manager).</li> <li>For OAuth2, configure allowed redirect URIs and rotate client secrets.</li> </ul>"},{"location":"how-to/errors/","title":"Error Handling (How\u2011To)","text":"<p>Enhanced errors preserve YAML system context for fast diagnosis.</p> <p>Common errors</p> <ul> <li><code>YamlSystemError</code>: base class with system/agent/tool/session/user context</li> <li><code>ToolExecutionError</code>: tool\u2011specific failure with type, timing, suggestions</li> <li><code>ConfigurationError</code>: issues while loading/validating configuration</li> <li><code>RegistryError</code>: agent/tool registry problems</li> </ul> <p>Example</p> <pre><code>from google_adk_extras.runners.errors import YamlSystemError, YamlSystemContext\n\nctx = YamlSystemContext(system_name=\"my_system\", current_agent=\"root\")\ntry:\n    raise YamlSystemError(\"Something failed\", context=ctx)\nexcept YamlSystemError as e:\n    print(e.get_debug_info())\n</code></pre> <p>Tips</p> <ul> <li>Prefer raising these errors in extensions for consistent UX.</li> <li>Log <code>get_debug_info()</code> in debug builds for rich context.</li> </ul>"},{"location":"how-to/fastapi/","title":"FastAPI Integration (How\u2011To)","text":"<p>Expose agents via FastAPI using the enhanced app factory.</p> <pre><code>from google_adk_extras.enhanced_fastapi import get_enhanced_fast_api_app\napp = get_enhanced_fast_api_app(\n  agents_dir=\"./agents\",\n  session_service_uri=\"sqlite:///sessions.db\",\n  artifact_service_uri=\"local://./artifacts\",\n  memory_service_uri=\"yaml://./memory\",\n  allow_origins=[\"*\"],\n  web=True,\n  reload_agents=True,\n)\n</code></pre> <p>Features</p> <ul> <li>Supports custom <code>credential_service</code> (OAuth2/JWT/Basic).</li> <li>A2A support (optional) and ADK dev builder endpoints.</li> <li>Integrates <code>EnhancedAdkWebServer</code> to return <code>EnhancedRunner</code> for each app.</li> </ul>"},{"location":"how-to/memory/","title":"Memory (How\u2011To)","text":"<p>Configure and search conversational memory.</p>"},{"location":"how-to/memory/#sql","title":"SQL","text":"<pre><code>from google_adk_extras.memory import SQLMemoryService\nmem = SQLMemoryService(\"sqlite:///memory.db\")\nawait mem.initialize()\n</code></pre> <p>Search:</p> <pre><code>resp = await mem.search_memory(app_name=\"my_app\", user_id=\"u1\", query=\"calendar meeting\")\nfor entry in resp.memories:\n    print(entry.content)\n</code></pre> <p>Other backends: Redis, MongoDB, YAML files.</p> <p>Notes</p> <ul> <li>SQL backend indexes extracted text content to enable simple term search.</li> <li>Large deployments should use a managed DB and periodic maintenance.</li> </ul>"},{"location":"how-to/sessions/","title":"Sessions (How\u2011To)","text":"<p>Configure and use session storage backends.</p>"},{"location":"how-to/sessions/#sql-sqlitepostgresmysql","title":"SQL (SQLite/Postgres/MySQL)","text":"<pre><code>from google_adk_extras.sessions import SQLSessionService\nsvc = SQLSessionService(\"sqlite:///sessions.db\")\nawait svc.initialize()\nsession = await svc.create_session(app_name=\"my_app\", user_id=\"u1\")\n</code></pre>"},{"location":"how-to/sessions/#redis","title":"Redis","text":"<pre><code>from google_adk_extras.sessions import RedisSessionService\nsvc = RedisSessionService(\"redis://localhost:6379\")\nawait svc.initialize()\n</code></pre>"},{"location":"how-to/sessions/#mongodb","title":"MongoDB","text":"<pre><code>from google_adk_extras.sessions import MongoSessionService\nsvc = MongoSessionService(\"mongodb://localhost:27017/sessions\")\nawait svc.initialize()\n</code></pre>"},{"location":"how-to/sessions/#yaml-files-dev","title":"YAML Files (dev)","text":"<pre><code>from google_adk_extras.sessions import YamlFileSessionService\nsvc = YamlFileSessionService(base_directory=\"./sessions\")\nawait svc.initialize()\n</code></pre> <p>Tips</p> <ul> <li>Always <code>await initialize()</code> once per process.</li> <li>For SQL, prefer pooled engines in production databases.</li> <li>Use <code>GetSessionConfig</code> to filter events on read if needed.</li> </ul>"},{"location":"how-to/strategies/","title":"Tool Strategies (How\u2011To)","text":"<p>Configure execution strategies for MCP, OpenAPI, and function tools.</p> <pre><code>from google_adk_extras.runners.strategies import (\n  ToolExecutionStrategyManager,\n  McpToolExecutionStrategy,\n  OpenApiToolExecutionStrategy,\n  FunctionToolExecutionStrategy,\n)\n\nmgr = ToolExecutionStrategyManager()\nmgr.register_strategy(\"mcp\", McpToolExecutionStrategy(timeout=45.0))\nmgr.register_strategy(\"openapi\", OpenApiToolExecutionStrategy(timeout=60.0))\nmgr.register_strategy(\"function\", FunctionToolExecutionStrategy(timeout=10.0))\n</code></pre> <p>Pass the manager to <code>EnhancedRunner</code> or let it create defaults from <code>EnhancedRunConfig</code>.</p> <p>Retries &amp; Circuit Breaker</p> <ul> <li>Each strategy supports per\u2011type timeouts and retry policies; CB is optional and recommended for external APIs.</li> </ul>"},{"location":"operations/performance/","title":"Performance &amp; Caching","text":"<p>EnhancedRunner</p> <ul> <li>Control concurrency via <code>max_concurrent_tools</code>; monitor with <code>get_performance_metrics()</code>.</li> <li>Use retries judiciously; prefer idempotent operations.</li> </ul> <p>Registries</p> <ul> <li>Enable caching with sensible TTLs for tool/agent lookups.</li> <li>Health checks add overhead; tune <code>check_interval</code>.</li> </ul> <p>Backends</p> <ul> <li>Use production databases with pooling.</li> <li>Keep artifact IO off the hot path where possible.</li> </ul>"},{"location":"operations/security/","title":"Security","text":"<p>Credentials</p> <ul> <li>Store secrets outside source control; prefer secret managers.</li> <li>Rotate OAuth2 client secrets; restrict redirect URIs.</li> <li>JWT: use strong secrets/keys, set issuer/audience/expiry.</li> </ul> <p>Environment</p> <ul> <li>Interpolation: be mindful when enabling Python expressions; limit sources.</li> <li>Principle of least privilege for DBs and object storage.</li> </ul> <p>Network</p> <ul> <li>Use TLS everywhere; terminate at the load balancer or service mesh.</li> <li>Consider rate limiting and WAF for public endpoints.</li> </ul>"},{"location":"operations/troubleshooting/","title":"Troubleshooting &amp; FAQ","text":"<p>Common issues</p> <ul> <li>Can\u2019t import modules in API docs: ensure <code>mkdocs.yml</code> has <code>paths: [src]</code> for mkdocstrings.</li> <li>Credential errors: check client IDs/secrets and redirect URIs; verify scopes.</li> <li>DB connection errors: validate connection strings and network access.</li> <li>Tool timeouts: increase per\u2011type timeouts; add retries and circuit breaker.</li> </ul> <p>FAQ</p> <ul> <li>Q: Can I use only one service type? A: Yes, mix any backends per need.</li> <li>Q: Do I need registries? A: Optional; useful for dynamic systems.</li> <li>Q: Where is the \u201cEnhancedAgents\u201d layer? A: Not included; use ADK agents directly.</li> </ul>"},{"location":"reference/errors/","title":"Error Types","text":""},{"location":"reference/errors/#yamlsystemerror","title":"YamlSystemError","text":"<p>Base enhanced error with YAML system context.</p>"},{"location":"reference/errors/#toolexecutionerror","title":"ToolExecutionError","text":"<p>Tool execution failure with type, execution time, timeout, and suggestions.</p>"},{"location":"reference/errors/#configurationerror","title":"ConfigurationError","text":"<p>Raised by configuration adapters/system on load/validation problems.</p>"},{"location":"reference/errors/#registryerror","title":"RegistryError","text":"<p>Issues with agent/tool registries (missing agents/tools, validation failures).</p> <p>Tip: call <code>get_debug_info()</code> on exceptions for rich context.</p>"},{"location":"reference/uris/","title":"Service URI Cheatsheet","text":"<p>Sessions</p> <ul> <li>SQL: <code>sqlite:///path.db</code>, <code>postgresql://user:pass@host/db</code>, <code>mysql://...</code></li> <li>Redis: <code>redis://host:6379</code></li> <li>MongoDB: <code>mongodb://host:27017/db</code></li> <li>YAML: <code>yaml://./sessions</code></li> </ul> <p>Memory</p> <ul> <li>SQL: <code>sqlite:///memory.db</code>, <code>postgresql://...</code></li> <li>Redis: <code>redis://host:6379</code></li> <li>MongoDB: <code>mongodb://host:27017/db</code></li> <li>YAML: <code>yaml://./memory</code></li> </ul> <p>Artifacts</p> <ul> <li>Local: <code>local://./artifacts</code></li> <li>S3: <code>s3://bucket-name</code></li> <li>SQL: <code>sqlite:///artifacts.db</code>, <code>postgresql://...</code></li> <li>MongoDB: <code>mongodb://host:27017/db</code></li> </ul> <p>Credentials</p> <ul> <li>Google OAuth2: <code>oauth2-google://client_id:secret@scopes=openid,email</code></li> <li>GitHub OAuth2: <code>oauth2-github://client_id:secret@scopes=user,repo</code></li> <li>Microsoft OAuth2: <code>oauth2-microsoft://tenant/client_id:secret@scopes=User.Read</code></li> <li>X OAuth2: <code>oauth2-x://client_id:secret@scopes=tweet.read</code></li> <li>JWT: <code>jwt://secret@algorithm=HS256&amp;issuer=...&amp;audience=...&amp;expiration_minutes=60</code></li> <li>Basic: <code>basic-auth://username:password@realm=My%20API</code></li> </ul>"},{"location":"reference/api/","title":"API Reference","text":""},{"location":"reference/api/#fastapi-server","title":"FastAPI &amp; Server","text":"<p>Enhanced FastAPI app creation with credential service support.</p> <p>This module provides an enhanced version of Google ADK's get_fast_api_app function that properly supports custom credential services.</p> <p>Enhanced ADK Web Server that uses EnhancedRunner.</p> <p>This module provides the EnhancedAdkWebServer class which extends Google ADK's AdkWebServer to use our EnhancedRunner with advanced features.</p>"},{"location":"reference/api/#google_adk_extras.enhanced_fastapi.get_enhanced_fast_api_app","title":"<code>get_enhanced_fast_api_app(*, agents_dir=None, agent_loader=None, session_service_uri=None, session_db_kwargs=None, artifact_service_uri=None, memory_service_uri=None, credential_service=None, eval_storage_uri=None, allow_origins=None, web=True, a2a=False, host='127.0.0.1', port=8000, trace_to_cloud=False, reload_agents=False, lifespan=None, enhanced_config=None, yaml_context=None, tool_strategy_manager=None)</code>","text":"<p>Enhanced version of Google ADK's get_fast_api_app with EnhancedRunner integration.</p> <p>This function extends Google ADK's get_fast_api_app with enhanced capabilities: 1. Uses EnhancedAdkWebServer which creates EnhancedRunner instances 2. Supports custom credential services instead of hardcoding InMemoryCredentialService 3. Supports custom agent loading logic 4. Provides advanced tool execution strategies (MCP, OpenAPI, Function tools) 5. Enables circuit breakers, retry policies, and performance monitoring 6. Supports YAML-driven configuration and error context</p> <p>Parameters:</p> Name Type Description Default <code>agents_dir</code> <code>Optional[str]</code> <p>Directory containing agent definitions (optional if agent_loader provided).</p> <code>None</code> <code>agent_loader</code> <code>Optional[BaseAgentLoader]</code> <p>Custom agent loader instance (optional if agents_dir provided).</p> <code>None</code> <code>session_service_uri</code> <code>Optional[str]</code> <p>Session service URI.</p> <code>None</code> <code>session_db_kwargs</code> <code>Optional[Mapping[str, Any]]</code> <p>Additional database configuration for session service.</p> <code>None</code> <code>artifact_service_uri</code> <code>Optional[str]</code> <p>Artifact service URI.</p> <code>None</code> <code>memory_service_uri</code> <code>Optional[str]</code> <p>Memory service URI.</p> <code>None</code> <code>credential_service</code> <code>Optional[BaseCredentialService]</code> <p>Custom credential service instance.</p> <code>None</code> <code>eval_storage_uri</code> <code>Optional[str]</code> <p>Evaluation storage URI.</p> <code>None</code> <code>allow_origins</code> <code>Optional[List[str]]</code> <p>CORS allowed origins.</p> <code>None</code> <code>web</code> <code>bool</code> <p>Whether to serve web UI.</p> <code>True</code> <code>a2a</code> <code>bool</code> <p>Whether to enable A2A protocol.</p> <code>False</code> <code>host</code> <code>str</code> <p>Server host.</p> <code>'127.0.0.1'</code> <code>port</code> <code>int</code> <p>Server port.</p> <code>8000</code> <code>trace_to_cloud</code> <code>bool</code> <p>Whether to enable cloud tracing.</p> <code>False</code> <code>reload_agents</code> <code>bool</code> <p>Whether to enable hot reloading.</p> <code>False</code> <code>lifespan</code> <code>Optional[Lifespan[FastAPI]]</code> <p>FastAPI lifespan callable.</p> <code>None</code> <code>enhanced_config</code> <code>Optional[EnhancedRunConfig]</code> <p>Enhanced runner configuration with tool timeouts, retries, etc.</p> <code>None</code> <code>yaml_context</code> <code>Optional[YamlSystemContext]</code> <p>YAML system context for error handling and debugging.</p> <code>None</code> <code>tool_strategy_manager</code> <code>Optional[ToolExecutionStrategyManager]</code> <p>Manager for tool execution strategies (MCP, OpenAPI, etc.).</p> <code>None</code> <p>Returns:</p> Name Type Description <code>FastAPI</code> <code>FastAPI</code> <p>Configured FastAPI application.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If neither agents_dir nor agent_loader is provided.</p>"},{"location":"reference/api/#google_adk_extras.enhanced_adk_web_server.EnhancedAdkWebServer","title":"<code>EnhancedAdkWebServer</code>","text":"<p>               Bases: <code>AdkWebServer</code></p> <p>Enhanced ADK Web Server that creates EnhancedRunner instances.</p> <p>This class extends Google's AdkWebServer to use our EnhancedRunner with: - Advanced tool execution strategies (MCP, OpenAPI, Function tools) - Circuit breakers and retry policies for resilience - YAML system context and enhanced configuration - Performance monitoring and debugging capabilities - Credential service integration (inherited)</p> <p>The EnhancedAdkWebServer is a drop-in replacement for AdkWebServer that provides significantly enhanced capabilities while maintaining full backward compatibility with all existing APIs.</p> <p>Examples:</p> <p>Basic usage (drop-in replacement): <pre><code>enhanced_server = EnhancedAdkWebServer(\n    agent_loader=agent_loader,\n    session_service=session_service,\n    artifact_service=artifact_service,\n    memory_service=memory_service,\n    credential_service=credential_service,\n    eval_sets_manager=eval_sets_manager,\n    eval_set_results_manager=eval_set_results_manager,\n    agents_dir=\"./agents\"\n)\n</code></pre></p> <p>With enhanced features: <pre><code>enhanced_config = EnhancedRunConfig.from_yaml_dict({\n    'max_llm_calls': 200,\n    'tool_timeouts': {'mcp_tools': 30.0},\n    'circuit_breaker': {'failure_threshold': 3},\n    'debug': {'enabled': True}\n})\n\nstrategy_manager = ToolExecutionStrategyManager()\nstrategy_manager.register_strategy('mcp', McpToolExecutionStrategy(timeout=45.0))\n\nenhanced_server = EnhancedAdkWebServer(\n    agent_loader=agent_loader,\n    session_service=session_service,\n    # ... other services ...\n    enhanced_config=enhanced_config,\n    yaml_context=YamlSystemContext(\n        system_name=\"my-agent-system\",\n        config_path=\"/path/to/config.yaml\"\n    ),\n    tool_strategy_manager=strategy_manager\n)\n</code></pre></p>"},{"location":"reference/api/#google_adk_extras.enhanced_adk_web_server.EnhancedAdkWebServer.__init__","title":"<code>__init__(*, enhanced_config=None, yaml_context=None, tool_strategy_manager=None, **kwargs)</code>","text":"<p>Initialize EnhancedAdkWebServer.</p> <p>Parameters:</p> Name Type Description Default <code>enhanced_config</code> <code>Optional[EnhancedRunConfig]</code> <p>Enhanced configuration for runners (optional)</p> <code>None</code> <code>yaml_context</code> <code>Optional[YamlSystemContext]</code> <p>YAML system context for error handling (optional)</p> <code>None</code> <code>tool_strategy_manager</code> <code>Optional[ToolExecutionStrategyManager]</code> <p>Tool execution strategy manager (optional)</p> <code>None</code> <code>**kwargs</code> <p>All other parameters passed to AdkWebServer</p> <code>{}</code>"},{"location":"reference/api/#google_adk_extras.enhanced_adk_web_server.EnhancedAdkWebServer.get_runner_async","title":"<code>get_runner_async(app_name)</code>  <code>async</code>","text":"<p>Returns the enhanced runner for the given app.</p> <p>This method overrides AdkWebServer.get_runner_async to create EnhancedRunner instances instead of standard Runner instances.</p> <p>The logic is identical to the parent class except: 1. Creates EnhancedRunner instead of Runner 2. Passes enhanced configuration parameters 3. Maintains full compatibility with cleanup and caching</p> <p>Parameters:</p> Name Type Description Default <code>app_name</code> <code>str</code> <p>The name of the application/agent to get runner for</p> required <p>Returns:</p> Type Description <code>EnhancedRunner</code> <p>An EnhancedRunner instance for the specified app</p>"},{"location":"reference/api/#builders","title":"Builders","text":"<p>AdkBuilder - Enhanced builder for Google ADK with credential service support.</p> <p>This module provides the AdkBuilder class that extends Google ADK's FastAPI integration with support for custom credential services and enhanced configuration options.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder","title":"<code>AdkBuilder</code>","text":"<p>Builder for creating enhanced Google ADK applications with custom credential services.</p> <p>This builder extends Google ADK's capabilities by adding support for custom credential services while maintaining full compatibility with all ADK features including web UI, hot reloading, A2A protocol, and cloud deployment.</p> Example <pre><code>from google_adk_extras import AdkBuilder\nfrom google_adk_extras.credentials import GoogleOAuth2CredentialService\n\n# Build FastAPI app with Google OAuth2 credentials\napp = (AdkBuilder()\n       .with_agents_dir(\"./agents\")\n       .with_session_service(\"sqlite:///sessions.db\")\n       .with_credential_service(GoogleOAuth2CredentialService(\n           client_id=\"your-client-id\",\n           client_secret=\"your-secret\",\n           scopes=[\"calendar\", \"gmail.readonly\"]\n       ))\n       .with_web_ui()\n       .build_fastapi_app())\n\n# Or build a Runner directly  \nrunner = (AdkBuilder()\n          .with_agents_dir(\"./agents\")\n          .with_credential_service_uri(\"oauth2-google://client-id:secret@scopes=calendar,gmail.readonly\")\n          .build_runner(\"my_agent\"))\n</code></pre>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the AdkBuilder with default configuration.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.build_fastapi_app","title":"<code>build_fastapi_app()</code>","text":"<p>Build and return configured FastAPI application.</p> <p>Returns:</p> Name Type Description <code>FastAPI</code> <code>FastAPI</code> <p>Configured FastAPI application with all ADK features.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If required configuration is missing.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.build_runner","title":"<code>build_runner(agent_or_agent_name)</code>","text":"<p>Build and return configured Runner.</p> <p>Parameters:</p> Name Type Description Default <code>agent_or_agent_name</code> <code>Union[BaseAgent, str]</code> <p>Agent instance or agent name to load.</p> required <p>Returns:</p> Name Type Description <code>Runner</code> <code>Runner</code> <p>Configured Runner instance.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If required configuration is missing.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_a2a_protocol","title":"<code>with_a2a_protocol(enabled=True)</code>","text":"<p>Enable or disable Agent-to-Agent protocol support.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to enable A2A protocol. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_agent_instance","title":"<code>with_agent_instance(name, agent)</code>","text":"<p>Register an agent instance by name for programmatic agent control.</p> <p>This allows you to define agents purely in code without requiring directory structures or file-based definitions.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Agent name for discovery and loading.</p> required <code>agent</code> <code>BaseAgent</code> <p>BaseAgent instance to register.</p> required <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p> Example <pre><code>from google.adk.agents import Agent\n\nmy_agent = Agent(\n    name=\"dynamic_agent\",\n    model=\"gemini-2.0-flash\",\n    instructions=\"You are a helpful assistant.\"\n)\n\napp = (AdkBuilder()\n       .with_agent_instance(\"my_agent\", my_agent)\n       .build_fastapi_app())\n</code></pre>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_agent_loader","title":"<code>with_agent_loader(loader)</code>","text":"<p>Use a custom agent loader instead of directory-based loading.</p> <p>This provides full control over agent discovery and loading logic. The custom loader will be used instead of creating a default AgentLoader.</p> <p>Parameters:</p> Name Type Description Default <code>loader</code> <code>BaseAgentLoader</code> <p>BaseAgentLoader instance to use for agent loading.</p> required <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p> Example <pre><code>custom_loader = CustomAgentLoader()\ncustom_loader.register_agent(\"agent1\", my_agent)\n\napp = (AdkBuilder()\n       .with_agent_loader(custom_loader)\n       .build_fastapi_app())\n</code></pre>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_agent_reload","title":"<code>with_agent_reload(enabled=True)</code>","text":"<p>Enable or disable hot reloading of agents during development.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to enable agent hot reloading. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_agents","title":"<code>with_agents(agents_dict)</code>","text":"<p>Register multiple agent instances at once.</p> <p>Parameters:</p> Name Type Description Default <code>agents_dict</code> <code>Dict[str, BaseAgent]</code> <p>Dictionary mapping agent names to BaseAgent instances.</p> required <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p> Example <pre><code>agents = {\n    \"agent1\": Agent(...),\n    \"agent2\": Agent(...),\n}\n\napp = (AdkBuilder()\n       .with_agents(agents)\n       .build_fastapi_app())\n</code></pre>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_agents_dir","title":"<code>with_agents_dir(agents_dir)</code>","text":"<p>Set the directory containing agent definitions.</p> <p>Parameters:</p> Name Type Description Default <code>agents_dir</code> <code>str</code> <p>Path to directory containing agent subdirectories.</p> required <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_app_name","title":"<code>with_app_name(app_name)</code>","text":"<p>Set the application name.</p> <p>Parameters:</p> Name Type Description Default <code>app_name</code> <code>str</code> <p>Name of the application.</p> required <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_artifact_service","title":"<code>with_artifact_service(uri)</code>","text":"<p>Configure artifact service using URI.</p> <p>Supported URIs: - \"gs://bucket-name\" - Google Cloud Storage</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>Artifact service URI.</p> required <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_artifact_service_instance","title":"<code>with_artifact_service_instance(service)</code>","text":"<p>Configure artifact service using service instance.</p> <p>Parameters:</p> Name Type Description Default <code>service</code> <code>BaseArtifactService</code> <p>Artifact service instance.</p> required <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_cloud_tracing","title":"<code>with_cloud_tracing(enabled=True)</code>","text":"<p>Enable or disable cloud tracing.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to enable cloud tracing. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_cors","title":"<code>with_cors(allow_origins)</code>","text":"<p>Configure CORS allowed origins.</p> <p>Parameters:</p> Name Type Description Default <code>allow_origins</code> <code>List[str]</code> <p>List of allowed origins for CORS.</p> required <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_credential_service","title":"<code>with_credential_service(service)</code>","text":"<p>Configure credential service using service instance.</p> <p>Parameters:</p> Name Type Description Default <code>service</code> <code>BaseCredentialService</code> <p>Credential service instance (our custom services or ADK services).</p> required <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_credential_service_uri","title":"<code>with_credential_service_uri(uri)</code>","text":"<p>Configure credential service using URI.</p> <p>Supported URIs: - \"oauth2-google://client-id:secret@scopes=scope1,scope2\" - \"oauth2-github://client-id:secret@scopes=user,repo\" - \"oauth2-microsoft://tenant-id/client-id:secret@scopes=User.Read\" - \"oauth2-x://client-id:secret@scopes=tweet.read,users.read\" - \"jwt://secret@algorithm=HS256&amp;issuer=my-app&amp;audience=api.example.com&amp;expiration_minutes=60\" - \"basic-auth://username:password@realm=My API\"</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>Credential service URI.</p> required <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_eval_storage","title":"<code>with_eval_storage(uri)</code>","text":"<p>Configure evaluation storage using URI.</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>Evaluation storage URI.</p> required <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_host_port","title":"<code>with_host_port(host='127.0.0.1', port=8000)</code>","text":"<p>Configure host and port for the server.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Host address. Defaults to \"127.0.0.1\".</p> <code>'127.0.0.1'</code> <code>port</code> <code>int</code> <p>Port number. Defaults to 8000.</p> <code>8000</code> <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_lifespan","title":"<code>with_lifespan(lifespan)</code>","text":"<p>Configure FastAPI lifespan events.</p> <p>Parameters:</p> Name Type Description Default <code>lifespan</code> <code>Lifespan[FastAPI]</code> <p>FastAPI lifespan callable.</p> required <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_memory_service","title":"<code>with_memory_service(uri)</code>","text":"<p>Configure memory service using URI.</p> <p>Supported URIs: - \"yaml://path/to/memory.yaml\" - YAML file memory storage - \"redis://localhost:6379\" - Redis memory storage - \"sqlite:///./memory.db\" - SQLite database - \"postgresql://user:pass@host/db\" - PostgreSQL database - \"mongodb://localhost:27017/memory\" - MongoDB memory storage</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>Memory service URI.</p> required <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_memory_service_instance","title":"<code>with_memory_service_instance(service)</code>","text":"<p>Configure memory service using service instance.</p> <p>Parameters:</p> Name Type Description Default <code>service</code> <code>BaseMemoryService</code> <p>Memory service instance.</p> required <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_session_service","title":"<code>with_session_service(uri, **db_kwargs)</code>","text":"<p>Configure session service using URI.</p> <p>Supported URIs: - \"sqlite:///./sessions.db\" - SQLite database - \"postgresql://user:pass@host/db\" - PostgreSQL database - \"yaml://path/to/sessions.yaml\" - YAML file session storage - \"redis://localhost:6379\" - Redis session storage - \"mongodb://localhost:27017/sessions\" - MongoDB session storage</p> <p>Parameters:</p> Name Type Description Default <code>uri</code> <code>str</code> <p>Session service URI.</p> required <code>**db_kwargs</code> <p>Additional database configuration options.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_session_service_instance","title":"<code>with_session_service_instance(service)</code>","text":"<p>Configure session service using service instance.</p> <p>Parameters:</p> Name Type Description Default <code>service</code> <code>BaseSessionService</code> <p>Session service instance.</p> required <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#google_adk_extras.adk_builder.AdkBuilder.with_web_ui","title":"<code>with_web_ui(enabled=True)</code>","text":"<p>Enable or disable the web development UI.</p> <p>Parameters:</p> Name Type Description Default <code>enabled</code> <code>bool</code> <p>Whether to enable web UI. Defaults to True.</p> <code>True</code> <p>Returns:</p> Name Type Description <code>AdkBuilder</code> <code>AdkBuilder</code> <p>Self for method chaining.</p>"},{"location":"reference/api/#runners","title":"Runners","text":"<p>Enhanced ADK Runner with YAML system support.</p> <p>This module provides the EnhancedRunner class which extends Google ADK's Runner with advanced features for YAML-driven agent systems.</p> <p>Enhanced configuration classes for YAML-driven runner behavior.</p> <p>This module provides configuration models that extend ADK's RunConfig to support YAML-driven agent systems with advanced features.</p> <p>Enhanced error handling for YAML-driven agent systems.</p> <p>This module provides rich error handling capabilities that preserve context about which YAML system, agent, or tool caused an error, making debugging significantly easier for complex agent compositions.</p> <p>Tool execution strategies for enhanced runners.</p> <p>This module provides configurable strategies for executing different types of tools (MCP, OpenAPI, function tools) with advanced features like timeouts, retries, circuit breakers, and error handling.</p>"},{"location":"reference/api/#google_adk_extras.runners.enhanced_runner.EnhancedRunner","title":"<code>EnhancedRunner</code>","text":"<p>               Bases: <code>Runner</code></p> <p>Enhanced ADK Runner with YAML system support.</p> <p>This runner extends Google ADK's Runner with advanced features including: - YAML-driven configuration through EnhancedRunConfig - Rich error handling with YAML system context - Configurable tool execution strategies  - Support for agent and tool registries - Performance monitoring and debugging capabilities</p> <p>The EnhancedRunner is designed as a drop-in replacement for ADK's Runner while providing significantly enhanced capabilities for YAML-driven systems.</p> <p>Examples:</p> <p>Basic usage (drop-in replacement): <pre><code>runner = EnhancedRunner(\n    app_name=\"my-system\",\n    agent=root_agent,\n    session_service=session_service,\n    artifact_service=artifact_service,\n    memory_service=memory_service\n)\n</code></pre></p> <p>With enhanced configuration: <pre><code>enhanced_config = EnhancedRunConfig.from_yaml_dict({\n    'max_llm_calls': 200,\n    'tool_timeouts': {'mcp_tools': 30.0},\n    'debug': {'enabled': True}\n})\n\nrunner = EnhancedRunner(\n    app_name=\"yaml-system\",\n    agent=root_agent,\n    session_service=session_service,\n    enhanced_config=enhanced_config,\n    yaml_context=YamlSystemContext(\n        system_name=\"my-system\",\n        config_path=\"/path/to/config.yaml\"\n    )\n)\n</code></pre></p> <p>With custom tool strategies: <pre><code>strategy_manager = ToolExecutionStrategyManager()\nstrategy_manager.register_strategy('mcp', McpToolExecutionStrategy(timeout=45.0))\n\nrunner = EnhancedRunner(\n    app_name=\"advanced-system\",\n    agent=root_agent,\n    session_service=session_service,\n    enhanced_config=enhanced_config,\n    tool_strategy_manager=strategy_manager\n)\n</code></pre></p>"},{"location":"reference/api/#google_adk_extras.runners.enhanced_runner.EnhancedRunner.performance_metrics","title":"<code>performance_metrics</code>  <code>property</code>","text":"<p>Get performance metrics as a property.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Performance metrics</p>"},{"location":"reference/api/#google_adk_extras.runners.enhanced_runner.EnhancedRunner.__init__","title":"<code>__init__(*, app_name, agent, plugins=None, artifact_service=None, session_service, memory_service=None, credential_service=None, enhanced_config=None, yaml_context=None, tool_strategy_manager=None, tool_registry=None, agent_registry=None, agent_registry_config=None, tool_registry_config=None)</code>","text":"<p>Initialize EnhancedRunner.</p> <p>Parameters:</p> Name Type Description Default <code>app_name</code> <code>str</code> <p>Application name</p> required <code>agent</code> <code>BaseAgent</code> <p>Root agent to run</p> required <code>plugins</code> <code>Optional[List[BasePlugin]]</code> <p>List of plugins</p> <code>None</code> <code>artifact_service</code> <code>Optional[BaseArtifactService]</code> <p>Artifact service</p> <code>None</code> <code>session_service</code> <code>BaseSessionService</code> <p>Session service</p> required <code>memory_service</code> <code>Optional[BaseMemoryService]</code> <p>Memory service</p> <code>None</code> <code>credential_service</code> <code>Optional[BaseCredentialService]</code> <p>Credential service</p> <code>None</code> <code>enhanced_config</code> <code>Optional[EnhancedRunConfig]</code> <p>Enhanced configuration (optional)</p> <code>None</code> <code>yaml_context</code> <code>Optional[YamlSystemContext]</code> <p>YAML system context (optional)</p> <code>None</code> <code>tool_strategy_manager</code> <code>Optional[ToolExecutionStrategyManager]</code> <p>Tool execution strategy manager (optional)</p> <code>None</code> <code>tool_registry</code> <code>Optional[EnhancedToolRegistry]</code> <p>Tool registry (for Phase 2)</p> <code>None</code> <code>agent_registry</code> <code>Optional[EnhancedAgentRegistry]</code> <p>Agent registry (for Phase 2)</p> <code>None</code>"},{"location":"reference/api/#google_adk_extras.runners.enhanced_runner.EnhancedRunner.__repr__","title":"<code>__repr__()</code>","text":"<p>String representation of enhanced runner.</p>"},{"location":"reference/api/#google_adk_extras.runners.enhanced_runner.EnhancedRunner.get_debug_info","title":"<code>get_debug_info()</code>","text":"<p>Get comprehensive debug information.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Debug information</p>"},{"location":"reference/api/#google_adk_extras.runners.enhanced_runner.EnhancedRunner.get_performance_metrics","title":"<code>get_performance_metrics()</code>","text":"<p>Get performance metrics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Performance metrics</p>"},{"location":"reference/api/#google_adk_extras.runners.enhanced_runner.EnhancedRunner.merge_config_from_yaml","title":"<code>merge_config_from_yaml(yaml_config)</code>","text":"<p>Merge additional YAML configuration.</p> <p>Parameters:</p> Name Type Description Default <code>yaml_config</code> <code>Dict[str, Any]</code> <p>YAML configuration to merge</p> required"},{"location":"reference/api/#google_adk_extras.runners.enhanced_runner.EnhancedRunner.reset_performance_metrics","title":"<code>reset_performance_metrics()</code>","text":"<p>Reset performance metrics.</p>"},{"location":"reference/api/#google_adk_extras.runners.enhanced_runner.EnhancedRunner.run_async","title":"<code>run_async(*, user_id, session_id, new_message, state_delta=None, run_config=None)</code>  <code>async</code>","text":"<p>Enhanced run_async with YAML system context and error handling.</p> <p>This method wraps ADK's run_async with enhanced error handling, performance monitoring, and YAML system context.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>User ID</p> required <code>session_id</code> <code>str</code> <p>Session ID  </p> required <code>new_message</code> <code>Content</code> <p>New message content</p> required <code>state_delta</code> <code>Optional[Dict[str, Any]]</code> <p>Optional state delta</p> <code>None</code> <code>run_config</code> <code>Optional[RunConfig]</code> <p>Optional run config (will be merged with enhanced config)</p> <code>None</code> <p>Yields:</p> Name Type Description <code>Event</code> <code>AsyncGenerator[Event, None]</code> <p>Events from agent execution</p> <p>Raises:</p> Type Description <code>YamlSystemError</code> <p>Enhanced error with YAML system context</p>"},{"location":"reference/api/#google_adk_extras.runners.enhanced_runner.EnhancedRunner.shutdown_registries","title":"<code>shutdown_registries()</code>  <code>async</code>","text":"<p>Shutdown the registries if they exist.</p>"},{"location":"reference/api/#google_adk_extras.runners.enhanced_runner.EnhancedRunner.startup_registries","title":"<code>startup_registries()</code>  <code>async</code>","text":"<p>Start up the registries if they exist.</p>"},{"location":"reference/api/#google_adk_extras.runners.enhanced_runner.EnhancedRunner.update_enhanced_config","title":"<code>update_enhanced_config(config)</code>","text":"<p>Update the enhanced configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>EnhancedRunConfig</code> <p>New enhanced configuration</p> required"},{"location":"reference/api/#google_adk_extras.runners.enhanced_runner.EnhancedRunner.update_yaml_context","title":"<code>update_yaml_context(context)</code>","text":"<p>Update the YAML system context.</p> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>YamlSystemContext</code> <p>New YAML system context</p> required"},{"location":"reference/api/#google_adk_extras.runners.config.A2AConfig","title":"<code>A2AConfig</code>  <code>dataclass</code>","text":"<p>Configuration for A2A remote agents.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.A2AConfig.circuit_breaker","title":"<code>circuit_breaker = field(default_factory=CircuitBreakerConfig)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Circuit breaker configuration for A2A calls.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.A2AConfig.connection_pool_size","title":"<code>connection_pool_size = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Connection pool size for A2A clients.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.A2AConfig.retry_config","title":"<code>retry_config = field(default_factory=RetryConfig)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Retry configuration for A2A calls.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.A2AConfig.timeout","title":"<code>timeout = 30.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Default timeout for A2A agent calls.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.CircuitBreakerConfig","title":"<code>CircuitBreakerConfig</code>  <code>dataclass</code>","text":"<p>Configuration for circuit breaker pattern.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.CircuitBreakerConfig.failure_threshold","title":"<code>failure_threshold = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of failures before opening circuit.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.CircuitBreakerConfig.recovery_timeout","title":"<code>recovery_timeout = 60.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Time to wait before attempting recovery.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.CircuitBreakerConfig.success_threshold","title":"<code>success_threshold = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of successes needed to close circuit from half-open.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.CircuitBreakerConfig.timeout","title":"<code>timeout = 30.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeout for individual requests.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.CircuitBreakerState","title":"<code>CircuitBreakerState</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Circuit breaker state options.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.DebugConfig","title":"<code>DebugConfig</code>  <code>dataclass</code>","text":"<p>Configuration for debugging and development features.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.DebugConfig.capture_exceptions","title":"<code>capture_exceptions = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to capture detailed exception information.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.DebugConfig.enabled","title":"<code>enabled = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether debug mode is enabled.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.DebugConfig.log_level","title":"<code>log_level = 'INFO'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Logging level for debug output.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.DebugConfig.performance_profiling","title":"<code>performance_profiling = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable performance profiling.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.DebugConfig.trace_agent_flow","title":"<code>trace_agent_flow = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to trace agent selection flow.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.DebugConfig.trace_tool_execution","title":"<code>trace_tool_execution = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to trace tool execution.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig","title":"<code>EnhancedRunConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Enhanced runtime configuration that extends ADK's RunConfig.</p> <p>This configuration class provides YAML-driven control over runner behavior beyond what ADK's basic RunConfig supports. It's designed to integrate seamlessly with agent-compose-kit's runtime configuration.</p> <p>Examples:</p> <p>From YAML runtime section: <pre><code>yaml_config = {\n    'streaming_mode': 'NONE',\n    'max_llm_calls': 200,\n    'tool_timeouts': {\n        'mcp_tools': 30.0,\n        'openapi_tools': 60.0\n    },\n    'retry_policies': {\n        'default': {'max_attempts': 3}\n    }\n}\n\nconfig = EnhancedRunConfig.from_yaml_dict(yaml_config)\n</code></pre></p> <p>Direct creation: <pre><code>config = EnhancedRunConfig(\n    base_config=RunConfig(max_llm_calls=200),\n    tool_timeouts=ToolTimeoutConfig(mcp_tools=45.0),\n    enable_circuit_breaker=True\n)\n</code></pre></p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.a2a_config","title":"<code>a2a_config = Field(default_factory=A2AConfig)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Configuration for A2A remote agents.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.base_config","title":"<code>base_config = Field(default_factory=RunConfig)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Underlying ADK RunConfig that this enhances.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.circuit_breaker_config","title":"<code>circuit_breaker_config = Field(default_factory=CircuitBreakerConfig)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Circuit breaker configuration.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.debug_config","title":"<code>debug_config = Field(default_factory=DebugConfig)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Debug and development configuration.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.enable_agent_registry","title":"<code>enable_agent_registry = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable agent registry integration.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.enable_circuit_breaker","title":"<code>enable_circuit_breaker = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable circuit breaker pattern for external services.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.enable_tool_registry","title":"<code>enable_tool_registry = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to enable tool registry integration.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.max_concurrent_tools","title":"<code>max_concurrent_tools = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maximum number of concurrent tool executions.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.retry_policies","title":"<code>retry_policies = Field(default_factory=(lambda: {'default': RetryConfig(), 'mcp_tools': RetryConfig(max_attempts=2, base_delay=0.5), 'openapi_tools': RetryConfig(max_attempts=3, base_delay=1.0)}))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Retry policies for different operation types.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.strict_mode","title":"<code>strict_mode = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to operate in strict mode (fail fast on configuration errors).</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.tool_execution_queue_size","title":"<code>tool_execution_queue_size = 100</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Size of the tool execution queue.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.tool_timeouts","title":"<code>tool_timeouts = Field(default_factory=ToolTimeoutConfig)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeout configuration for different tool types.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.validate_tool_configs","title":"<code>validate_tool_configs = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to validate tool configurations at startup.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.from_dict","title":"<code>from_dict(config_dict)</code>  <code>classmethod</code>","text":"<p>Create EnhancedRunConfig from dictionary configuration.</p> <p>This method provides the same functionality as from_yaml_dict but with a different name for clarity when used with dictionary sources.</p> <p>Parameters:</p> Name Type Description Default <code>config_dict</code> <code>Dict[str, Any]</code> <p>Dictionary configuration data</p> required <p>Returns:</p> Name Type Description <code>EnhancedRunConfig</code> <code>EnhancedRunConfig</code> <p>Configured instance</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.from_yaml_dict","title":"<code>from_yaml_dict(yaml_config)</code>  <code>classmethod</code>","text":"<p>Create EnhancedRunConfig from YAML runtime configuration.</p> <p>This method processes agent-compose-kit's runtime YAML sections and creates an appropriate enhanced configuration.</p> <p>Parameters:</p> Name Type Description Default <code>yaml_config</code> <code>Dict[str, Any]</code> <p>Dictionary from YAML runtime section</p> required <p>Returns:</p> Name Type Description <code>EnhancedRunConfig</code> <code>EnhancedRunConfig</code> <p>Configured instance</p> <p>Examples:</p> <pre><code>yaml_runtime = {\n    'streaming_mode': 'NONE',\n    'max_llm_calls': 200,\n    'tool_timeouts': {\n        'mcp_tools': 30.0,\n        'function_tools': 5.0\n    },\n    'retry_policies': {\n        'default': {'max_attempts': 3, 'base_delay': 1.0}\n    },\n    'debug': {'enabled': True, 'trace_agent_flow': True}\n}\n\nconfig = EnhancedRunConfig.from_yaml_dict(yaml_runtime)\n</code></pre>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.get_retry_config","title":"<code>get_retry_config(operation_type='default')</code>","text":"<p>Get retry configuration for an operation type.</p> <p>Parameters:</p> Name Type Description Default <code>operation_type</code> <code>str</code> <p>Type of operation (default, mcp_tools, openapi_tools, etc.)</p> <code>'default'</code> <p>Returns:</p> Name Type Description <code>RetryConfig</code> <code>RetryConfig</code> <p>Retry configuration</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.get_tool_timeout","title":"<code>get_tool_timeout(tool_name, tool_type='function')</code>","text":"<p>Get timeout for a specific tool.</p> <p>Parameters:</p> Name Type Description Default <code>tool_name</code> <code>str</code> <p>Name of the tool</p> required <code>tool_type</code> <code>str</code> <p>Type of tool (mcp, openapi, function)</p> <code>'function'</code> <p>Returns:</p> Name Type Description <code>float</code> <code>float</code> <p>Timeout in seconds</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.merge_with_yaml","title":"<code>merge_with_yaml(yaml_config)</code>","text":"<p>Merge this configuration with additional YAML configuration.</p> <p>Parameters:</p> Name Type Description Default <code>yaml_config</code> <code>Dict[str, Any]</code> <p>Additional YAML configuration to merge</p> required <p>Returns:</p> Name Type Description <code>EnhancedRunConfig</code> <code>EnhancedRunConfig</code> <p>New merged configuration</p>"},{"location":"reference/api/#google_adk_extras.runners.config.EnhancedRunConfig.to_base_run_config","title":"<code>to_base_run_config()</code>","text":"<p>Extract the base ADK RunConfig for compatibility.</p> <p>Returns:</p> Name Type Description <code>RunConfig</code> <code>RunConfig</code> <p>The underlying ADK RunConfig</p>"},{"location":"reference/api/#google_adk_extras.runners.config.RetryConfig","title":"<code>RetryConfig</code>  <code>dataclass</code>","text":"<p>Configuration for retry policies.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.RetryConfig.backoff_multiplier","title":"<code>backoff_multiplier = 2.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Multiplier for exponential backoff.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.RetryConfig.base_delay","title":"<code>base_delay = 1.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Base delay in seconds for retry strategies.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.RetryConfig.jitter","title":"<code>jitter = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to add random jitter to delays.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.RetryConfig.max_attempts","title":"<code>max_attempts = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maximum number of retry attempts.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.RetryConfig.max_delay","title":"<code>max_delay = 60.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maximum delay in seconds between retries.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.RetryConfig.strategy","title":"<code>strategy = RetryStrategy.EXPONENTIAL_BACKOFF</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Retry strategy to use.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.RetryStrategy","title":"<code>RetryStrategy</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Retry strategy options.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.ToolTimeoutConfig","title":"<code>ToolTimeoutConfig</code>  <code>dataclass</code>","text":"<p>Configuration for tool-specific timeouts.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.ToolTimeoutConfig.function_tools","title":"<code>function_tools = 10.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeout for Python function tools.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.ToolTimeoutConfig.mcp_connection_timeout","title":"<code>mcp_connection_timeout = 10.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeout for MCP server connections.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.ToolTimeoutConfig.mcp_tools","title":"<code>mcp_tools = 30.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeout for MCP toolset operations.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.ToolTimeoutConfig.openapi_connection_timeout","title":"<code>openapi_connection_timeout = 15.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeout for OpenAPI service connections.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.ToolTimeoutConfig.openapi_tools","title":"<code>openapi_tools = 60.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timeout for OpenAPI tool calls.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.ToolTimeoutConfig.tool_specific_timeouts","title":"<code>tool_specific_timeouts = field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Override timeouts for specific tool names.</p>"},{"location":"reference/api/#google_adk_extras.runners.config.ToolTimeoutConfig.get_timeout_for_tool","title":"<code>get_timeout_for_tool(tool_name, tool_type='function')</code>","text":"<p>Get timeout for a specific tool.</p>"},{"location":"reference/api/#google_adk_extras.runners.errors.ConfigurationError","title":"<code>ConfigurationError</code>","text":"<p>               Bases: <code>YamlSystemError</code></p> <p>Error for YAML configuration issues.</p> <p>This error is raised when there are problems with YAML configuration files, missing required fields, invalid values, etc.</p> <p>Examples:</p> <p>Missing required field: <pre><code>raise ConfigurationError(\n    \"Missing required field 'model' in agent configuration\",\n    context=context.with_agent(\"main_agent\"),\n    config_path=\"/path/to/config.yaml\",\n    config_section=\"agents[0]\",\n    suggested_fixes=[\n        \"Add 'model' field to agent configuration\",\n        \"Check example configurations for required fields\"\n    ]\n)\n</code></pre></p>"},{"location":"reference/api/#google_adk_extras.runners.errors.ConfigurationError.__init__","title":"<code>__init__(message, context, config_path=None, config_section=None, **kwargs)</code>","text":"<p>Initialize ConfigurationError.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The error message</p> required <code>context</code> <code>YamlSystemContext</code> <p>YAML system context</p> required <code>config_path</code> <code>Optional[Union[str, Path]]</code> <p>Path to the problematic config file</p> <code>None</code> <code>config_section</code> <code>Optional[str]</code> <p>Specific section of config with the error</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments for YamlSystemError</p> <code>{}</code>"},{"location":"reference/api/#google_adk_extras.runners.errors.RegistryError","title":"<code>RegistryError</code>","text":"<p>               Bases: <code>YamlSystemError</code></p> <p>Error for agent/tool registry issues.</p> <p>This error is raised when there are problems with agent or tool registries, such as missing agents, circular dependencies, etc.</p> <p>Examples:</p> <p>Missing agent in registry: <pre><code>raise RegistryError(\n    f\"Agent '{agent_name}' not found in registry\",\n    context=context,\n    registry_type=\"agent\",\n    missing_item=agent_name,\n    suggested_fixes=[\n        f\"Add agent '{agent_name}' to the system configuration\",\n        \"Check agent name spelling and case sensitivity\"\n    ]\n)\n</code></pre></p>"},{"location":"reference/api/#google_adk_extras.runners.errors.RegistryError.__init__","title":"<code>__init__(message, context, registry_type=None, missing_item=None, **kwargs)</code>","text":"<p>Initialize RegistryError.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The error message</p> required <code>context</code> <code>YamlSystemContext</code> <p>YAML system context</p> required <code>registry_type</code> <code>Optional[str]</code> <p>Type of registry (agent, tool)</p> <code>None</code> <code>missing_item</code> <code>Optional[str]</code> <p>Name of the missing item</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments for YamlSystemError</p> <code>{}</code>"},{"location":"reference/api/#google_adk_extras.runners.errors.ToolExecutionError","title":"<code>ToolExecutionError</code>","text":"<p>               Bases: <code>YamlSystemError</code></p> <p>Specific error for tool execution failures.</p> <p>This error provides additional context specific to tool execution, including tool type, execution time, and tool-specific debugging info.</p> <p>Examples:</p> <p>Tool timeout error: <pre><code>raise ToolExecutionError(\n    \"Tool execution timed out\",\n    context=context.with_tool(\"extract_data\"),\n    tool_type=\"mcp\",\n    execution_time=30.5,\n    timeout=30.0,\n    suggested_fixes=[\n        \"Increase tool timeout in configuration\",\n        \"Check if MCP server is responsive\"\n    ]\n)\n</code></pre></p>"},{"location":"reference/api/#google_adk_extras.runners.errors.ToolExecutionError.__init__","title":"<code>__init__(message, context, tool_type=None, execution_time=None, timeout=None, **kwargs)</code>","text":"<p>Initialize ToolExecutionError.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The error message</p> required <code>context</code> <code>YamlSystemContext</code> <p>YAML system context</p> required <code>tool_type</code> <code>Optional[str]</code> <p>Type of tool (mcp, openapi, function)</p> <code>None</code> <code>execution_time</code> <code>Optional[float]</code> <p>How long the tool ran before failing</p> <code>None</code> <code>timeout</code> <code>Optional[float]</code> <p>The configured timeout value</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments for YamlSystemError</p> <code>{}</code>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemContext","title":"<code>YamlSystemContext</code>  <code>dataclass</code>","text":"<p>Context information for YAML-driven agent systems.</p> <p>This class captures the current execution context within a YAML system, providing valuable debugging information when errors occur.</p> <p>Attributes:</p> Name Type Description <code>system_name</code> <code>str</code> <p>Name of the YAML system being executed</p> <code>config_path</code> <code>Optional[Union[str, Path]]</code> <p>Path to the YAML configuration file</p> <code>current_agent</code> <code>Optional[str]</code> <p>Name of the currently executing agent</p> <code>current_tool</code> <code>Optional[str]</code> <p>Name of the currently executing tool (if any)</p> <code>invocation_id</code> <code>Optional[str]</code> <p>Current invocation ID for tracing</p> <code>session_id</code> <code>Optional[str]</code> <p>Current session ID</p> <code>user_id</code> <code>Optional[str]</code> <p>Current user ID</p> <code>additional_context</code> <code>Dict[str, Any]</code> <p>Any additional context information</p> <p>Examples:</p> <p>Basic context: <pre><code>context = YamlSystemContext(\n    system_name=\"customer-support\",\n    config_path=\"/path/to/config.yaml\",\n    current_agent=\"main_agent\"\n)\n</code></pre></p> <p>Full context with tool execution: <pre><code>context = YamlSystemContext(\n    system_name=\"data-pipeline\",\n    config_path=\"/path/to/config.yaml\", \n    current_agent=\"processor_agent\",\n    current_tool=\"extract_data\",\n    invocation_id=\"inv_123\",\n    session_id=\"sess_456\",\n    user_id=\"user_789\"\n)\n</code></pre></p>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemContext.additional_context","title":"<code>additional_context = field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Additional context information.</p>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemContext.config_path","title":"<code>config_path = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Path to the YAML configuration file.</p>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemContext.current_agent","title":"<code>current_agent = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the currently executing agent.</p>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemContext.current_tool","title":"<code>current_tool = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of the currently executing tool.</p>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemContext.invocation_id","title":"<code>invocation_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Current invocation ID for tracing.</p>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemContext.session_id","title":"<code>session_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Current session ID.</p>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemContext.system_name","title":"<code>system_name</code>  <code>instance-attribute</code>","text":"<p>Name of the YAML system being executed.</p>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemContext.user_id","title":"<code>user_id = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Current user ID.</p>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemContext.add_context","title":"<code>add_context(key, value)</code>","text":"<p>Add additional context information.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Context key</p> required <code>value</code> <code>Any</code> <p>Context value</p> required <p>Returns:</p> Name Type Description <code>YamlSystemContext</code> <code>YamlSystemContext</code> <p>New context with additional information</p>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemContext.get_location_string","title":"<code>get_location_string()</code>","text":"<p>Get a human-readable location string.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Location string for debugging</p>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemContext.with_agent","title":"<code>with_agent(agent_name)</code>","text":"<p>Create a new context with the specified agent.</p> <p>Parameters:</p> Name Type Description Default <code>agent_name</code> <code>str</code> <p>Name of the agent</p> required <p>Returns:</p> Name Type Description <code>YamlSystemContext</code> <code>YamlSystemContext</code> <p>New context with updated agent</p>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemContext.with_invocation","title":"<code>with_invocation(invocation_id, session_id, user_id)</code>","text":"<p>Create a new context with invocation details.</p> <p>Parameters:</p> Name Type Description Default <code>invocation_id</code> <code>str</code> <p>Invocation ID</p> required <code>session_id</code> <code>str</code> <p>Session ID  </p> required <code>user_id</code> <code>str</code> <p>User ID</p> required <p>Returns:</p> Name Type Description <code>YamlSystemContext</code> <code>YamlSystemContext</code> <p>New context with updated invocation details</p>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemContext.with_tool","title":"<code>with_tool(tool_name)</code>","text":"<p>Create a new context with the specified tool.</p> <p>Parameters:</p> Name Type Description Default <code>tool_name</code> <code>str</code> <p>Name of the tool</p> required <p>Returns:</p> Name Type Description <code>YamlSystemContext</code> <code>YamlSystemContext</code> <p>New context with updated tool</p>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemError","title":"<code>YamlSystemError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Enhanced error with YAML system context.</p> <p>This exception class provides rich context about errors that occur within YAML-driven agent systems, making debugging much easier.</p> <p>Attributes:</p> Name Type Description <code>message</code> <p>The error message</p> <code>context</code> <p>YAML system context where the error occurred</p> <code>original_error</code> <p>The original exception that was wrapped (if any)</p> <code>error_code</code> <p>Optional error code for categorization</p> <code>suggested_fixes</code> <p>List of suggested fixes for the error</p> <p>Examples:</p> <p>Basic error with context: <pre><code>raise YamlSystemError(\n    \"Tool execution failed\",\n    context=YamlSystemContext(\n        system_name=\"my-system\",\n        current_agent=\"processor\",\n        current_tool=\"extract_data\"\n    )\n)\n</code></pre></p> <p>Wrapping an original error: <pre><code>try:\n    # Some operation that fails\n    pass\nexcept Exception as e:\n    raise YamlSystemError(\n        \"Configuration validation failed\",\n        context=context,\n        original_error=e,\n        suggested_fixes=[\n            \"Check YAML syntax in config file\",\n            \"Verify all required fields are present\"\n        ]\n    )\n</code></pre></p>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemError.__init__","title":"<code>__init__(message, context, original_error=None, error_code=None, suggested_fixes=None)</code>","text":"<p>Initialize YamlSystemError.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The error message</p> required <code>context</code> <code>YamlSystemContext</code> <p>YAML system context</p> required <code>original_error</code> <code>Optional[Exception]</code> <p>Original exception that was wrapped</p> <code>None</code> <code>error_code</code> <code>Optional[str]</code> <p>Optional error code</p> <code>None</code> <code>suggested_fixes</code> <code>Optional[List[str]]</code> <p>List of suggested fixes</p> <code>None</code>"},{"location":"reference/api/#google_adk_extras.runners.errors.YamlSystemError.get_debug_info","title":"<code>get_debug_info()</code>","text":"<p>Get comprehensive debug information.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Debug information dictionary</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.CircuitBreaker","title":"<code>CircuitBreaker</code>","text":"<p>Circuit breaker implementation for tool execution.</p> <p>Implements the circuit breaker pattern to prevent cascading failures when external services (like MCP servers or APIs) are failing.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.CircuitBreaker.__init__","title":"<code>__init__(config)</code>","text":"<p>Initialize circuit breaker.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>CircuitBreakerConfig</code> <p>Circuit breaker configuration</p> required"},{"location":"reference/api/#google_adk_extras.runners.strategies.CircuitBreaker.call","title":"<code>call(func, *args, **kwargs)</code>  <code>async</code>","text":"<p>Execute a function through the circuit breaker.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <p>Function to execute</p> required <code>*args</code> <p>Function arguments</p> <code>()</code> <code>**kwargs</code> <p>Function keyword arguments</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <p>Function result</p> <p>Raises:</p> Type Description <code>ToolExecutionError</code> <p>If circuit breaker is open or function fails</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.CircuitBreaker.can_execute","title":"<code>can_execute()</code>","text":"<p>Check if circuit breaker allows execution.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if execution is allowed, False if circuit is open</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.CircuitBreaker.record_failure","title":"<code>record_failure()</code>","text":"<p>Record a failed execution.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.CircuitBreaker.record_success","title":"<code>record_success()</code>","text":"<p>Record a successful execution.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.DefaultToolExecutionStrategy","title":"<code>DefaultToolExecutionStrategy</code>","text":"<p>               Bases: <code>ToolExecutionStrategy</code></p> <p>Default tool execution strategy with basic timeout and retry support.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.DefaultToolExecutionStrategy.__init__","title":"<code>__init__(timeout=30.0, retry_config=None, circuit_breaker_config=None)</code>","text":"<p>Initialize default strategy.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>Execution timeout in seconds</p> <code>30.0</code> <code>retry_config</code> <code>Optional[RetryConfig]</code> <p>Retry configuration</p> <code>None</code> <code>circuit_breaker_config</code> <code>Optional[CircuitBreakerConfig]</code> <p>Circuit breaker configuration</p> <code>None</code>"},{"location":"reference/api/#google_adk_extras.runners.strategies.DefaultToolExecutionStrategy.execute_tool","title":"<code>execute_tool(tool, context, yaml_context, tool_config=None)</code>  <code>async</code>","text":"<p>Execute tool with default strategy.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.DefaultToolExecutionStrategy.get_tool_type","title":"<code>get_tool_type()</code>","text":"<p>Get tool type.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.FunctionToolExecutionStrategy","title":"<code>FunctionToolExecutionStrategy</code>","text":"<p>               Bases: <code>DefaultToolExecutionStrategy</code></p> <p>Execution strategy optimized for Python function tools.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.FunctionToolExecutionStrategy.__init__","title":"<code>__init__(timeout=10.0, retry_config=None, circuit_breaker_config=None)</code>","text":"<p>Initialize function tool strategy.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>Function execution timeout</p> <code>10.0</code> <code>retry_config</code> <code>Optional[RetryConfig]</code> <p>Retry configuration (minimal for functions)</p> <code>None</code> <code>circuit_breaker_config</code> <code>Optional[CircuitBreakerConfig]</code> <p>Circuit breaker configuration</p> <code>None</code>"},{"location":"reference/api/#google_adk_extras.runners.strategies.FunctionToolExecutionStrategy.execute_tool","title":"<code>execute_tool(tool, context, yaml_context, tool_config=None)</code>  <code>async</code>","text":"<p>Execute function tool with specialized handling.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.FunctionToolExecutionStrategy.get_tool_type","title":"<code>get_tool_type()</code>","text":"<p>Get tool type.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.McpToolExecutionStrategy","title":"<code>McpToolExecutionStrategy</code>","text":"<p>               Bases: <code>DefaultToolExecutionStrategy</code></p> <p>Execution strategy optimized for MCP (Model Context Protocol) tools.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.McpToolExecutionStrategy.__init__","title":"<code>__init__(timeout=30.0, connection_timeout=10.0, retry_config=None, circuit_breaker_config=None)</code>","text":"<p>Initialize MCP strategy.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>Tool execution timeout</p> <code>30.0</code> <code>connection_timeout</code> <code>float</code> <p>MCP server connection timeout</p> <code>10.0</code> <code>retry_config</code> <code>Optional[RetryConfig]</code> <p>Retry configuration (optimized for MCP)</p> <code>None</code> <code>circuit_breaker_config</code> <code>Optional[CircuitBreakerConfig]</code> <p>Circuit breaker configuration</p> <code>None</code>"},{"location":"reference/api/#google_adk_extras.runners.strategies.McpToolExecutionStrategy.execute_tool","title":"<code>execute_tool(tool, context, yaml_context, tool_config=None)</code>  <code>async</code>","text":"<p>Execute MCP tool with specialized handling.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.McpToolExecutionStrategy.get_tool_type","title":"<code>get_tool_type()</code>","text":"<p>Get tool type.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.OpenApiToolExecutionStrategy","title":"<code>OpenApiToolExecutionStrategy</code>","text":"<p>               Bases: <code>DefaultToolExecutionStrategy</code></p> <p>Execution strategy optimized for OpenAPI/REST API tools.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.OpenApiToolExecutionStrategy.__init__","title":"<code>__init__(timeout=60.0, connection_timeout=15.0, retry_config=None, circuit_breaker_config=None)</code>","text":"<p>Initialize OpenAPI strategy.</p> <p>Parameters:</p> Name Type Description Default <code>timeout</code> <code>float</code> <p>API call timeout</p> <code>60.0</code> <code>connection_timeout</code> <code>float</code> <p>HTTP connection timeout</p> <code>15.0</code> <code>retry_config</code> <code>Optional[RetryConfig]</code> <p>Retry configuration (optimized for HTTP)</p> <code>None</code> <code>circuit_breaker_config</code> <code>Optional[CircuitBreakerConfig]</code> <p>Circuit breaker configuration</p> <code>None</code>"},{"location":"reference/api/#google_adk_extras.runners.strategies.OpenApiToolExecutionStrategy.execute_tool","title":"<code>execute_tool(tool, context, yaml_context, tool_config=None)</code>  <code>async</code>","text":"<p>Execute OpenAPI tool with specialized handling.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.OpenApiToolExecutionStrategy.get_tool_type","title":"<code>get_tool_type()</code>","text":"<p>Get tool type.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.RetryExecutor","title":"<code>RetryExecutor</code>","text":"<p>Retry executor with configurable retry strategies.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.RetryExecutor.__init__","title":"<code>__init__(config)</code>","text":"<p>Initialize retry executor.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>RetryConfig</code> <p>Retry configuration</p> required"},{"location":"reference/api/#google_adk_extras.runners.strategies.RetryExecutor.execute","title":"<code>execute(func)</code>  <code>async</code>","text":"<p>Simple execute method for testing without context.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <p>Function to execute with retry logic</p> required <p>Returns:</p> Name Type Description <code>Any</code> <p>Function result</p> <p>Raises:</p> Type Description <code>Exception</code> <p>The last exception if all retries fail</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.RetryExecutor.execute_with_retry","title":"<code>execute_with_retry(func, context, *args, **kwargs)</code>  <code>async</code>","text":"<p>Execute function with retry logic.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <p>Function to execute</p> required <code>context</code> <code>YamlSystemContext</code> <p>YAML system context</p> required <code>*args</code> <p>Function arguments</p> <code>()</code> <code>**kwargs</code> <p>Function keyword arguments</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <p>Function result</p> <p>Raises:</p> Type Description <code>ToolExecutionError</code> <p>If all retry attempts fail</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.ToolExecutionStrategy","title":"<code>ToolExecutionStrategy</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for tool execution strategies.</p> <p>Tool execution strategies define how different types of tools should be executed, with support for timeouts, retries, circuit breakers, and error handling.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.ToolExecutionStrategy.execute_tool","title":"<code>execute_tool(tool, context, yaml_context, tool_config=None)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Execute a tool with the strategy's configuration.</p> <p>Parameters:</p> Name Type Description Default <code>tool</code> <code>Any</code> <p>The tool to execute</p> required <code>context</code> <code>InvocationContext</code> <p>ADK invocation context</p> required <code>yaml_context</code> <code>YamlSystemContext</code> <p>YAML system context</p> required <code>tool_config</code> <code>Optional[Dict[str, Any]]</code> <p>Tool-specific configuration</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Tool execution result</p> <p>Raises:</p> Type Description <code>ToolExecutionError</code> <p>If tool execution fails</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.ToolExecutionStrategy.get_tool_type","title":"<code>get_tool_type()</code>  <code>abstractmethod</code>","text":"<p>Get the tool type this strategy handles.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Tool type identifier</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.ToolExecutionStrategyManager","title":"<code>ToolExecutionStrategyManager</code>","text":"<p>Manager for different tool execution strategies.</p> <p>This class manages multiple execution strategies and routes tool executions to the appropriate strategy based on tool type.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.ToolExecutionStrategyManager.__init__","title":"<code>__init__()</code>","text":"<p>Initialize strategy manager.</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.ToolExecutionStrategyManager.detect_tool_type","title":"<code>detect_tool_type(tool)</code>","text":"<p>Detect tool type from tool object.</p> <p>Parameters:</p> Name Type Description Default <code>tool</code> <code>Any</code> <p>Tool object to inspect</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Detected tool type</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.ToolExecutionStrategyManager.execute_tool","title":"<code>execute_tool(tool, context, yaml_context, tool_config=None)</code>  <code>async</code>","text":"<p>Execute tool using appropriate strategy.</p> <p>Parameters:</p> Name Type Description Default <code>tool</code> <code>Any</code> <p>Tool to execute</p> required <code>context</code> <code>InvocationContext</code> <p>ADK invocation context</p> required <code>yaml_context</code> <code>YamlSystemContext</code> <p>YAML system context</p> required <code>tool_config</code> <code>Optional[Dict[str, Any]]</code> <p>Tool-specific configuration</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Tool execution result</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.ToolExecutionStrategyManager.get_strategy","title":"<code>get_strategy(tool_type)</code>","text":"<p>Get strategy for a tool type.</p> <p>Parameters:</p> Name Type Description Default <code>tool_type</code> <code>str</code> <p>Tool type identifier</p> required <p>Returns:</p> Name Type Description <code>ToolExecutionStrategy</code> <code>ToolExecutionStrategy</code> <p>Appropriate strategy</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If no strategy found and no default set</p>"},{"location":"reference/api/#google_adk_extras.runners.strategies.ToolExecutionStrategyManager.register_strategy","title":"<code>register_strategy(tool_type, strategy)</code>","text":"<p>Register a strategy for a tool type.</p> <p>Parameters:</p> Name Type Description Default <code>tool_type</code> <code>str</code> <p>Tool type identifier</p> required <code>strategy</code> <code>ToolExecutionStrategy</code> <p>Execution strategy</p> required"},{"location":"reference/api/#google_adk_extras.runners.strategies.ToolExecutionStrategyManager.set_default_strategy","title":"<code>set_default_strategy(strategy)</code>","text":"<p>Set default strategy for unknown tool types.</p> <p>Parameters:</p> Name Type Description Default <code>strategy</code> <code>ToolExecutionStrategy</code> <p>Default execution strategy</p> required"},{"location":"reference/api/#registries","title":"Registries","text":"<p>Enhanced Registry Base Infrastructure.</p> <p>This module provides the foundation for all enhanced registries with event system, health monitoring, caching, and lifecycle management.</p> <p>Registry Configuration System.</p> <p>This module provides comprehensive configuration for enhanced registries with validation, hot-reloading capabilities, and integration with existing EnhancedRunConfig patterns.</p> <p>Enhanced Agent Registry with hot-swapping and dynamic loading.</p> <p>This module extends the existing CustomAgentLoader with advanced features: - Event system for agent registration/unregistration - Health monitoring for registered agents - Caching layer for better performance - Hot-swapping capabilities with validation - Integration with enhanced agent composition engine</p> <p>Enhanced Tool Registry with strategy integration and dynamic loading.</p> <p>This module extends the existing ToolExecutionStrategyManager with advanced features: - Dynamic tool registration beyond just execution strategies - Event system for tool registration/unregistration - Health monitoring for tools and strategies - Caching layer for better performance - Integration with existing strategy management</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.EnhancedRegistryBase","title":"<code>EnhancedRegistryBase</code>","text":"<p>               Bases: <code>ABC</code>, <code>Generic[T]</code></p> <p>Enhanced base class for all registries.</p> <p>Provides common functionality: - Event system for registry changes - Health monitoring for registered items - Caching layer for performance - Lifecycle management</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.EnhancedRegistryBase.__init__","title":"<code>__init__(name, cache_ttl=300.0, health_check_interval=60.0, enable_events=True, enable_caching=True, enable_health_monitoring=True)</code>","text":"<p>Initialize enhanced registry base.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Registry name for identification</p> required <code>cache_ttl</code> <code>float</code> <p>Cache time-to-live in seconds</p> <code>300.0</code> <code>health_check_interval</code> <code>float</code> <p>Health check interval in seconds</p> <code>60.0</code> <code>enable_events</code> <code>bool</code> <p>Whether to enable event system</p> <code>True</code> <code>enable_caching</code> <code>bool</code> <p>Whether to enable caching</p> <code>True</code> <code>enable_health_monitoring</code> <code>bool</code> <p>Whether to enable health monitoring</p> <code>True</code>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.EnhancedRegistryBase.__repr__","title":"<code>__repr__()</code>","text":"<p>String representation of registry.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.EnhancedRegistryBase.add_event_listener","title":"<code>add_event_listener(listener)</code>","text":"<p>Add event listener for registry events.</p> <p>Parameters:</p> Name Type Description Default <code>listener</code> <code>Callable[[RegistryEvent], None]</code> <p>Callable that will receive RegistryEvent objects</p> required"},{"location":"reference/api/#google_adk_extras.runners.registry.base.EnhancedRegistryBase.get_all_health_info","title":"<code>get_all_health_info()</code>","text":"<p>Get health information for all items.</p> <p>Returns:</p> Type Description <code>Dict[str, RegistryHealth]</code> <p>Dict[str, RegistryHealth]: Mapping of item names to health info</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.EnhancedRegistryBase.get_health_info","title":"<code>get_health_info(item_name)</code>","text":"<p>Get health information for an item.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>Name of item to get health info for</p> required <p>Returns:</p> Name Type Description <code>RegistryHealth</code> <code>Optional[RegistryHealth]</code> <p>Health information or None if not found</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.EnhancedRegistryBase.get_registry_stats","title":"<code>get_registry_stats()</code>","text":"<p>Get registry statistics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Registry statistics</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.EnhancedRegistryBase.remove_event_listener","title":"<code>remove_event_listener(listener)</code>","text":"<p>Remove event listener.</p> <p>Parameters:</p> Name Type Description Default <code>listener</code> <code>Callable[[RegistryEvent], None]</code> <p>Listener to remove</p> required"},{"location":"reference/api/#google_adk_extras.runners.registry.base.EnhancedRegistryBase.shutdown","title":"<code>shutdown()</code>  <code>async</code>","text":"<p>Shutdown the registry and cleanup resources.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.EnhancedRegistryBase.startup","title":"<code>startup()</code>  <code>async</code>","text":"<p>Start the registry and background tasks.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.EnhancedRegistryBase.update_health_status","title":"<code>update_health_status(item_name, status, details=None)</code>","text":"<p>Update health status for an item.</p> <p>Parameters:</p> Name Type Description Default <code>item_name</code> <code>str</code> <p>Name of item to update</p> required <code>status</code> <code>RegistryHealthStatus</code> <p>New health status</p> required <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional details</p> <code>None</code>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryCache","title":"<code>RegistryCache</code>","text":"<p>               Bases: <code>Generic[T]</code></p> <p>Thread-safe cache for registry items with TTL support.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryCache.__init__","title":"<code>__init__(default_ttl=300.0)</code>","text":"<p>Initialize registry cache.</p> <p>Parameters:</p> Name Type Description Default <code>default_ttl</code> <code>float</code> <p>Default time-to-live in seconds</p> <code>300.0</code>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryCache.cleanup_expired","title":"<code>cleanup_expired()</code>","text":"<p>Remove expired items from cache.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>Number of expired items removed</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryCache.clear","title":"<code>clear()</code>","text":"<p>Clear all cached items.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryCache.get","title":"<code>get(key)</code>","text":"<p>Get item from cache if not expired.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key</p> required <p>Returns:</p> Name Type Description <code>T</code> <code>Optional[T]</code> <p>Cached item or None if not found/expired</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryCache.put","title":"<code>put(key, item, ttl=None)</code>","text":"<p>Put item in cache with TTL.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key</p> required <code>item</code> <code>T</code> <p>Item to cache</p> required <code>ttl</code> <code>Optional[float]</code> <p>Time-to-live in seconds (uses default if None)</p> <code>None</code>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryCache.remove","title":"<code>remove(key)</code>","text":"<p>Remove item from cache.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Cache key to remove</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if item was found and removed</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryCache.size","title":"<code>size()</code>","text":"<p>Get current cache size.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryEvent","title":"<code>RegistryEvent</code>  <code>dataclass</code>","text":"<p>Registry event data.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryEvent.event_type","title":"<code>event_type</code>  <code>instance-attribute</code>","text":"<p>Type of registry event.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryEvent.item","title":"<code>item = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>The item itself (for registration/update events).</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryEvent.item_name","title":"<code>item_name</code>  <code>instance-attribute</code>","text":"<p>Name of the item involved in the event.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryEvent.metadata","title":"<code>metadata = field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Additional event metadata.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryEvent.registry_name","title":"<code>registry_name</code>  <code>instance-attribute</code>","text":"<p>Name of the registry that generated the event.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryEvent.timestamp","title":"<code>timestamp = field(default_factory=(time.time))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timestamp when event occurred.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryEventType","title":"<code>RegistryEventType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Registry event types.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryHealth","title":"<code>RegistryHealth</code>  <code>dataclass</code>","text":"<p>Health information for a registry item.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryHealth.details","title":"<code>details = field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Additional health details.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryHealth.failure_count","title":"<code>failure_count = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of consecutive failures.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryHealth.item_name","title":"<code>item_name</code>  <code>instance-attribute</code>","text":"<p>Name of the item.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryHealth.last_checked","title":"<code>last_checked = field(default_factory=(time.time))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timestamp of last health check.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryHealth.last_healthy","title":"<code>last_healthy = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Timestamp of last healthy status.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryHealth.status","title":"<code>status = RegistryHealthStatus.UNKNOWN</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Current health status.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryHealth.is_healthy","title":"<code>is_healthy()</code>","text":"<p>Check if item is currently healthy.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryHealth.is_stale","title":"<code>is_stale(max_age_seconds=300.0)</code>","text":"<p>Check if health information is stale.</p> <p>Parameters:</p> Name Type Description Default <code>max_age_seconds</code> <code>float</code> <p>Maximum age in seconds before health is considered stale</p> <code>300.0</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if health information is stale</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryHealth.update_status","title":"<code>update_status(status, details=None)</code>","text":"<p>Update health status.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>RegistryHealthStatus</code> <p>New health status</p> required <code>details</code> <code>Optional[Dict[str, Any]]</code> <p>Optional additional details</p> <code>None</code>"},{"location":"reference/api/#google_adk_extras.runners.registry.base.RegistryHealthStatus","title":"<code>RegistryHealthStatus</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Health status for registry items.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.AgentRegistryConfig","title":"<code>AgentRegistryConfig</code>","text":"<p>               Bases: <code>RegistryConfig</code></p> <p>Configuration for enhanced agent registry.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.AgentRegistryConfig.validate_allowed_agent_types","title":"<code>validate_allowed_agent_types(v)</code>","text":"<p>Validate allowed agent types.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.AgentRegistryConfig.validate_max_agents","title":"<code>validate_max_agents(v)</code>","text":"<p>Validate max agents setting.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryCacheConfig","title":"<code>RegistryCacheConfig</code>  <code>dataclass</code>","text":"<p>Configuration for registry caching.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryCacheConfig.cleanup_interval","title":"<code>cleanup_interval = 60.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Interval in seconds to clean up expired cache entries.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryCacheConfig.default_ttl","title":"<code>default_ttl = 300.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Default time-to-live in seconds for cached items.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryCacheConfig.enabled","title":"<code>enabled = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether caching is enabled.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryCacheConfig.max_size","title":"<code>max_size = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maximum number of items to cache (None = unlimited).</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryConfig","title":"<code>RegistryConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base configuration for enhanced registries.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryConfig.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create config from dictionary.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryConfig.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert config to dictionary.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryConfig.validate_name","title":"<code>validate_name(v)</code>","text":"<p>Validate registry name.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryConfig.validate_shutdown_timeout","title":"<code>validate_shutdown_timeout(v)</code>","text":"<p>Validate shutdown timeout.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryEventConfig","title":"<code>RegistryEventConfig</code>  <code>dataclass</code>","text":"<p>Configuration for registry event system.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryEventConfig.async_delivery","title":"<code>async_delivery = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to deliver events asynchronously.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryEventConfig.enabled","title":"<code>enabled = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether event system is enabled.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryEventConfig.max_listeners","title":"<code>max_listeners = 100</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maximum number of event listeners per registry.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryHealthConfig","title":"<code>RegistryHealthConfig</code>  <code>dataclass</code>","text":"<p>Configuration for registry health monitoring.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryHealthConfig.check_interval","title":"<code>check_interval = 60.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Health check interval in seconds.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryHealthConfig.enabled","title":"<code>enabled = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether health monitoring is enabled.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryHealthConfig.failure_threshold","title":"<code>failure_threshold = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of consecutive failures before marking as unhealthy.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryHealthConfig.recovery_threshold","title":"<code>recovery_threshold = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Number of consecutive successes needed to mark as healthy again.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.RegistryHealthConfig.stale_threshold","title":"<code>stale_threshold = 300.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Time in seconds after which health info is considered stale.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.ToolRegistryConfig","title":"<code>ToolRegistryConfig</code>","text":"<p>               Bases: <code>RegistryConfig</code></p> <p>Configuration for enhanced tool registry.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.ToolRegistryConfig.validate_allowed_tool_types","title":"<code>validate_allowed_tool_types(v)</code>","text":"<p>Validate allowed tool types.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.ToolRegistryConfig.validate_default_timeout","title":"<code>validate_default_timeout(v)</code>","text":"<p>Validate default timeout.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.ToolRegistryConfig.validate_max_concurrent_executions","title":"<code>validate_max_concurrent_executions(v)</code>","text":"<p>Validate max concurrent executions.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.ToolRegistryConfig.validate_max_tools","title":"<code>validate_max_tools(v)</code>","text":"<p>Validate max tools setting.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.create_default_agent_registry_config","title":"<code>create_default_agent_registry_config(name='default_agent_registry')</code>","text":"<p>Create a default agent registry configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Registry name</p> <code>'default_agent_registry'</code> <p>Returns:</p> Name Type Description <code>AgentRegistryConfig</code> <code>AgentRegistryConfig</code> <p>Default configuration</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.create_default_tool_registry_config","title":"<code>create_default_tool_registry_config(name='default_tool_registry')</code>","text":"<p>Create a default tool registry configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Registry name</p> <code>'default_tool_registry'</code> <p>Returns:</p> Name Type Description <code>ToolRegistryConfig</code> <code>ToolRegistryConfig</code> <p>Default configuration</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.create_production_registry_config","title":"<code>create_production_registry_config(name, registry_type='agent', enable_caching=True, enable_health_monitoring=True, enable_events=True)</code>","text":"<p>Create a production-ready registry configuration.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Registry name</p> required <code>registry_type</code> <code>str</code> <p>Type of registry (\"agent\" or \"tool\")</p> <code>'agent'</code> <code>enable_caching</code> <code>bool</code> <p>Whether to enable caching</p> <code>True</code> <code>enable_health_monitoring</code> <code>bool</code> <p>Whether to enable health monitoring</p> <code>True</code> <code>enable_events</code> <code>bool</code> <p>Whether to enable event system</p> <code>True</code> <p>Returns:</p> Name Type Description <code>RegistryConfig</code> <code>RegistryConfig</code> <p>Production configuration</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.merge_registry_configs","title":"<code>merge_registry_configs(base, override)</code>","text":"<p>Merge registry configuration with overrides.</p> <p>Parameters:</p> Name Type Description Default <code>base</code> <code>RegistryConfig</code> <p>Base configuration</p> required <code>override</code> <code>Dict[str, Any]</code> <p>Configuration overrides</p> required <p>Returns:</p> Name Type Description <code>RegistryConfig</code> <code>RegistryConfig</code> <p>Merged configuration</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.config.validate_registry_config","title":"<code>validate_registry_config(config, registry_type='base')</code>","text":"<p>Validate and create registry configuration from dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Dict[str, Any]</code> <p>Configuration dictionary</p> required <code>registry_type</code> <code>str</code> <p>Type of registry (\"base\", \"agent\", or \"tool\")</p> <code>'base'</code> <p>Returns:</p> Name Type Description <code>RegistryConfig</code> <code>RegistryConfig</code> <p>Validated configuration</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If configuration is invalid</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.AgentHealthStatus","title":"<code>AgentHealthStatus</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Agent-specific health status.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.AgentRegistrationEvent","title":"<code>AgentRegistrationEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>RegistryEvent</code></p> <p>Agent-specific registration event.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.AgentRegistrationEvent.agent_type","title":"<code>agent_type = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type of the agent.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.AgentRegistrationEvent.agent_version","title":"<code>agent_version = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Version of the agent if available.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.AgentRegistrationEvent.replaced_agent","title":"<code>replaced_agent = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Previously registered agent if this was a replacement.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.EnhancedAgentRegistry","title":"<code>EnhancedAgentRegistry</code>","text":"<p>               Bases: <code>CustomAgentLoader</code>, <code>EnhancedRegistryBase[BaseAgent]</code></p> <p>Enhanced agent registry with advanced features.</p> <p>This registry extends CustomAgentLoader with: - Event system for registration/unregistration notifications - Health monitoring for agents - Caching for improved performance - Hot-swapping with validation - Integration with YAML system context for error reporting</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.EnhancedAgentRegistry.__init__","title":"<code>__init__(config=None, yaml_context=None)</code>","text":"<p>Initialize enhanced agent registry.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Optional[AgentRegistryConfig]</code> <p>Agent registry configuration</p> <code>None</code> <code>yaml_context</code> <code>Optional[YamlSystemContext]</code> <p>YAML system context for error reporting</p> <code>None</code>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.EnhancedAgentRegistry.__repr__","title":"<code>__repr__()</code>","text":"<p>String representation of the registry.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.EnhancedAgentRegistry.add_agent_validator","title":"<code>add_agent_validator(validator)</code>","text":"<p>Add custom agent validator.</p> <p>Parameters:</p> Name Type Description Default <code>validator</code> <code>Callable[[str, BaseAgent], bool]</code> <p>Function that takes (name, agent) and returns bool</p> required"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.EnhancedAgentRegistry.find_agents_by_metadata","title":"<code>find_agents_by_metadata(**metadata_filters)</code>","text":"<p>Find agents by metadata filters.</p> <p>Parameters:</p> Name Type Description Default <code>**metadata_filters</code> <p>Key-value pairs to match in agent metadata</p> <code>{}</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: Names of agents matching all filters</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.EnhancedAgentRegistry.find_agents_by_type","title":"<code>find_agents_by_type(agent_type)</code>","text":"<p>Find agents by their type.</p> <p>Parameters:</p> Name Type Description Default <code>agent_type</code> <code>str</code> <p>Agent type name to search for</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: Names of agents with matching type</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.EnhancedAgentRegistry.get_agent_metadata","title":"<code>get_agent_metadata(name)</code>","text":"<p>Get metadata for a registered agent.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Agent name</p> required <p>Returns:</p> Type Description <code>Optional[Dict[str, Any]]</code> <p>Dict[str, Any]: Agent metadata or None if not found</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.EnhancedAgentRegistry.get_all_agent_metadata","title":"<code>get_all_agent_metadata()</code>","text":"<p>Get metadata for all registered agents.</p> <p>Returns:</p> Type Description <code>Dict[str, Dict[str, Any]]</code> <p>Dict[str, Dict[str, Any]]: Mapping of agent names to metadata</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.EnhancedAgentRegistry.get_registry_stats","title":"<code>get_registry_stats()</code>","text":"<p>Get enhanced agent registry statistics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Registry statistics</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.EnhancedAgentRegistry.load_agent","title":"<code>load_agent(name)</code>","text":"<p>Load agent with caching support.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Agent name to load</p> required <p>Returns:</p> Name Type Description <code>BaseAgent</code> <code>BaseAgent</code> <p>The loaded agent</p> <p>Raises:</p> Type Description <code>YamlSystemError</code> <p>If agent not found</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.EnhancedAgentRegistry.register_agent","title":"<code>register_agent(name, agent, metadata=None)</code>","text":"<p>Register an agent with enhanced features.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Agent name</p> required <code>agent</code> <code>BaseAgent</code> <p>BaseAgent instance</p> required <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Optional metadata about the agent</p> <code>None</code> <p>Raises:</p> Type Description <code>YamlSystemError</code> <p>If registration fails validation</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.EnhancedAgentRegistry.remove_agent_validator","title":"<code>remove_agent_validator(validator)</code>","text":"<p>Remove custom agent validator.</p> <p>Parameters:</p> Name Type Description Default <code>validator</code> <code>Callable[[str, BaseAgent], bool]</code> <p>Validator function to remove</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if validator was found and removed</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.EnhancedAgentRegistry.unregister_agent","title":"<code>unregister_agent(name)</code>","text":"<p>Unregister an agent with cleanup.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of agent to unregister</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if agent was found and removed</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.agent_registry.EnhancedAgentRegistry.validate_all_agents","title":"<code>validate_all_agents()</code>","text":"<p>Validate all registered agents.</p> <p>Returns:</p> Type Description <code>Dict[str, bool]</code> <p>Dict[str, bool]: Mapping of agent names to validation results</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry","title":"<code>EnhancedToolRegistry</code>","text":"<p>               Bases: <code>ToolExecutionStrategyManager</code>, <code>EnhancedRegistryBase[Any]</code></p> <p>Enhanced tool registry with advanced features.</p> <p>This registry extends ToolExecutionStrategyManager with: - Dynamic tool registration beyond just strategies - Event system for tool registration/unregistration - Health monitoring for tools and strategies - Caching for improved performance - Strategy integration and fallback chains</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.__init__","title":"<code>__init__(config=None, yaml_context=None)</code>","text":"<p>Initialize enhanced tool registry.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Optional[ToolRegistryConfig]</code> <p>Tool registry configuration</p> <code>None</code> <code>yaml_context</code> <code>Optional[YamlSystemContext]</code> <p>YAML system context for error reporting</p> <code>None</code>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.__repr__","title":"<code>__repr__()</code>","text":"<p>String representation of the registry.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.add_tool_validator","title":"<code>add_tool_validator(validator)</code>","text":"<p>Add custom tool validator.</p> <p>Parameters:</p> Name Type Description Default <code>validator</code> <code>Callable[[str, Any], bool]</code> <p>Function that takes (name, tool) and returns bool</p> required"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.detect_tool_type","title":"<code>detect_tool_type(tool)</code>","text":"<p>Detect tool type from tool object.</p> <p>Parameters:</p> Name Type Description Default <code>tool</code> <code>Any</code> <p>Tool object to analyze</p> required <p>Returns:</p> Type Description <code>ToolType</code> <p>Detected tool type</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.execute_tool","title":"<code>execute_tool(tool_name, context, tool_context, tool_config=None)</code>  <code>async</code>","text":"<p>Execute a tool with enhanced monitoring and error handling.</p> <p>Parameters:</p> Name Type Description Default <code>tool_name</code> <code>str</code> <p>Name of tool to execute</p> required <code>context</code> <code>InvocationContext</code> <p>Invocation context</p> required <code>tool_context</code> <code>YamlSystemContext</code> <p>YAML system context for error reporting</p> required <code>tool_config</code> <code>Optional[Dict[str, Any]]</code> <p>Tool-specific configuration</p> <code>None</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>Tool execution result</p> <p>Raises:</p> Type Description <code>YamlSystemError</code> <p>If tool execution fails</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.find_tools_by_strategy","title":"<code>find_tools_by_strategy(strategy_name)</code>","text":"<p>Find tools by their associated strategy.</p> <p>Parameters:</p> Name Type Description Default <code>strategy_name</code> <code>str</code> <p>Strategy name to search for</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: Names of tools with matching strategy</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.find_tools_by_type","title":"<code>find_tools_by_type(tool_type)</code>","text":"<p>Find tools by their type.</p> <p>Parameters:</p> Name Type Description Default <code>tool_type</code> <code>str</code> <p>Tool type to search for</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: Names of tools with matching type</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.get_all_tool_info","title":"<code>get_all_tool_info()</code>","text":"<p>Get information about all registered tools.</p> <p>Returns:</p> Type Description <code>Dict[str, ToolInfo]</code> <p>Dict[str, ToolInfo]: Mapping of tool names to tool info</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.get_authenticated_tools","title":"<code>get_authenticated_tools()</code>","text":"<p>Get list of tools that require authentication.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.get_registered_toolsets","title":"<code>get_registered_toolsets()</code>","text":"<p>Get list of registered toolset names.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.get_registry_stats","title":"<code>get_registry_stats()</code>","text":"<p>Get enhanced tool registry statistics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Registry statistics</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.get_strategy_for_tool","title":"<code>get_strategy_for_tool(tool_name)</code>","text":"<p>Get execution strategy for a specific tool.</p> <p>Parameters:</p> Name Type Description Default <code>tool_name</code> <code>str</code> <p>Name of the tool</p> required <p>Returns:</p> Name Type Description <code>ToolExecutionStrategy</code> <code>Optional[ToolExecutionStrategy]</code> <p>Strategy for the tool or None</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.get_tool","title":"<code>get_tool(name)</code>","text":"<p>Get a registered tool.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Tool name</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The tool instance</p> <p>Raises:</p> Type Description <code>YamlSystemError</code> <p>If tool not found</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.get_tool_health","title":"<code>get_tool_health(tool_name)</code>","text":"<p>Get health status for a specific tool.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.get_tool_info","title":"<code>get_tool_info(name)</code>","text":"<p>Get information about a registered tool.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Tool name</p> required <p>Returns:</p> Name Type Description <code>ToolInfo</code> <code>Optional[ToolInfo]</code> <p>Tool information or None if not found</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.get_tool_metadata","title":"<code>get_tool_metadata(tool_name)</code>","text":"<p>Get metadata for a specific tool.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.get_tool_types","title":"<code>get_tool_types()</code>","text":"<p>Get count of tools by type.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.get_tool_usage_stats","title":"<code>get_tool_usage_stats(tool_name)</code>","text":"<p>Get usage statistics for a specific tool.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.get_tools_by_type","title":"<code>get_tools_by_type(tool_type)</code>","text":"<p>Get list of tool names by type.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.get_toolset_tools","title":"<code>get_toolset_tools(toolset_name)</code>","text":"<p>Get list of tools from a specific toolset.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.list_tools","title":"<code>list_tools()</code>","text":"<p>List all registered tool names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: Sorted list of tool names</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.register_agent_tool","title":"<code>register_agent_tool(name, agent_tool, metadata=None, validate_agent=True)</code>  <code>async</code>","text":"<p>Register an AgentTool with agent validation.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Tool name</p> required <code>agent_tool</code> <code>AgentTool</code> <p>Agent tool instance</p> required <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code> <code>validate_agent</code> <code>bool</code> <p>Whether to validate wrapped agent</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if registration successful</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.register_function_tool","title":"<code>register_function_tool(name, function, metadata=None, validate_signature=True, validate_docstring=True)</code>  <code>async</code>","text":"<p>Register a FunctionTool with enhanced validation.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Tool name</p> required <code>function</code> <code>Callable</code> <p>Python function to wrap</p> required <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code> <code>validate_signature</code> <code>bool</code> <p>Whether to validate function signature</p> <code>True</code> <code>validate_docstring</code> <code>bool</code> <p>Whether to validate docstring presence</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if registration successful</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.register_google_tool","title":"<code>register_google_tool(name, google_tool, metadata=None, validate_credentials=True)</code>  <code>async</code>","text":"<p>Register a Google tool with credential validation.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Tool name</p> required <code>google_tool</code> <code>Union[GoogleTool, GoogleApiTool]</code> <p>Google tool instance</p> required <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code> <code>validate_credentials</code> <code>bool</code> <p>Whether to validate Google credentials</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if registration successful</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.register_mcp_tool","title":"<code>register_mcp_tool(name, mcp_tool, metadata=None, test_connection=True)</code>  <code>async</code>","text":"<p>Register an MCP tool with connection validation.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Tool name</p> required <code>mcp_tool</code> <code>McpTool</code> <p>MCP tool instance</p> required <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code> <code>test_connection</code> <code>bool</code> <p>Whether to test MCP connection</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if registration successful</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.register_openapi_tool","title":"<code>register_openapi_tool(name, rest_api_tool, metadata=None, validate_schema=True, test_endpoint=False)</code>  <code>async</code>","text":"<p>Register an OpenAPI/REST tool with schema validation.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Tool name</p> required <code>rest_api_tool</code> <code>RestApiTool</code> <p>REST API tool instance</p> required <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code> <code>validate_schema</code> <code>bool</code> <p>Whether to validate OpenAPI schema</p> <code>True</code> <code>test_endpoint</code> <code>bool</code> <p>Whether to test endpoint connectivity</p> <code>False</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if registration successful</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.register_tool","title":"<code>register_tool(name, tool, tool_type=None, strategy_name=None, metadata=None)</code>","text":"<p>Register a tool with enhanced features.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Tool name</p> required <code>tool</code> <code>Any</code> <p>Tool instance or callable</p> required <code>tool_type</code> <code>Optional[Union[str, ToolType]]</code> <p>Type of tool (auto-detected if None)</p> <code>None</code> <code>strategy_name</code> <code>Optional[str]</code> <p>Associated strategy name</p> <code>None</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Optional metadata about the tool</p> <code>None</code> <p>Raises:</p> Type Description <code>YamlSystemError</code> <p>If registration fails validation</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.register_toolset","title":"<code>register_toolset(name, toolset, auto_register_tools=True, metadata=None)</code>  <code>async</code>","text":"<p>Register a toolset and optionally its tools.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Toolset name</p> required <code>toolset</code> <code>BaseToolset</code> <p>Toolset instance</p> required <code>auto_register_tools</code> <code>bool</code> <p>Whether to auto-register all tools in the toolset</p> <code>True</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>Additional metadata</p> <code>None</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if registration successful</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.remove_tool_validator","title":"<code>remove_tool_validator(validator)</code>","text":"<p>Remove custom tool validator.</p> <p>Parameters:</p> Name Type Description Default <code>validator</code> <code>Callable[[str, Any], bool]</code> <p>Validator function to remove</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if validator was found and removed</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.EnhancedToolRegistry.unregister_tool","title":"<code>unregister_tool(name)</code>","text":"<p>Unregister a tool with cleanup.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of tool to unregister</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if tool was found and removed</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.ToolHealthStatus","title":"<code>ToolHealthStatus</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Tool-specific health status.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.ToolInfo","title":"<code>ToolInfo</code>","text":"<p>Information about a registered tool.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.ToolInfo.mark_error","title":"<code>mark_error()</code>","text":"<p>Mark tool as having an error.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.ToolInfo.mark_used","title":"<code>mark_used()</code>","text":"<p>Mark tool as used (for statistics).</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.ToolInfo.to_dict","title":"<code>to_dict()</code>","text":"<p>Convert to dictionary.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.ToolRegistrationEvent","title":"<code>ToolRegistrationEvent</code>  <code>dataclass</code>","text":"<p>               Bases: <code>RegistryEvent</code></p> <p>Tool-specific registration event.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.ToolRegistrationEvent.connection_info","title":"<code>connection_info = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Connection information for remote tools.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.ToolRegistrationEvent.has_auth","title":"<code>has_auth = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether tool requires authentication.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.ToolRegistrationEvent.replaced_tool","title":"<code>replaced_tool = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Previously registered tool if this was a replacement.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.ToolRegistrationEvent.strategy_name","title":"<code>strategy_name = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Associated strategy name.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.ToolRegistrationEvent.tool_type","title":"<code>tool_type = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Type of the tool.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.ToolRegistrationEvent.tool_version","title":"<code>tool_version = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Version of the tool if available.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.ToolRegistrationEvent.toolset_name","title":"<code>toolset_name = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Name of parent toolset if applicable.</p>"},{"location":"reference/api/#google_adk_extras.runners.registry.tool_registry.ToolType","title":"<code>ToolType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Supported ADK tool types.</p>"},{"location":"reference/api/#configuration","title":"Configuration","text":"<p>Enhanced Configuration System.</p> <p>This module provides a unified configuration system that automatically detects and adapts multiple configuration formats using the adapter pattern.</p> <p>Enhanced Configuration Adapter Base Classes.</p> <p>This module provides the foundation for flexible configuration architecture supporting multiple input formats through a clean adapter pattern.</p> <p>Configuration Format Adapters.</p> <p>This module provides concrete adapters for different configuration formats including YAML, JSON, TOML, dictionary, and environment variables.</p> <p>Environment Variable Interpolation Utilities.</p> <p>This module provides standalone environment variable interpolation services for configuration values with comprehensive validation and error reporting.</p>"},{"location":"reference/api/#google_adk_extras.configuration.system.ConfigurationSystem","title":"<code>ConfigurationSystem</code>","text":"<p>Enhanced configuration system with automatic format detection.</p> <p>Provides a unified API for loading configurations from multiple sources: - YAML files and strings - JSON files and strings - TOML files and strings - Python dictionaries - Environment variables - Remote URLs - Custom adapters</p> <p>Features: - Automatic format detection - Environment variable interpolation - Comprehensive validation and error reporting - Performance monitoring - Extensible adapter architecture</p>"},{"location":"reference/api/#google_adk_extras.configuration.system.ConfigurationSystem.__init__","title":"<code>__init__(enable_interpolation=True, enable_validation=True, strict_mode=False, default_adapters=True)</code>","text":"<p>Initialize configuration system.</p> <p>Parameters:</p> Name Type Description Default <code>enable_interpolation</code> <code>bool</code> <p>Whether to enable environment variable interpolation</p> <code>True</code> <code>enable_validation</code> <code>bool</code> <p>Whether to enable validation</p> <code>True</code> <code>strict_mode</code> <code>bool</code> <p>Whether to fail fast on validation errors</p> <code>False</code> <code>default_adapters</code> <code>bool</code> <p>Whether to register default adapters</p> <code>True</code>"},{"location":"reference/api/#google_adk_extras.configuration.system.ConfigurationSystem.clear_adapter_cache","title":"<code>clear_adapter_cache()</code>","text":"<p>Clear adapter instance cache.</p>"},{"location":"reference/api/#google_adk_extras.configuration.system.ConfigurationSystem.get_adapter","title":"<code>get_adapter(name)</code>","text":"<p>Get registered adapter by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of adapter to retrieve</p> required <p>Returns:</p> Type Description <code>Optional[Type[EnhancedConfigAdapter]]</code> <p>Type[EnhancedConfigAdapter]: Adapter class or None if not found</p>"},{"location":"reference/api/#google_adk_extras.configuration.system.ConfigurationSystem.get_system_stats","title":"<code>get_system_stats()</code>","text":"<p>Get configuration system statistics.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: System statistics</p>"},{"location":"reference/api/#google_adk_extras.configuration.system.ConfigurationSystem.list_adapters","title":"<code>list_adapters()</code>","text":"<p>List all registered adapter names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: List of registered adapter names</p>"},{"location":"reference/api/#google_adk_extras.configuration.system.ConfigurationSystem.load_config","title":"<code>load_config(target_type, source, adapter_name=None, context=None, **adapter_kwargs)</code>","text":"<p>Load configuration from source using automatic or specified adapter.</p> <p>Parameters:</p> Name Type Description Default <code>target_type</code> <code>Type[T]</code> <p>Target configuration class to create</p> required <code>source</code> <code>Any</code> <p>Configuration source (file path, dict, string, etc.)</p> required <code>adapter_name</code> <code>Optional[str]</code> <p>Optional specific adapter to use</p> <code>None</code> <code>context</code> <code>Optional[ConfigurationContext]</code> <p>Optional configuration context</p> <code>None</code> <code>**adapter_kwargs</code> <p>Additional arguments for adapter</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>AdapterResult</code> <code>AdapterResult</code> <p>Adapter result with config and validation info</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If no suitable adapter found or loading fails</p>"},{"location":"reference/api/#google_adk_extras.configuration.system.ConfigurationSystem.register_adapter","title":"<code>register_adapter(name, adapter_class)</code>","text":"<p>Register a configuration adapter.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name to register adapter under</p> required <code>adapter_class</code> <code>Type[EnhancedConfigAdapter]</code> <p>Adapter class to register</p> required"},{"location":"reference/api/#google_adk_extras.configuration.system.ConfigurationSystem.validate_config","title":"<code>validate_config(config, target_type, context=None)</code>","text":"<p>Validate configuration against target type.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Any</code> <p>Configuration to validate</p> required <code>target_type</code> <code>Type[T]</code> <p>Target configuration type</p> required <code>context</code> <code>Optional[ConfigurationContext]</code> <p>Optional configuration context</p> <code>None</code> <p>Returns:</p> Type Description <code>List[ValidationIssue]</code> <p>List[ValidationIssue]: List of validation issues</p>"},{"location":"reference/api/#google_adk_extras.configuration.system.get_config_system","title":"<code>get_config_system(enable_interpolation=True, enable_validation=True, strict_mode=False)</code>","text":"<p>Get global configuration system instance.</p> <p>Parameters:</p> Name Type Description Default <code>enable_interpolation</code> <code>bool</code> <p>Whether to enable environment variable interpolation</p> <code>True</code> <code>enable_validation</code> <code>bool</code> <p>Whether to enable validation</p> <code>True</code> <code>strict_mode</code> <code>bool</code> <p>Whether to fail fast on validation errors</p> <code>False</code> <p>Returns:</p> Name Type Description <code>ConfigurationSystem</code> <code>ConfigurationSystem</code> <p>Global configuration system instance</p>"},{"location":"reference/api/#google_adk_extras.configuration.system.load_config","title":"<code>load_config(target_type, source, adapter_name=None, context=None, **adapter_kwargs)</code>","text":"<p>Convenience function to load configuration using global system.</p> <p>Parameters:</p> Name Type Description Default <code>target_type</code> <code>Type[T]</code> <p>Target configuration class to create</p> required <code>source</code> <code>Any</code> <p>Configuration source (file path, dict, string, etc.)</p> required <code>adapter_name</code> <code>Optional[str]</code> <p>Optional specific adapter to use</p> <code>None</code> <code>context</code> <code>Optional[ConfigurationContext]</code> <p>Optional configuration context</p> <code>None</code> <code>**adapter_kwargs</code> <p>Additional arguments for adapter</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>AdapterResult</code> <code>AdapterResult</code> <p>Adapter result with config and validation info</p>"},{"location":"reference/api/#google_adk_extras.configuration.system.load_enhanced_run_config","title":"<code>load_enhanced_run_config(source, adapter_name=None, **adapter_kwargs)</code>","text":"<p>Convenience function to load EnhancedRunConfig.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>Any</code> <p>Configuration source</p> required <code>adapter_name</code> <code>Optional[str]</code> <p>Optional specific adapter to use</p> <code>None</code> <code>**adapter_kwargs</code> <p>Additional arguments for adapter</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>AdapterResult</code> <code>AdapterResult</code> <p>Adapter result with EnhancedRunConfig</p>"},{"location":"reference/api/#google_adk_extras.configuration.system.reset_config_system","title":"<code>reset_config_system()</code>","text":"<p>Reset global configuration system (primarily for testing).</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.AdapterResult","title":"<code>AdapterResult</code>  <code>dataclass</code>","text":"<p>Result of configuration adaptation.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.AdapterResult.config","title":"<code>config</code>  <code>instance-attribute</code>","text":"<p>The adapted configuration object.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.AdapterResult.context","title":"<code>context = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Configuration context used.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.AdapterResult.metadata","title":"<code>metadata = field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Additional result metadata.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.AdapterResult.processing_time","title":"<code>processing_time = 0.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Time taken to process configuration.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.AdapterResult.validation_issues","title":"<code>validation_issues = field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of validation issues found.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.AdapterResult.get_issues_by_severity","title":"<code>get_issues_by_severity(severity)</code>","text":"<p>Get validation issues by severity.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.AdapterResult.has_errors","title":"<code>has_errors()</code>","text":"<p>Check if result has validation errors.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.AdapterResult.has_warnings","title":"<code>has_warnings()</code>","text":"<p>Check if result has validation warnings.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ConfigSourceType","title":"<code>ConfigSourceType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Configuration source types.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ConfigurationContext","title":"<code>ConfigurationContext</code>  <code>dataclass</code>","text":"<p>Context for configuration processing.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ConfigurationContext.environment","title":"<code>environment = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Environment context (dev, prod, test).</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ConfigurationContext.interpolation_enabled","title":"<code>interpolation_enabled = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether environment variable interpolation is enabled.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ConfigurationContext.metadata","title":"<code>metadata = field(default_factory=dict)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Additional context metadata.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ConfigurationContext.source_path","title":"<code>source_path = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Path to source file or URL.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ConfigurationContext.source_type","title":"<code>source_type</code>  <code>instance-attribute</code>","text":"<p>Type of configuration source.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ConfigurationContext.strict_mode","title":"<code>strict_mode = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to fail fast on validation errors.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ConfigurationContext.validation_enabled","title":"<code>validation_enabled = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether validation is enabled.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ConfigurationError","title":"<code>ConfigurationError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Configuration processing error.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.EnhancedConfigAdapter","title":"<code>EnhancedConfigAdapter</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Enhanced base class for configuration adapters.</p> <p>Provides common functionality: - Environment variable interpolation - Validation framework integration - Error reporting and suggestions - Performance monitoring - Context-aware processing</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.EnhancedConfigAdapter.__init__","title":"<code>__init__(target_type, enable_interpolation=True, enable_validation=True, strict_mode=False)</code>","text":"<p>Initialize enhanced configuration adapter.</p> <p>Parameters:</p> Name Type Description Default <code>target_type</code> <code>Type[T]</code> <p>Target configuration class to adapt to</p> required <code>enable_interpolation</code> <code>bool</code> <p>Whether to enable environment variable interpolation</p> <code>True</code> <code>enable_validation</code> <code>bool</code> <p>Whether to enable validation</p> <code>True</code> <code>strict_mode</code> <code>bool</code> <p>Whether to fail fast on validation errors</p> <code>False</code>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.EnhancedConfigAdapter.adapt","title":"<code>adapt(source, context=None)</code>","text":"<p>Adapt configuration from source to target type.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>Any</code> <p>Configuration source</p> required <code>context</code> <code>Optional[ConfigurationContext]</code> <p>Optional configuration context</p> <code>None</code> <p>Returns:</p> Name Type Description <code>AdapterResult</code> <code>AdapterResult</code> <p>Adaptation result with config and validation info</p> <p>Raises:</p> Type Description <code>ConfigurationError</code> <p>If adaptation fails in strict mode</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.EnhancedConfigAdapter.can_handle_source","title":"<code>can_handle_source(source, context=None)</code>  <code>abstractmethod</code>","text":"<p>Check if adapter can handle the given configuration source.</p> <p>Parameters:</p> Name Type Description Default <code>source</code> <code>Any</code> <p>Configuration source to check</p> required <code>context</code> <code>Optional[ConfigurationContext]</code> <p>Optional configuration context</p> <code>None</code> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if adapter can handle the source</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.EnhancedConfigAdapter.clear_interpolation_cache","title":"<code>clear_interpolation_cache()</code>","text":"<p>Clear environment variable interpolation cache.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.EnhancedConfigAdapter.get_supported_source_types","title":"<code>get_supported_source_types()</code>  <code>abstractmethod</code>","text":"<p>Get list of supported configuration source types.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ValidationIssue","title":"<code>ValidationIssue</code>  <code>dataclass</code>","text":"<p>Configuration validation issue.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ValidationIssue.message","title":"<code>message</code>  <code>instance-attribute</code>","text":"<p>Human-readable description of the issue.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ValidationIssue.path","title":"<code>path</code>  <code>instance-attribute</code>","text":"<p>Configuration path where issue occurred.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ValidationIssue.severity","title":"<code>severity</code>  <code>instance-attribute</code>","text":"<p>Severity level of the issue.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ValidationIssue.source_location","title":"<code>source_location = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional source file/line information.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ValidationIssue.suggestion","title":"<code>suggestion = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional suggestion for fixing the issue.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.ValidationSeverity","title":"<code>ValidationSeverity</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Validation issue severity levels.</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.get_adapter","title":"<code>get_adapter(name)</code>","text":"<p>Get registered configuration adapter by name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of adapter to retrieve</p> required <p>Returns:</p> Type Description <code>Optional[Type[EnhancedConfigAdapter]]</code> <p>Type[EnhancedConfigAdapter]: Adapter class or None if not found</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.list_adapters","title":"<code>list_adapters()</code>","text":"<p>List all registered adapter names.</p> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: List of registered adapter names</p>"},{"location":"reference/api/#google_adk_extras.configuration.base_adapter.register_adapter","title":"<code>register_adapter(name, adapter_class)</code>","text":"<p>Register a configuration adapter.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name to register adapter under</p> required <code>adapter_class</code> <code>Type[EnhancedConfigAdapter]</code> <p>Adapter class to register</p> required"},{"location":"reference/api/#google_adk_extras.configuration.adapters.DictConfigAdapter","title":"<code>DictConfigAdapter</code>","text":"<p>               Bases: <code>EnhancedConfigAdapter</code></p> <p>Adapter for Python dictionary configurations.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.DictConfigAdapter.can_handle_source","title":"<code>can_handle_source(source, context=None)</code>","text":"<p>Check if adapter can handle the source.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.DictConfigAdapter.get_supported_source_types","title":"<code>get_supported_source_types()</code>","text":"<p>Get supported source types.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.EnvironmentConfigAdapter","title":"<code>EnvironmentConfigAdapter</code>","text":"<p>               Bases: <code>EnhancedConfigAdapter</code></p> <p>Adapter for environment variable based configurations.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.EnvironmentConfigAdapter.__init__","title":"<code>__init__(target_type, prefix=None, separator='__', enable_interpolation=True, enable_validation=True, strict_mode=False)</code>","text":"<p>Initialize environment config adapter.</p> <p>Parameters:</p> Name Type Description Default <code>target_type</code> <code>Type[T]</code> <p>Target configuration type</p> required <code>prefix</code> <code>Optional[str]</code> <p>Environment variable prefix (e.g., 'APP_')</p> <code>None</code> <code>separator</code> <code>str</code> <p>Separator for nested keys (e.g., '__')</p> <code>'__'</code> <code>enable_interpolation</code> <code>bool</code> <p>Whether to enable environment variable interpolation</p> <code>True</code> <code>enable_validation</code> <code>bool</code> <p>Whether to enable validation</p> <code>True</code> <code>strict_mode</code> <code>bool</code> <p>Whether to fail fast on validation errors</p> <code>False</code>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.EnvironmentConfigAdapter.can_handle_source","title":"<code>can_handle_source(source, context=None)</code>","text":"<p>Check if adapter can handle the source.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.EnvironmentConfigAdapter.get_supported_source_types","title":"<code>get_supported_source_types()</code>","text":"<p>Get supported source types.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.JSONConfigAdapter","title":"<code>JSONConfigAdapter</code>","text":"<p>               Bases: <code>EnhancedConfigAdapter</code></p> <p>Adapter for JSON configuration files and strings.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.JSONConfigAdapter.can_handle_source","title":"<code>can_handle_source(source, context=None)</code>","text":"<p>Check if adapter can handle the source.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.JSONConfigAdapter.get_supported_source_types","title":"<code>get_supported_source_types()</code>","text":"<p>Get supported source types.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.RemoteConfigAdapter","title":"<code>RemoteConfigAdapter</code>","text":"<p>               Bases: <code>EnhancedConfigAdapter</code></p> <p>Adapter for remote configuration URLs.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.RemoteConfigAdapter.__init__","title":"<code>__init__(target_type, enable_interpolation=True, enable_validation=True, strict_mode=False, timeout=30, headers=None)</code>","text":"<p>Initialize remote config adapter.</p> <p>Parameters:</p> Name Type Description Default <code>target_type</code> <code>Type[T]</code> <p>Target configuration type</p> required <code>enable_interpolation</code> <code>bool</code> <p>Whether to enable environment variable interpolation</p> <code>True</code> <code>enable_validation</code> <code>bool</code> <p>Whether to enable validation</p> <code>True</code> <code>strict_mode</code> <code>bool</code> <p>Whether to fail fast on validation errors</p> <code>False</code> <code>timeout</code> <code>int</code> <p>Request timeout in seconds</p> <code>30</code> <code>headers</code> <code>Optional[Dict[str, str]]</code> <p>Optional HTTP headers</p> <code>None</code>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.RemoteConfigAdapter.can_handle_source","title":"<code>can_handle_source(source, context=None)</code>","text":"<p>Check if adapter can handle the source.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.RemoteConfigAdapter.get_supported_source_types","title":"<code>get_supported_source_types()</code>","text":"<p>Get supported source types.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.TOMLConfigAdapter","title":"<code>TOMLConfigAdapter</code>","text":"<p>               Bases: <code>EnhancedConfigAdapter</code></p> <p>Adapter for TOML configuration files and strings.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.TOMLConfigAdapter.can_handle_source","title":"<code>can_handle_source(source, context=None)</code>","text":"<p>Check if adapter can handle the source.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.TOMLConfigAdapter.get_supported_source_types","title":"<code>get_supported_source_types()</code>","text":"<p>Get supported source types.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.YAMLConfigAdapter","title":"<code>YAMLConfigAdapter</code>","text":"<p>               Bases: <code>EnhancedConfigAdapter</code></p> <p>Adapter for YAML configuration files and strings.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.YAMLConfigAdapter.can_handle_source","title":"<code>can_handle_source(source, context=None)</code>","text":"<p>Check if adapter can handle the source.</p>"},{"location":"reference/api/#google_adk_extras.configuration.adapters.YAMLConfigAdapter.get_supported_source_types","title":"<code>get_supported_source_types()</code>","text":"<p>Get supported source types.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.EnvironmentInterpolator","title":"<code>EnvironmentInterpolator</code>","text":"<p>Standalone environment variable interpolation service.</p> <p>Provides comprehensive environment variable interpolation with: - Multiple syntax support (shell, python, ansible, etc.) - Default value handling - Recursive interpolation - Validation and error reporting - Performance optimization through caching</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.EnvironmentInterpolator.__init__","title":"<code>__init__(config=None)</code>","text":"<p>Initialize environment interpolator.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Optional[InterpolationConfig]</code> <p>Interpolation configuration (uses defaults if None)</p> <code>None</code>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.EnvironmentInterpolator.add_custom_pattern","title":"<code>add_custom_pattern(pattern)</code>","text":"<p>Add a custom interpolation pattern.</p> <p>Parameters:</p> Name Type Description Default <code>pattern</code> <code>InterpolationPattern</code> <p>Custom interpolation pattern to add</p> required"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.EnvironmentInterpolator.clear_cache","title":"<code>clear_cache()</code>","text":"<p>Clear interpolation cache.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.EnvironmentInterpolator.get_cache_stats","title":"<code>get_cache_stats()</code>","text":"<p>Get cache statistics.</p> <p>Returns:</p> Type Description <code>Dict[str, int]</code> <p>Dict[str, int]: Cache statistics</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.EnvironmentInterpolator.interpolate","title":"<code>interpolate(config, context=None, validation_issues=None)</code>","text":"<p>Interpolate environment variables in configuration.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>Union[Dict[str, Any], str]</code> <p>Configuration dict or string to interpolate</p> required <code>context</code> <code>Optional[ConfigurationContext]</code> <p>Optional configuration context</p> <code>None</code> <code>validation_issues</code> <code>Optional[List[ValidationIssue]]</code> <p>Optional list to append validation issues to</p> <code>None</code> <p>Returns:</p> Type Description <code>Union[Dict[str, Any], str]</code> <p>Union[Dict[str, Any], str]: Configuration with interpolated values</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationConfig","title":"<code>InterpolationConfig</code>  <code>dataclass</code>","text":"<p>Configuration for environment variable interpolation.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationConfig.allow_undefined","title":"<code>allow_undefined = False</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to allow undefined environment variables (returns empty string).</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationConfig.case_sensitive","title":"<code>case_sensitive = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether environment variable names are case-sensitive.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationConfig.custom_patterns","title":"<code>custom_patterns = field(default_factory=list)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Custom interpolation patterns to use.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationConfig.enabled_syntaxes","title":"<code>enabled_syntaxes = field(default_factory=(lambda: [InterpolationSyntax.SHELL, InterpolationSyntax.PYTHON]))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>List of enabled interpolation syntaxes.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationConfig.max_recursion_depth","title":"<code>max_recursion_depth = 10</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Maximum recursion depth for nested interpolation.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationConfig.prefix_filter","title":"<code>prefix_filter = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional prefix filter for environment variables (e.g., 'APP_').</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationConfig.recursive_interpolation","title":"<code>recursive_interpolation = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to recursively interpolate values that contain more variables.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationConfig.validation_enabled","title":"<code>validation_enabled = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether to perform validation during interpolation.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationPattern","title":"<code>InterpolationPattern</code>  <code>dataclass</code>","text":"<p>Environment variable interpolation pattern.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationPattern.example","title":"<code>example = ''</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Example usage of this pattern.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationPattern.group_names","title":"<code>group_names</code>  <code>instance-attribute</code>","text":"<p>Names of regex capture groups.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationPattern.regex","title":"<code>regex</code>  <code>instance-attribute</code>","text":"<p>Compiled regex pattern for matching.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationPattern.supports_defaults","title":"<code>supports_defaults = True</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Whether this pattern supports default values.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationPattern.syntax","title":"<code>syntax</code>  <code>instance-attribute</code>","text":"<p>Syntax style for this pattern.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.InterpolationSyntax","title":"<code>InterpolationSyntax</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Environment variable interpolation syntax styles.</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.create_interpolator","title":"<code>create_interpolator(syntax=None, allow_undefined=False, case_sensitive=True, recursive=True)</code>","text":"<p>Create an environment interpolator with common settings.</p> <p>Parameters:</p> Name Type Description Default <code>syntax</code> <code>Optional[List[InterpolationSyntax]]</code> <p>List of enabled syntaxes (defaults to SHELL and PYTHON)</p> <code>None</code> <code>allow_undefined</code> <code>bool</code> <p>Whether to allow undefined environment variables</p> <code>False</code> <code>case_sensitive</code> <code>bool</code> <p>Whether variable names are case-sensitive</p> <code>True</code> <code>recursive</code> <code>bool</code> <p>Whether to enable recursive interpolation</p> <code>True</code> <p>Returns:</p> Name Type Description <code>EnvironmentInterpolator</code> <code>EnvironmentInterpolator</code> <p>Configured interpolator</p>"},{"location":"reference/api/#google_adk_extras.configuration.interpolation.interpolate_string","title":"<code>interpolate_string(value, syntax=None, allow_undefined=False)</code>","text":"<p>Convenience function to interpolate a single string.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>String to interpolate</p> required <code>syntax</code> <code>Optional[List[InterpolationSyntax]]</code> <p>List of enabled syntaxes</p> <code>None</code> <code>allow_undefined</code> <code>bool</code> <p>Whether to allow undefined environment variables</p> <code>False</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Interpolated string</p>"},{"location":"reference/api/#services","title":"Services","text":"<p>Base class for custom session services.</p> <p>SQL-based session service implementation using SQLAlchemy.</p> <p>MongoDB-based session service implementation.</p> <p>Redis-based session service implementation.</p> <p>YAML file-based session service implementation.</p> <p>Base class for custom memory services.</p> <p>SQL-based memory service implementation using SQLAlchemy.</p> <p>MongoDB-based memory service implementation using PyMongo.</p> <p>Redis-based memory service implementation using redis-py.</p> <p>YAML file-based memory service implementation.</p> <p>Base class for custom artifact services.</p> <p>Local folder-based artifact service implementation.</p> <p>S3-compatible artifact service implementation.</p> <p>SQL-based artifact service implementation using SQLAlchemy.</p> <p>MongoDB-based artifact service implementation.</p>"},{"location":"reference/api/#google_adk_extras.sessions.base_custom_session_service.BaseCustomSessionService","title":"<code>BaseCustomSessionService</code>","text":"<p>               Bases: <code>BaseSessionService</code>, <code>ABC</code></p> <p>Base class for custom session services with common functionality.</p> <p>This abstract base class provides a foundation for implementing custom session services with automatic initialization and cleanup handling.</p>"},{"location":"reference/api/#google_adk_extras.sessions.base_custom_session_service.BaseCustomSessionService.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the base custom session service.</p>"},{"location":"reference/api/#google_adk_extras.sessions.base_custom_session_service.BaseCustomSessionService.append_event","title":"<code>append_event(session, event)</code>  <code>async</code>","text":"<p>Append an event to a session.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>The session to append the event to.</p> required <code>event</code> <code>Event</code> <p>The event to append.</p> required <p>Returns:</p> Type Description <code>Event</code> <p>The appended event.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If appending the event fails.</p>"},{"location":"reference/api/#google_adk_extras.sessions.base_custom_session_service.BaseCustomSessionService.cleanup","title":"<code>cleanup()</code>  <code>async</code>","text":"<p>Clean up resources used by the session service.</p> <p>This method should be called when the service is no longer needed to ensure proper cleanup of resources.</p>"},{"location":"reference/api/#google_adk_extras.sessions.base_custom_session_service.BaseCustomSessionService.create_session","title":"<code>create_session(*, app_name, user_id, state=None, session_id=None)</code>  <code>async</code>","text":"<p>Create a new session.</p> <p>Parameters:</p> Name Type Description Default <code>app_name</code> <code>str</code> <p>The name of the application.</p> required <code>user_id</code> <code>str</code> <p>The ID of the user.</p> required <code>state</code> <code>Optional[dict[str, Any]]</code> <p>Optional initial state for the session.</p> <code>None</code> <code>session_id</code> <code>Optional[str]</code> <p>Optional specific ID for the session. If not provided, a UUID will be generated.</p> <code>None</code> <p>Returns:</p> Type Description <code>Session</code> <p>The created Session object.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If session creation fails.</p>"},{"location":"reference/api/#google_adk_extras.sessions.base_custom_session_service.BaseCustomSessionService.delete_session","title":"<code>delete_session(*, app_name, user_id, session_id)</code>  <code>async</code>","text":"<p>Delete a session.</p> <p>Parameters:</p> Name Type Description Default <code>app_name</code> <code>str</code> <p>The name of the application.</p> required <code>user_id</code> <code>str</code> <p>The ID of the user.</p> required <code>session_id</code> <code>str</code> <p>The ID of the session to delete.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If session deletion fails.</p>"},{"location":"reference/api/#google_adk_extras.sessions.base_custom_session_service.BaseCustomSessionService.get_session","title":"<code>get_session(*, app_name, user_id, session_id, config=None)</code>  <code>async</code>","text":"<p>Get a session by ID.</p> <p>Parameters:</p> Name Type Description Default <code>app_name</code> <code>str</code> <p>The name of the application.</p> required <code>user_id</code> <code>str</code> <p>The ID of the user.</p> required <code>session_id</code> <code>str</code> <p>The ID of the session to retrieve.</p> required <code>config</code> <code>Optional[GetSessionConfig]</code> <p>Optional configuration for session retrieval.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[Session]</code> <p>The Session object if found, None otherwise.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If session retrieval fails.</p>"},{"location":"reference/api/#google_adk_extras.sessions.base_custom_session_service.BaseCustomSessionService.initialize","title":"<code>initialize()</code>  <code>async</code>","text":"<p>Initialize the session service.</p> <p>This method should be called before using the service to ensure any required setup (database connections, etc.) is complete.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If initialization fails.</p>"},{"location":"reference/api/#google_adk_extras.sessions.base_custom_session_service.BaseCustomSessionService.list_sessions","title":"<code>list_sessions(*, app_name, user_id)</code>  <code>async</code>","text":"<p>List all sessions for a user.</p> <p>Parameters:</p> Name Type Description Default <code>app_name</code> <code>str</code> <p>The name of the application.</p> required <code>user_id</code> <code>str</code> <p>The ID of the user.</p> required <p>Returns:</p> Type Description <code>ListSessionsResponse</code> <p>A ListSessionsResponse containing the sessions.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If session listing fails.</p>"},{"location":"reference/api/#google_adk_extras.sessions.sql_session_service.SQLSessionModel","title":"<code>SQLSessionModel</code>","text":"<p>               Bases: <code>Base</code></p> <p>SQLAlchemy model for storing sessions.</p>"},{"location":"reference/api/#google_adk_extras.sessions.sql_session_service.SQLSessionService","title":"<code>SQLSessionService</code>","text":"<p>               Bases: <code>BaseCustomSessionService</code></p> <p>SQL-based session service implementation.</p> <p>This service stores sessions in a SQL database using SQLAlchemy. It supports various SQL databases including SQLite, PostgreSQL, and MySQL.</p>"},{"location":"reference/api/#google_adk_extras.sessions.sql_session_service.SQLSessionService.__init__","title":"<code>__init__(database_url)</code>","text":"<p>Initialize the SQL session service.</p> <p>Parameters:</p> Name Type Description Default <code>database_url</code> <code>str</code> <p>Database connection string (e.g., 'sqlite:///sessions.db')</p> required"},{"location":"reference/api/#google_adk_extras.sessions.mongo_session_service.MongoSessionService","title":"<code>MongoSessionService</code>","text":"<p>               Bases: <code>BaseCustomSessionService</code></p> <p>MongoDB-based session service implementation.</p>"},{"location":"reference/api/#google_adk_extras.sessions.mongo_session_service.MongoSessionService.__init__","title":"<code>__init__(connection_string, database_name='adk_sessions')</code>","text":"<p>Initialize the MongoDB session service.</p> <p>Parameters:</p> Name Type Description Default <code>connection_string</code> <code>str</code> <p>MongoDB connection string</p> required <code>database_name</code> <code>str</code> <p>Name of the database to use</p> <code>'adk_sessions'</code>"},{"location":"reference/api/#google_adk_extras.sessions.redis_session_service.RedisSessionService","title":"<code>RedisSessionService</code>","text":"<p>               Bases: <code>BaseCustomSessionService</code></p> <p>Redis-based session service implementation.</p>"},{"location":"reference/api/#google_adk_extras.sessions.redis_session_service.RedisSessionService.__init__","title":"<code>__init__(host='localhost', port=6379, db=0, password=None)</code>","text":"<p>Initialize the Redis session service.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Redis host</p> <code>'localhost'</code> <code>port</code> <code>int</code> <p>Redis port</p> <code>6379</code> <code>db</code> <code>int</code> <p>Redis database number</p> <code>0</code> <code>password</code> <code>Optional[str]</code> <p>Redis password (if required)</p> <code>None</code>"},{"location":"reference/api/#google_adk_extras.sessions.yaml_file_session_service.YamlFileSessionService","title":"<code>YamlFileSessionService</code>","text":"<p>               Bases: <code>BaseCustomSessionService</code></p> <p>YAML file-based session service implementation.</p> <p>This service stores sessions in YAML files in a hierarchical directory structure. Each session is stored in a separate YAML file organized by app name and user ID.</p>"},{"location":"reference/api/#google_adk_extras.sessions.yaml_file_session_service.YamlFileSessionService.__init__","title":"<code>__init__(base_directory='./sessions')</code>","text":"<p>Initialize the YAML file session service.</p> <p>Parameters:</p> Name Type Description Default <code>base_directory</code> <code>str</code> <p>Base directory for storing session files. Defaults to \"./sessions\".</p> <code>'./sessions'</code>"},{"location":"reference/api/#google_adk_extras.memory.base_custom_memory_service.BaseCustomMemoryService","title":"<code>BaseCustomMemoryService</code>","text":"<p>               Bases: <code>BaseMemoryService</code></p> <p>Base class for custom memory services with common functionality.</p> <p>This abstract base class provides a foundation for implementing custom memory services with automatic initialization and cleanup handling.</p>"},{"location":"reference/api/#google_adk_extras.memory.base_custom_memory_service.BaseCustomMemoryService.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the base custom memory service.</p>"},{"location":"reference/api/#google_adk_extras.memory.base_custom_memory_service.BaseCustomMemoryService.add_session_to_memory","title":"<code>add_session_to_memory(session)</code>  <code>async</code>","text":"<p>Add a session to the memory service.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Session</code> <p>The session to add.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If adding the session to memory fails.</p>"},{"location":"reference/api/#google_adk_extras.memory.base_custom_memory_service.BaseCustomMemoryService.cleanup","title":"<code>cleanup()</code>  <code>async</code>","text":"<p>Clean up the memory service.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If cleanup fails.</p>"},{"location":"reference/api/#google_adk_extras.memory.base_custom_memory_service.BaseCustomMemoryService.initialize","title":"<code>initialize()</code>  <code>async</code>","text":"<p>Initialize the memory service.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If initialization fails.</p>"},{"location":"reference/api/#google_adk_extras.memory.base_custom_memory_service.BaseCustomMemoryService.search_memory","title":"<code>search_memory(*, app_name, user_id, query)</code>  <code>async</code>","text":"<p>Search for sessions that match the query.</p> <p>Parameters:</p> Name Type Description Default <code>app_name</code> <code>str</code> <p>The name of the application.</p> required <code>user_id</code> <code>str</code> <p>The id of the user.</p> required <code>query</code> <code>str</code> <p>The query to search for.</p> required <p>Returns:</p> Type Description <code>SearchMemoryResponse</code> <p>A SearchMemoryResponse containing the matching memories.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If searching memory fails.</p>"},{"location":"reference/api/#google_adk_extras.memory.sql_memory_service.SQLMemoryModel","title":"<code>SQLMemoryModel</code>","text":"<p>               Bases: <code>Base</code></p> <p>SQLAlchemy model for storing memory entries.</p>"},{"location":"reference/api/#google_adk_extras.memory.sql_memory_service.SQLMemoryService","title":"<code>SQLMemoryService</code>","text":"<p>               Bases: <code>BaseCustomMemoryService</code></p> <p>SQL-based memory service implementation.</p> <p>This service stores memory entries in a SQL database using SQLAlchemy. It supports efficient searching of memory entries by extracting and indexing text content from conversation events.</p>"},{"location":"reference/api/#google_adk_extras.memory.sql_memory_service.SQLMemoryService.__init__","title":"<code>__init__(database_url)</code>","text":"<p>Initialize the SQL memory service.</p> <p>Parameters:</p> Name Type Description Default <code>database_url</code> <code>str</code> <p>Database connection string (e.g., 'sqlite:///memory.db')</p> required"},{"location":"reference/api/#google_adk_extras.memory.mongo_memory_service.MongoMemoryService","title":"<code>MongoMemoryService</code>","text":"<p>               Bases: <code>BaseCustomMemoryService</code></p> <p>MongoDB-based memory service implementation.</p>"},{"location":"reference/api/#google_adk_extras.memory.mongo_memory_service.MongoMemoryService.__init__","title":"<code>__init__(connection_string, database_name='adk_memory')</code>","text":"<p>Initialize the MongoDB memory service.</p> <p>Parameters:</p> Name Type Description Default <code>connection_string</code> <code>str</code> <p>MongoDB connection string</p> required <code>database_name</code> <code>str</code> <p>Name of the database to use</p> <code>'adk_memory'</code>"},{"location":"reference/api/#google_adk_extras.memory.redis_memory_service.RedisMemoryService","title":"<code>RedisMemoryService</code>","text":"<p>               Bases: <code>BaseCustomMemoryService</code></p> <p>Redis-based memory service implementation.</p>"},{"location":"reference/api/#google_adk_extras.memory.redis_memory_service.RedisMemoryService.__init__","title":"<code>__init__(host='localhost', port=6379, db=0)</code>","text":"<p>Initialize the Redis memory service.</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>Redis server host</p> <code>'localhost'</code> <code>port</code> <code>int</code> <p>Redis server port</p> <code>6379</code> <code>db</code> <code>int</code> <p>Redis database number</p> <code>0</code>"},{"location":"reference/api/#google_adk_extras.memory.yaml_file_memory_service.YamlFileMemoryService","title":"<code>YamlFileMemoryService</code>","text":"<p>               Bases: <code>BaseCustomMemoryService</code></p> <p>YAML file-based memory service implementation.</p> <p>This service stores memory entries in YAML files in a hierarchical directory structure. Each memory entry is stored in a separate YAML file organized by app name and user ID. Memory entries are searchable by extracting and indexing text content from conversation events.</p>"},{"location":"reference/api/#google_adk_extras.memory.yaml_file_memory_service.YamlFileMemoryService.__init__","title":"<code>__init__(base_directory='./memory')</code>","text":"<p>Initialize the YAML file memory service.</p> <p>Parameters:</p> Name Type Description Default <code>base_directory</code> <code>str</code> <p>Base directory for storing memory files. Defaults to \"./memory\".</p> <code>'./memory'</code>"},{"location":"reference/api/#google_adk_extras.artifacts.base_custom_artifact_service.BaseCustomArtifactService","title":"<code>BaseCustomArtifactService</code>","text":"<p>               Bases: <code>BaseArtifactService</code>, <code>ABC</code></p> <p>Base class for custom artifact services with common functionality.</p> <p>This abstract base class provides a foundation for implementing custom artifact services with automatic initialization and cleanup handling.</p>"},{"location":"reference/api/#google_adk_extras.artifacts.base_custom_artifact_service.BaseCustomArtifactService.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the base custom artifact service.</p>"},{"location":"reference/api/#google_adk_extras.artifacts.base_custom_artifact_service.BaseCustomArtifactService.cleanup","title":"<code>cleanup()</code>  <code>async</code>","text":"<p>Clean up resources used by the artifact service.</p> <p>This method should be called when the service is no longer needed to ensure proper cleanup of resources.</p>"},{"location":"reference/api/#google_adk_extras.artifacts.base_custom_artifact_service.BaseCustomArtifactService.delete_artifact","title":"<code>delete_artifact(*, app_name, user_id, session_id, filename)</code>  <code>async</code>","text":"<p>Delete an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>app_name</code> <code>str</code> <p>The name of the application.</p> required <code>user_id</code> <code>str</code> <p>The ID of the user.</p> required <code>session_id</code> <code>str</code> <p>The ID of the session.</p> required <code>filename</code> <code>str</code> <p>The name of the file to delete.</p> required <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If deleting the artifact fails.</p>"},{"location":"reference/api/#google_adk_extras.artifacts.base_custom_artifact_service.BaseCustomArtifactService.initialize","title":"<code>initialize()</code>  <code>async</code>","text":"<p>Initialize the artifact service.</p> <p>This method should be called before using the service to ensure any required setup (database connections, etc.) is complete.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If initialization fails.</p>"},{"location":"reference/api/#google_adk_extras.artifacts.base_custom_artifact_service.BaseCustomArtifactService.list_artifact_keys","title":"<code>list_artifact_keys(*, app_name, user_id, session_id)</code>  <code>async</code>","text":"<p>List artifact keys.</p> <p>Parameters:</p> Name Type Description Default <code>app_name</code> <code>str</code> <p>The name of the application.</p> required <code>user_id</code> <code>str</code> <p>The ID of the user.</p> required <code>session_id</code> <code>str</code> <p>The ID of the session.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>A list of artifact keys (filenames).</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If listing artifact keys fails.</p>"},{"location":"reference/api/#google_adk_extras.artifacts.base_custom_artifact_service.BaseCustomArtifactService.list_versions","title":"<code>list_versions(*, app_name, user_id, session_id, filename)</code>  <code>async</code>","text":"<p>List versions of an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>app_name</code> <code>str</code> <p>The name of the application.</p> required <code>user_id</code> <code>str</code> <p>The ID of the user.</p> required <code>session_id</code> <code>str</code> <p>The ID of the session.</p> required <code>filename</code> <code>str</code> <p>The name of the file to list versions for.</p> required <p>Returns:</p> Type Description <code>List[int]</code> <p>A list of version numbers.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If listing versions fails.</p>"},{"location":"reference/api/#google_adk_extras.artifacts.base_custom_artifact_service.BaseCustomArtifactService.load_artifact","title":"<code>load_artifact(*, app_name, user_id, session_id, filename, version=None)</code>  <code>async</code>","text":"<p>Load an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>app_name</code> <code>str</code> <p>The name of the application.</p> required <code>user_id</code> <code>str</code> <p>The ID of the user.</p> required <code>session_id</code> <code>str</code> <p>The ID of the session.</p> required <code>filename</code> <code>str</code> <p>The name of the file to load.</p> required <code>version</code> <code>Optional[int]</code> <p>Optional version number to load. If not provided, the latest version will be loaded.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[Part]</code> <p>The loaded artifact if found, None otherwise.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If loading the artifact fails.</p>"},{"location":"reference/api/#google_adk_extras.artifacts.base_custom_artifact_service.BaseCustomArtifactService.save_artifact","title":"<code>save_artifact(*, app_name, user_id, session_id, filename, artifact)</code>  <code>async</code>","text":"<p>Save an artifact.</p> <p>Parameters:</p> Name Type Description Default <code>app_name</code> <code>str</code> <p>The name of the application.</p> required <code>user_id</code> <code>str</code> <p>The ID of the user.</p> required <code>session_id</code> <code>str</code> <p>The ID of the session.</p> required <code>filename</code> <code>str</code> <p>The name of the file to save.</p> required <code>artifact</code> <code>Part</code> <p>The artifact to save.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The version number of the saved artifact.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If saving the artifact fails.</p>"},{"location":"reference/api/#google_adk_extras.artifacts.local_folder_artifact_service.LocalFolderArtifactService","title":"<code>LocalFolderArtifactService</code>","text":"<p>               Bases: <code>BaseCustomArtifactService</code></p> <p>Local folder-based artifact service implementation.</p> <p>This service stores artifacts in the local file system with full versioning support. Each artifact is stored with its metadata in JSON format and binary data in separate files.</p>"},{"location":"reference/api/#google_adk_extras.artifacts.local_folder_artifact_service.LocalFolderArtifactService.__init__","title":"<code>__init__(base_directory='./artifacts')</code>","text":"<p>Initialize the local folder artifact service.</p> <p>Parameters:</p> Name Type Description Default <code>base_directory</code> <code>str</code> <p>Base directory for storing artifacts. Defaults to \"./artifacts\".</p> <code>'./artifacts'</code>"},{"location":"reference/api/#google_adk_extras.artifacts.s3_artifact_service.S3ArtifactService","title":"<code>S3ArtifactService</code>","text":"<p>               Bases: <code>BaseCustomArtifactService</code></p> <p>S3-compatible artifact service implementation.</p> <p>This service stores artifacts in AWS S3 or S3-compatible storage services. It supports versioning and works with any S3-compatible service including AWS S3, MinIO, Google Cloud Storage, etc.</p>"},{"location":"reference/api/#google_adk_extras.artifacts.s3_artifact_service.S3ArtifactService.__init__","title":"<code>__init__(bucket_name, endpoint_url=None, region_name=None, aws_access_key_id=None, aws_secret_access_key=None, prefix='adk-artifacts')</code>","text":"<p>Initialize the S3 artifact service.</p> <p>Parameters:</p> Name Type Description Default <code>bucket_name</code> <code>str</code> <p>S3 bucket name.</p> required <code>endpoint_url</code> <code>Optional[str]</code> <p>S3 endpoint URL (for non-AWS S3 services like MinIO).</p> <code>None</code> <code>region_name</code> <code>Optional[str]</code> <p>AWS region name.</p> <code>None</code> <code>aws_access_key_id</code> <code>Optional[str]</code> <p>AWS access key ID.</p> <code>None</code> <code>aws_secret_access_key</code> <code>Optional[str]</code> <p>AWS secret access key.</p> <code>None</code> <code>prefix</code> <code>str</code> <p>Prefix for artifact storage paths. Defaults to \"adk-artifacts\".</p> <code>'adk-artifacts'</code>"},{"location":"reference/api/#google_adk_extras.artifacts.sql_artifact_service.SQLArtifactModel","title":"<code>SQLArtifactModel</code>","text":"<p>               Bases: <code>Base</code></p> <p>SQLAlchemy model for storing artifacts.</p>"},{"location":"reference/api/#google_adk_extras.artifacts.sql_artifact_service.SQLArtifactService","title":"<code>SQLArtifactService</code>","text":"<p>               Bases: <code>BaseCustomArtifactService</code></p> <p>SQL-based artifact service implementation.</p> <p>This service stores artifacts in a SQL database using SQLAlchemy. It supports various SQL databases including SQLite, PostgreSQL, and MySQL. Artifacts are stored with full versioning support.</p>"},{"location":"reference/api/#google_adk_extras.artifacts.sql_artifact_service.SQLArtifactService.__init__","title":"<code>__init__(database_url)</code>","text":"<p>Initialize the SQL artifact service.</p> <p>Parameters:</p> Name Type Description Default <code>database_url</code> <code>str</code> <p>Database connection string (e.g., 'sqlite:///artifacts.db')</p> required"},{"location":"reference/api/#google_adk_extras.artifacts.mongo_artifact_service.MongoArtifactService","title":"<code>MongoArtifactService</code>","text":"<p>               Bases: <code>BaseCustomArtifactService</code></p> <p>MongoDB-based artifact service implementation.</p>"},{"location":"reference/api/#google_adk_extras.artifacts.mongo_artifact_service.MongoArtifactService.__init__","title":"<code>__init__(connection_string, database_name='adk_artifacts')</code>","text":"<p>Initialize the MongoDB artifact service.</p> <p>Parameters:</p> Name Type Description Default <code>connection_string</code> <code>str</code> <p>MongoDB connection string</p> required <code>database_name</code> <code>str</code> <p>Name of the database to use</p> <code>'adk_artifacts'</code>"},{"location":"reference/api/#credentials","title":"Credentials","text":"<p>Base class for custom credential services.</p> <p>Google OAuth2 credential service implementation.</p> <p>GitHub OAuth2 credential service implementation.</p> <p>Microsoft OAuth2 credential service implementation.</p> <p>X (Twitter) OAuth2 credential service implementation.</p> <p>JWT credential service implementation.</p> <p>HTTP Basic Auth credential service implementation.</p>"},{"location":"reference/api/#google_adk_extras.credentials.base_custom_credential_service.BaseCustomCredentialService","title":"<code>BaseCustomCredentialService</code>","text":"<p>               Bases: <code>BaseCredentialService</code>, <code>ABC</code></p> <p>Base class for custom credential services with common functionality.</p> <p>This abstract base class provides a foundation for implementing custom credential services with automatic initialization and cleanup handling.</p>"},{"location":"reference/api/#google_adk_extras.credentials.base_custom_credential_service.BaseCustomCredentialService.__init__","title":"<code>__init__()</code>","text":"<p>Initialize the base custom credential service.</p>"},{"location":"reference/api/#google_adk_extras.credentials.base_custom_credential_service.BaseCustomCredentialService.cleanup","title":"<code>cleanup()</code>  <code>async</code>","text":"<p>Clean up resources used by the credential service.</p> <p>This method should be called when the service is no longer needed to ensure proper cleanup of any resources.</p>"},{"location":"reference/api/#google_adk_extras.credentials.base_custom_credential_service.BaseCustomCredentialService.initialize","title":"<code>initialize()</code>  <code>async</code>","text":"<p>Initialize the credential service.</p> <p>This method should be called before using the service to ensure any required setup (connections, validations, etc.) is complete.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If initialization fails.</p>"},{"location":"reference/api/#google_adk_extras.credentials.base_custom_credential_service.BaseCustomCredentialService.load_credential","title":"<code>load_credential(auth_config, callback_context)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Load the credential by auth config and current callback context.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config which contains the auth scheme and auth credential information. auth_config.get_credential_key will be used to build the key to load the credential.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The context of the current invocation when the tool is trying to load the credential.</p> required <p>Returns:</p> Type Description <code>Optional[AuthCredential]</code> <p>Optional[AuthCredential]: the credential saved in the store, or None if not found.</p>"},{"location":"reference/api/#google_adk_extras.credentials.base_custom_credential_service.BaseCustomCredentialService.save_credential","title":"<code>save_credential(auth_config, callback_context)</code>  <code>abstractmethod</code> <code>async</code>","text":"<p>Save the exchanged_auth_credential in auth config.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config which contains the auth scheme and auth credential information. auth_config.get_credential_key will be used to build the key to save the credential.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The context of the current invocation when the tool is trying to save the credential.</p> required"},{"location":"reference/api/#google_adk_extras.credentials.google_oauth2_credential_service.GoogleOAuth2CredentialService","title":"<code>GoogleOAuth2CredentialService</code>","text":"<p>               Bases: <code>BaseCustomCredentialService</code></p> <p>Google OAuth2 credential service for handling Google authentication flows.</p> <p>This service provides pre-configured OAuth2 flows for Google services including Gmail, Calendar, Drive, and other Google APIs.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The Google OAuth2 client ID from Google Cloud Console.</p> required <code>client_secret</code> <code>str</code> <p>The Google OAuth2 client secret from Google Cloud Console.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>List of OAuth2 scopes to request. Common scopes include: - \"openid\" - OpenID Connect authentication - \"email\" - Access to email address - \"profile\" - Access to basic profile info - \"https://www.googleapis.com/auth/calendar\" - Google Calendar access - \"https://www.googleapis.com/auth/gmail.readonly\" - Gmail read access - \"https://www.googleapis.com/auth/drive\" - Google Drive access</p> <code>None</code> <code>use_session_state</code> <code>bool</code> <p>If True, stores credentials in session state. If False, uses in-memory storage. Default is True for persistence.</p> <code>True</code> Example <pre><code>credential_service = GoogleOAuth2CredentialService(\n    client_id=\"your-client-id.apps.googleusercontent.com\",\n    client_secret=\"your-client-secret\",\n    scopes=[\"openid\", \"email\", \"https://www.googleapis.com/auth/calendar\"]\n)\nawait credential_service.initialize()\n\n# Use with Runner\nrunner = Runner(\n    agent=agent,\n    session_service=session_service,\n    credential_service=credential_service,\n    app_name=\"my_app\"\n)\n</code></pre>"},{"location":"reference/api/#google_adk_extras.credentials.google_oauth2_credential_service.GoogleOAuth2CredentialService.__init__","title":"<code>__init__(client_id, client_secret, scopes=None, use_session_state=True)</code>","text":"<p>Initialize the Google OAuth2 credential service.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>Google OAuth2 client ID.</p> required <code>client_secret</code> <code>str</code> <p>Google OAuth2 client secret.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>List of OAuth2 scopes to request.</p> <code>None</code> <code>use_session_state</code> <code>bool</code> <p>Whether to use session state for credential storage.</p> <code>True</code>"},{"location":"reference/api/#google_adk_extras.credentials.google_oauth2_credential_service.GoogleOAuth2CredentialService.create_auth_config","title":"<code>create_auth_config()</code>","text":"<p>Create an AuthConfig for Google OAuth2 authentication.</p> <p>Returns:</p> Name Type Description <code>AuthConfig</code> <code>AuthConfig</code> <p>Configured auth config for Google OAuth2 flow.</p>"},{"location":"reference/api/#google_adk_extras.credentials.google_oauth2_credential_service.GoogleOAuth2CredentialService.get_supported_scopes","title":"<code>get_supported_scopes()</code>","text":"<p>Get dictionary of supported Google OAuth2 scopes and their descriptions.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Mapping of scope names to descriptions.</p>"},{"location":"reference/api/#google_adk_extras.credentials.google_oauth2_credential_service.GoogleOAuth2CredentialService.load_credential","title":"<code>load_credential(auth_config, callback_context)</code>  <code>async</code>","text":"<p>Load Google OAuth2 credential from storage.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config containing credential key information.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The current callback context.</p> required <p>Returns:</p> Type Description <code>Optional[AuthCredential]</code> <p>Optional[AuthCredential]: The stored credential or None if not found.</p>"},{"location":"reference/api/#google_adk_extras.credentials.google_oauth2_credential_service.GoogleOAuth2CredentialService.save_credential","title":"<code>save_credential(auth_config, callback_context)</code>  <code>async</code>","text":"<p>Save Google OAuth2 credential to storage.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config containing the credential to save.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The current callback context.</p> required"},{"location":"reference/api/#google_adk_extras.credentials.github_oauth2_credential_service.GitHubOAuth2CredentialService","title":"<code>GitHubOAuth2CredentialService</code>","text":"<p>               Bases: <code>BaseCustomCredentialService</code></p> <p>GitHub OAuth2 credential service for handling GitHub authentication flows.</p> <p>This service provides pre-configured OAuth2 flows for GitHub APIs including repository access, user information, and organization management.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The GitHub OAuth2 client ID from GitHub Developer Settings.</p> required <code>client_secret</code> <code>str</code> <p>The GitHub OAuth2 client secret from GitHub Developer Settings.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>List of OAuth2 scopes to request. Common scopes include: - \"user\" - Access to user profile information - \"user:email\" - Access to user email addresses - \"repo\" - Full access to repositories - \"public_repo\" - Access to public repositories only - \"admin:org\" - Full access to organization data - \"read:org\" - Read access to organization data - \"notifications\" - Access to notifications</p> <code>None</code> <code>use_session_state</code> <code>bool</code> <p>If True, stores credentials in session state. If False, uses in-memory storage. Default is True for persistence.</p> <code>True</code> Example <pre><code>credential_service = GitHubOAuth2CredentialService(\n    client_id=\"your-github-client-id\",\n    client_secret=\"your-github-client-secret\", \n    scopes=[\"user\", \"repo\", \"read:org\"]\n)\nawait credential_service.initialize()\n\n# Use with Runner\nrunner = Runner(\n    agent=agent,\n    session_service=session_service,\n    credential_service=credential_service,\n    app_name=\"my_app\"\n)\n</code></pre>"},{"location":"reference/api/#google_adk_extras.credentials.github_oauth2_credential_service.GitHubOAuth2CredentialService.__init__","title":"<code>__init__(client_id, client_secret, scopes=None, use_session_state=True)</code>","text":"<p>Initialize the GitHub OAuth2 credential service.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>GitHub OAuth2 client ID.</p> required <code>client_secret</code> <code>str</code> <p>GitHub OAuth2 client secret.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>List of OAuth2 scopes to request.</p> <code>None</code> <code>use_session_state</code> <code>bool</code> <p>Whether to use session state for credential storage.</p> <code>True</code>"},{"location":"reference/api/#google_adk_extras.credentials.github_oauth2_credential_service.GitHubOAuth2CredentialService.create_auth_config","title":"<code>create_auth_config()</code>","text":"<p>Create an AuthConfig for GitHub OAuth2 authentication.</p> <p>Returns:</p> Name Type Description <code>AuthConfig</code> <code>AuthConfig</code> <p>Configured auth config for GitHub OAuth2 flow.</p>"},{"location":"reference/api/#google_adk_extras.credentials.github_oauth2_credential_service.GitHubOAuth2CredentialService.get_supported_scopes","title":"<code>get_supported_scopes()</code>","text":"<p>Get dictionary of supported GitHub OAuth2 scopes and their descriptions.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Mapping of scope names to descriptions.</p>"},{"location":"reference/api/#google_adk_extras.credentials.github_oauth2_credential_service.GitHubOAuth2CredentialService.load_credential","title":"<code>load_credential(auth_config, callback_context)</code>  <code>async</code>","text":"<p>Load GitHub OAuth2 credential from storage.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config containing credential key information.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The current callback context.</p> required <p>Returns:</p> Type Description <code>Optional[AuthCredential]</code> <p>Optional[AuthCredential]: The stored credential or None if not found.</p>"},{"location":"reference/api/#google_adk_extras.credentials.github_oauth2_credential_service.GitHubOAuth2CredentialService.save_credential","title":"<code>save_credential(auth_config, callback_context)</code>  <code>async</code>","text":"<p>Save GitHub OAuth2 credential to storage.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config containing the credential to save.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The current callback context.</p> required"},{"location":"reference/api/#google_adk_extras.credentials.microsoft_oauth2_credential_service.MicrosoftOAuth2CredentialService","title":"<code>MicrosoftOAuth2CredentialService</code>","text":"<p>               Bases: <code>BaseCustomCredentialService</code></p> <p>Microsoft OAuth2 credential service for handling Microsoft authentication flows.</p> <p>This service provides pre-configured OAuth2 flows for Microsoft Graph API including Outlook, Teams, OneDrive, and other Microsoft 365 services.</p> <p>Parameters:</p> Name Type Description Default <code>tenant_id</code> <code>str</code> <p>The Azure AD tenant ID. Use \"common\" for multi-tenant applications.</p> required <code>client_id</code> <code>str</code> <p>The Microsoft OAuth2 client ID from Azure AD App Registration.</p> required <code>client_secret</code> <code>str</code> <p>The Microsoft OAuth2 client secret from Azure AD App Registration.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>List of OAuth2 scopes to request. Common scopes include: - \"User.Read\" - Read user profile - \"Mail.Read\" - Read user's mail - \"Mail.ReadWrite\" - Read and write user's mail - \"Calendars.Read\" - Read user's calendars - \"Calendars.ReadWrite\" - Read and write user's calendars - \"Files.Read\" - Read user's files - \"Files.ReadWrite\" - Read and write user's files</p> <code>None</code> <code>use_session_state</code> <code>bool</code> <p>If True, stores credentials in session state. If False, uses in-memory storage. Default is True for persistence.</p> <code>True</code> Example <pre><code>credential_service = MicrosoftOAuth2CredentialService(\n    tenant_id=\"common\",  # or specific tenant ID\n    client_id=\"your-azure-client-id\",\n    client_secret=\"your-azure-client-secret\",\n    scopes=[\"User.Read\", \"Mail.Read\", \"Calendars.ReadWrite\"]\n)\nawait credential_service.initialize()\n\n# Use with Runner\nrunner = Runner(\n    agent=agent,\n    session_service=session_service,\n    credential_service=credential_service,\n    app_name=\"my_app\"\n)\n</code></pre>"},{"location":"reference/api/#google_adk_extras.credentials.microsoft_oauth2_credential_service.MicrosoftOAuth2CredentialService.__init__","title":"<code>__init__(tenant_id, client_id, client_secret, scopes=None, use_session_state=True)</code>","text":"<p>Initialize the Microsoft OAuth2 credential service.</p> <p>Parameters:</p> Name Type Description Default <code>tenant_id</code> <code>str</code> <p>Azure AD tenant ID or \"common\" for multi-tenant.</p> required <code>client_id</code> <code>str</code> <p>Microsoft OAuth2 client ID.</p> required <code>client_secret</code> <code>str</code> <p>Microsoft OAuth2 client secret.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>List of OAuth2 scopes to request.</p> <code>None</code> <code>use_session_state</code> <code>bool</code> <p>Whether to use session state for credential storage.</p> <code>True</code>"},{"location":"reference/api/#google_adk_extras.credentials.microsoft_oauth2_credential_service.MicrosoftOAuth2CredentialService.create_auth_config","title":"<code>create_auth_config()</code>","text":"<p>Create an AuthConfig for Microsoft OAuth2 authentication.</p> <p>Returns:</p> Name Type Description <code>AuthConfig</code> <code>AuthConfig</code> <p>Configured auth config for Microsoft OAuth2 flow.</p>"},{"location":"reference/api/#google_adk_extras.credentials.microsoft_oauth2_credential_service.MicrosoftOAuth2CredentialService.get_supported_scopes","title":"<code>get_supported_scopes()</code>","text":"<p>Get dictionary of supported Microsoft OAuth2 scopes and their descriptions.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Mapping of scope names to descriptions.</p>"},{"location":"reference/api/#google_adk_extras.credentials.microsoft_oauth2_credential_service.MicrosoftOAuth2CredentialService.load_credential","title":"<code>load_credential(auth_config, callback_context)</code>  <code>async</code>","text":"<p>Load Microsoft OAuth2 credential from storage.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config containing credential key information.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The current callback context.</p> required <p>Returns:</p> Type Description <code>Optional[AuthCredential]</code> <p>Optional[AuthCredential]: The stored credential or None if not found.</p>"},{"location":"reference/api/#google_adk_extras.credentials.microsoft_oauth2_credential_service.MicrosoftOAuth2CredentialService.save_credential","title":"<code>save_credential(auth_config, callback_context)</code>  <code>async</code>","text":"<p>Save Microsoft OAuth2 credential to storage.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config containing the credential to save.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The current callback context.</p> required"},{"location":"reference/api/#google_adk_extras.credentials.x_oauth2_credential_service.XOAuth2CredentialService","title":"<code>XOAuth2CredentialService</code>","text":"<p>               Bases: <code>BaseCustomCredentialService</code></p> <p>X (Twitter) OAuth2 credential service for handling X API authentication flows.</p> <p>This service provides pre-configured OAuth2 flows for X API v2 including reading tweets, posting content, and managing user data.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>The X OAuth2 client ID from X Developer Portal.</p> required <code>client_secret</code> <code>str</code> <p>The X OAuth2 client secret from X Developer Portal.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>List of OAuth2 scopes to request. Common scopes include: - \"tweet.read\" - Read tweets - \"tweet.write\" - Write tweets - \"tweet.moderate.write\" - Moderate tweets - \"users.read\" - Read user information - \"follows.read\" - Read follows information - \"follows.write\" - Manage follows - \"offline.access\" - Maintain access when user is offline - \"space.read\" - Read Spaces information - \"mute.read\" - Read muted accounts - \"mute.write\" - Manage muted accounts - \"like.read\" - Read likes information - \"like.write\" - Manage likes - \"list.read\" - Read list information - \"list.write\" - Manage lists - \"block.read\" - Read blocked accounts - \"block.write\" - Manage blocked accounts</p> <code>None</code> <code>use_session_state</code> <code>bool</code> <p>If True, stores credentials in session state. If False, uses in-memory storage. Default is True for persistence.</p> <code>True</code> Example <pre><code>credential_service = XOAuth2CredentialService(\n    client_id=\"your-x-client-id\",\n    client_secret=\"your-x-client-secret\",\n    scopes=[\"tweet.read\", \"tweet.write\", \"users.read\", \"offline.access\"]\n)\nawait credential_service.initialize()\n\n# Use with Runner\nrunner = Runner(\n    agent=agent,\n    session_service=session_service,\n    credential_service=credential_service,\n    app_name=\"my_app\"\n)\n</code></pre>"},{"location":"reference/api/#google_adk_extras.credentials.x_oauth2_credential_service.XOAuth2CredentialService.__init__","title":"<code>__init__(client_id, client_secret, scopes=None, use_session_state=True)</code>","text":"<p>Initialize the X OAuth2 credential service.</p> <p>Parameters:</p> Name Type Description Default <code>client_id</code> <code>str</code> <p>X OAuth2 client ID.</p> required <code>client_secret</code> <code>str</code> <p>X OAuth2 client secret.</p> required <code>scopes</code> <code>Optional[List[str]]</code> <p>List of OAuth2 scopes to request.</p> <code>None</code> <code>use_session_state</code> <code>bool</code> <p>Whether to use session state for credential storage.</p> <code>True</code>"},{"location":"reference/api/#google_adk_extras.credentials.x_oauth2_credential_service.XOAuth2CredentialService.create_auth_config","title":"<code>create_auth_config()</code>","text":"<p>Create an AuthConfig for X OAuth2 authentication.</p> <p>Returns:</p> Name Type Description <code>AuthConfig</code> <code>AuthConfig</code> <p>Configured auth config for X OAuth2 flow.</p>"},{"location":"reference/api/#google_adk_extras.credentials.x_oauth2_credential_service.XOAuth2CredentialService.get_supported_scopes","title":"<code>get_supported_scopes()</code>","text":"<p>Get dictionary of supported X OAuth2 scopes and their descriptions.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Mapping of scope names to descriptions.</p>"},{"location":"reference/api/#google_adk_extras.credentials.x_oauth2_credential_service.XOAuth2CredentialService.load_credential","title":"<code>load_credential(auth_config, callback_context)</code>  <code>async</code>","text":"<p>Load X OAuth2 credential from storage.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config containing credential key information.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The current callback context.</p> required <p>Returns:</p> Type Description <code>Optional[AuthCredential]</code> <p>Optional[AuthCredential]: The stored credential or None if not found.</p>"},{"location":"reference/api/#google_adk_extras.credentials.x_oauth2_credential_service.XOAuth2CredentialService.save_credential","title":"<code>save_credential(auth_config, callback_context)</code>  <code>async</code>","text":"<p>Save X OAuth2 credential to storage.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config containing the credential to save.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The current callback context.</p> required"},{"location":"reference/api/#google_adk_extras.credentials.jwt_credential_service.JWTCredentialService","title":"<code>JWTCredentialService</code>","text":"<p>               Bases: <code>BaseCustomCredentialService</code></p> <p>JWT credential service for handling JSON Web Token authentication.</p> <p>This service generates and manages JWT tokens for API authentication. It supports both short-lived and long-lived tokens with automatic refresh.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>The secret key used to sign JWT tokens.</p> required <code>algorithm</code> <code>str</code> <p>The algorithm used for JWT signing. Default is 'HS256'.</p> <code>'HS256'</code> <code>issuer</code> <code>Optional[str]</code> <p>The issuer of the JWT token. Optional.</p> <code>None</code> <code>audience</code> <code>Optional[str]</code> <p>The intended audience of the JWT token. Optional.</p> <code>None</code> <code>expiration_minutes</code> <code>int</code> <p>Token expiration time in minutes. Default is 60 minutes.</p> <code>60</code> <code>custom_claims</code> <code>Optional[Dict[str, Any]]</code> <p>Additional custom claims to include in the JWT payload.</p> <code>None</code> <code>use_session_state</code> <code>bool</code> <p>If True, stores credentials in session state. If False, uses in-memory storage. Default is True for persistence.</p> <code>True</code> Example <pre><code>credential_service = JWTCredentialService(\n    secret=\"your-jwt-secret\",\n    algorithm=\"HS256\",\n    issuer=\"my-app\",\n    audience=\"api.example.com\",\n    expiration_minutes=120,\n    custom_claims={\"role\": \"admin\", \"permissions\": [\"read\", \"write\"]}\n)\nawait credential_service.initialize()\n\n# Use with Runner\nrunner = Runner(\n    agent=agent,\n    session_service=session_service,\n    credential_service=credential_service,\n    app_name=\"my_app\"\n)\n</code></pre>"},{"location":"reference/api/#google_adk_extras.credentials.jwt_credential_service.JWTCredentialService.__init__","title":"<code>__init__(secret, algorithm='HS256', issuer=None, audience=None, expiration_minutes=60, custom_claims=None, use_session_state=True)</code>","text":"<p>Initialize the JWT credential service.</p> <p>Parameters:</p> Name Type Description Default <code>secret</code> <code>str</code> <p>JWT signing secret.</p> required <code>algorithm</code> <code>str</code> <p>JWT signing algorithm.</p> <code>'HS256'</code> <code>issuer</code> <code>Optional[str]</code> <p>JWT issuer.</p> <code>None</code> <code>audience</code> <code>Optional[str]</code> <p>JWT audience.</p> <code>None</code> <code>expiration_minutes</code> <code>int</code> <p>Token expiration in minutes.</p> <code>60</code> <code>custom_claims</code> <code>Optional[Dict[str, Any]]</code> <p>Additional claims to include in JWT.</p> <code>None</code> <code>use_session_state</code> <code>bool</code> <p>Whether to use session state for credential storage.</p> <code>True</code>"},{"location":"reference/api/#google_adk_extras.credentials.jwt_credential_service.JWTCredentialService.create_auth_config","title":"<code>create_auth_config(user_id, additional_claims=None)</code>","text":"<p>Create an AuthConfig with a generated JWT token.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>The user ID for the JWT token.</p> required <code>additional_claims</code> <code>Optional[Dict[str, Any]]</code> <p>Additional claims for this specific token.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>AuthConfig</code> <code>AuthConfig</code> <p>Configured auth config with JWT Bearer token.</p>"},{"location":"reference/api/#google_adk_extras.credentials.jwt_credential_service.JWTCredentialService.generate_jwt_token","title":"<code>generate_jwt_token(user_id, additional_claims=None)</code>","text":"<p>Generate a JWT token for the specified user.</p> <p>Parameters:</p> Name Type Description Default <code>user_id</code> <code>str</code> <p>The user ID to include in the JWT token.</p> required <code>additional_claims</code> <code>Optional[Dict[str, Any]]</code> <p>Additional claims to include in this specific token.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The generated JWT token.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the service is not initialized.</p>"},{"location":"reference/api/#google_adk_extras.credentials.jwt_credential_service.JWTCredentialService.get_token_info","title":"<code>get_token_info(token)</code>","text":"<p>Get information about a JWT token without full verification.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The JWT token to inspect.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: Token information including claims and expiration.</p>"},{"location":"reference/api/#google_adk_extras.credentials.jwt_credential_service.JWTCredentialService.is_token_expired","title":"<code>is_token_expired(token)</code>","text":"<p>Check if a JWT token is expired without raising an exception.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The JWT token to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the token is expired, False otherwise.</p>"},{"location":"reference/api/#google_adk_extras.credentials.jwt_credential_service.JWTCredentialService.load_credential","title":"<code>load_credential(auth_config, callback_context)</code>  <code>async</code>","text":"<p>Load JWT credential from storage and refresh if expired.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config containing credential key information.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The current callback context.</p> required <p>Returns:</p> Type Description <code>Optional[AuthCredential]</code> <p>Optional[AuthCredential]: The stored credential or refreshed credential.</p>"},{"location":"reference/api/#google_adk_extras.credentials.jwt_credential_service.JWTCredentialService.save_credential","title":"<code>save_credential(auth_config, callback_context)</code>  <code>async</code>","text":"<p>Save JWT credential to storage.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config containing the credential to save.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The current callback context.</p> required"},{"location":"reference/api/#google_adk_extras.credentials.jwt_credential_service.JWTCredentialService.verify_jwt_token","title":"<code>verify_jwt_token(token)</code>","text":"<p>Verify and decode a JWT token.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>str</code> <p>The JWT token to verify.</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: The decoded token payload.</p> <p>Raises:</p> Type Description <code>InvalidTokenError</code> <p>If the token is invalid or expired.</p> <code>RuntimeError</code> <p>If the service is not initialized.</p>"},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthCredentialService","title":"<code>HTTPBasicAuthCredentialService</code>","text":"<p>               Bases: <code>BaseCustomCredentialService</code></p> <p>HTTP Basic Auth credential service for username/password authentication.</p> <p>This service manages HTTP Basic Authentication credentials, encoding username and password combinations for API authentication.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username for basic authentication.</p> required <code>password</code> <code>str</code> <p>The password for basic authentication.</p> required <code>realm</code> <code>Optional[str]</code> <p>Optional realm parameter for HTTP Basic Auth.</p> <code>None</code> <code>use_session_state</code> <code>bool</code> <p>If True, stores credentials in session state. If False, uses in-memory storage. Default is True for persistence.</p> <code>True</code> Example <pre><code>credential_service = HTTPBasicAuthCredentialService(\n    username=\"api_user\",\n    password=\"api_password\",\n    realm=\"API Access\"\n)\nawait credential_service.initialize()\n\n# Use with Runner\nrunner = Runner(\n    agent=agent,\n    session_service=session_service,\n    credential_service=credential_service,\n    app_name=\"my_app\"\n)\n</code></pre> Security Note <p>Basic Auth transmits credentials in base64 encoding, which is not encryption. Always use HTTPS when using Basic Auth to protect credentials in transit.</p>"},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthCredentialService.__init__","title":"<code>__init__(username, password, realm=None, use_session_state=True)</code>","text":"<p>Initialize the HTTP Basic Auth credential service.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>Username for basic authentication.</p> required <code>password</code> <code>str</code> <p>Password for basic authentication.</p> required <code>realm</code> <code>Optional[str]</code> <p>Optional realm for HTTP Basic Auth.</p> <code>None</code> <code>use_session_state</code> <code>bool</code> <p>Whether to use session state for credential storage.</p> <code>True</code>"},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthCredentialService.create_auth_config","title":"<code>create_auth_config()</code>","text":"<p>Create an AuthConfig for HTTP Basic Authentication.</p> <p>Returns:</p> Name Type Description <code>AuthConfig</code> <code>AuthConfig</code> <p>Configured auth config for HTTP Basic Auth.</p>"},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthCredentialService.decode_basic_auth","title":"<code>decode_basic_auth(auth_header)</code>","text":"<p>Decode HTTP Basic Auth header to extract username and password.</p> <p>Parameters:</p> Name Type Description Default <code>auth_header</code> <code>str</code> <p>The Authorization header value.</p> required <p>Returns:</p> Type Description <code>tuple[str, str]</code> <p>tuple[str, str]: Tuple of (username, password).</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the auth header is invalid.</p>"},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthCredentialService.encode_basic_auth","title":"<code>encode_basic_auth(username, password)</code>","text":"<p>Encode username and password for HTTP Basic Auth.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to encode.</p> required <code>password</code> <code>str</code> <p>The password to encode.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>Base64 encoded credentials in format \"Basic \"."},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthCredentialService.get_auth_header","title":"<code>get_auth_header()</code>","text":"<p>Get the Authorization header value for HTTP Basic Auth.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The complete Authorization header value.</p>"},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthCredentialService.get_credential_info","title":"<code>get_credential_info()</code>","text":"<p>Get information about the configured credentials (without passwords).</p> <p>Returns:</p> Type Description <code>Dict[str, str]</code> <p>Dict[str, str]: Credential information (excluding sensitive data).</p>"},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthCredentialService.load_credential","title":"<code>load_credential(auth_config, callback_context)</code>  <code>async</code>","text":"<p>Load HTTP Basic Auth credential from storage.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config containing credential key information.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The current callback context.</p> required <p>Returns:</p> Type Description <code>Optional[AuthCredential]</code> <p>Optional[AuthCredential]: The stored credential or None if not found.</p>"},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthCredentialService.save_credential","title":"<code>save_credential(auth_config, callback_context)</code>  <code>async</code>","text":"<p>Save HTTP Basic Auth credential to storage.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config containing the credential to save.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The current callback context.</p> required"},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthCredentialService.validate_credentials","title":"<code>validate_credentials(test_username, test_password)</code>","text":"<p>Validate if provided credentials match the configured ones.</p> <p>Parameters:</p> Name Type Description Default <code>test_username</code> <code>str</code> <p>Username to validate.</p> required <code>test_password</code> <code>str</code> <p>Password to validate.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if credentials match, False otherwise.</p>"},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthWithCredentialsService","title":"<code>HTTPBasicAuthWithCredentialsService</code>","text":"<p>               Bases: <code>BaseCustomCredentialService</code></p> <p>HTTP Basic Auth service that accepts multiple username/password pairs.</p> <p>This variant allows managing multiple sets of credentials, useful for scenarios where different users or contexts require different credentials.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <code>Dict[str, str]</code> <p>Dictionary mapping usernames to passwords.</p> required <code>default_username</code> <code>Optional[str]</code> <p>Default username to use if not specified.</p> <code>None</code> <code>realm</code> <code>Optional[str]</code> <p>Optional realm parameter for HTTP Basic Auth.</p> <code>None</code> <code>use_session_state</code> <code>bool</code> <p>If True, stores credentials in session state. If False, uses in-memory storage. Default is True for persistence.</p> <code>True</code> Example <pre><code>credential_service = HTTPBasicAuthWithCredentialsService(\n    credentials={\n        \"admin\": \"admin_password\",\n        \"user1\": \"user1_password\",\n        \"api_client\": \"api_secret\"\n    },\n    default_username=\"api_client\"\n)\nawait credential_service.initialize()\n</code></pre>"},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthWithCredentialsService.__init__","title":"<code>__init__(credentials, default_username=None, realm=None, use_session_state=True)</code>","text":"<p>Initialize the multi-credential HTTP Basic Auth service.</p> <p>Parameters:</p> Name Type Description Default <code>credentials</code> <code>Dict[str, str]</code> <p>Dictionary of username -&gt; password mappings.</p> required <code>default_username</code> <code>Optional[str]</code> <p>Default username to use.</p> <code>None</code> <code>realm</code> <code>Optional[str]</code> <p>Optional realm for HTTP Basic Auth.</p> <code>None</code> <code>use_session_state</code> <code>bool</code> <p>Whether to use session state for credential storage.</p> <code>True</code>"},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthWithCredentialsService.create_auth_config","title":"<code>create_auth_config(username=None)</code>","text":"<p>Create an AuthConfig for HTTP Basic Authentication.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>Optional[str]</code> <p>Username to use. If None, uses default_username.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>AuthConfig</code> <code>AuthConfig</code> <p>Configured auth config for HTTP Basic Auth.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If username is not found in credentials.</p>"},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthWithCredentialsService.get_available_usernames","title":"<code>get_available_usernames()</code>","text":"<p>Get list of available usernames.</p> <p>Returns:</p> Type Description <code>list[str]</code> <p>list[str]: List of configured usernames.</p>"},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthWithCredentialsService.load_credential","title":"<code>load_credential(auth_config, callback_context)</code>  <code>async</code>","text":"<p>Load HTTP Basic Auth credential from storage.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config containing credential key information.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The current callback context.</p> required <p>Returns:</p> Type Description <code>Optional[AuthCredential]</code> <p>Optional[AuthCredential]: The stored credential or None if not found.</p>"},{"location":"reference/api/#google_adk_extras.credentials.http_basic_auth_credential_service.HTTPBasicAuthWithCredentialsService.save_credential","title":"<code>save_credential(auth_config, callback_context)</code>  <code>async</code>","text":"<p>Save HTTP Basic Auth credential to storage.</p> <p>Parameters:</p> Name Type Description Default <code>auth_config</code> <code>AuthConfig</code> <p>The auth config containing the credential to save.</p> required <code>callback_context</code> <code>CallbackContext</code> <p>The current callback context.</p> required"},{"location":"reference/config/","title":"Configuration Reference","text":""},{"location":"reference/config/#enhancedrunconfig","title":"EnhancedRunConfig","text":"<p>YAML fields (selected):</p> <ul> <li><code>streaming_mode</code>: ADK streaming mode (e.g., <code>NONE</code>)</li> <li><code>max_llm_calls</code>: integer limit</li> <li><code>tool_timeouts</code>: <code>{ mcp_tools, openapi_tools, function_tools, ... }</code></li> <li><code>retry_policies</code>: map of <code>{ name: { max_attempts, strategy, base_delay, ... } }</code></li> <li><code>a2a_config</code>: timeouts, retry, circuit breaker for A2A</li> <li><code>enable_circuit_breaker</code>: boolean</li> <li><code>enable_tool_registry</code> / <code>enable_agent_registry</code>: booleans</li> <li><code>max_concurrent_tools</code>, <code>tool_execution_queue_size</code></li> <li><code>debug</code>: <code>{ enabled, trace_agent_flow, trace_tool_execution, performance_profiling, log_level }</code></li> </ul> <p>Example:</p> <pre><code>max_llm_calls: 200\ntool_timeouts:\n  function_tools: 10.0\nretry_policies:\n  default:\n    max_attempts: 3\ndebug:\n  enabled: true\n</code></pre>"},{"location":"reference/config/#registryconfig-agenttool","title":"RegistryConfig (Agent/Tool)","text":"<p>Common fields:</p> <ul> <li><code>caching</code>: <code>{ enabled, default_ttl, cleanup_interval }</code></li> <li><code>health_monitoring</code>: <code>{ enabled, check_interval, failure_threshold, recovery_threshold }</code></li> <li><code>events</code>: <code>{ enabled, max_listeners, async_delivery }</code></li> <li><code>auto_startup</code>, <code>graceful_shutdown_timeout</code></li> </ul> <p>Tool registry extras:</p> <ul> <li><code>strategy_fallback_chain</code>, <code>default_timeout</code>, <code>max_concurrent_executions</code></li> </ul>"},{"location":"tutorials/deploy-docker/","title":"Tutorial: Deploy with Docker","text":"<p>Containerize and deploy the FastAPI app.</p> <p>Steps</p> <p>1) Create a minimal <code>Dockerfile</code> using <code>uvicorn</code>. 2) Bake environment variables for DBs and credentials via secrets. 3) Use a multi-stage build or slim base images. 4) Run behind a reverse proxy (e.g., Cloud Run, ECS, K8s ingress).</p> <p>Example Dockerfile</p> <pre><code>FROM python:3.12-slim\nWORKDIR /app\nCOPY . .\nRUN pip install --no-cache-dir . &amp;&amp; pip install --no-cache-dir uvicorn\nCMD [\"uvicorn\", \"my_app:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8080\"]\n</code></pre> <p>Security &amp; Perf</p> <ul> <li>Don\u2019t bake secrets into images; use environment or secret managers.</li> <li>Enable health checks and readiness probes where possible.</li> </ul>"},{"location":"tutorials/oauth-chat-app/","title":"Tutorial: OAuth\u2011backed Chat App","text":"<p>Build a simple chat app using SQL sessions/memory and Google OAuth2 credentials.</p> <p>What you\u2019ll build</p> <ul> <li>FastAPI app serving an agent via EnhancedRunner</li> <li>SQL session/memory stores; artifacts to local</li> <li>Google OAuth2 credential service</li> </ul> <p>Steps</p> <p>1) Install deps and set env vars for Google OAuth2. 2) Create <code>agents/</code> with a simple agent. 3) Wire FastAPI via <code>get_enhanced_fast_api_app</code> and pass <code>GoogleOAuth2CredentialService</code>. 4) Run with Uvicorn and test the UI and auth flow.</p> <p>Code</p> <p>Refer to Quickstart (FastAPI) and Credentials How\u2011To for concrete snippets; join them in a single file and run <code>uvicorn</code>.</p> <p>Next</p> <ul> <li>Persist artifacts to S3, add structured logging, deploy to cloud.</li> </ul>"},{"location":"tutorials/observability/","title":"Tutorial: Observability","text":"<p>Make your deployment observable.</p> <p>Topics</p> <ul> <li>Registries: health monitoring, events, cache stats</li> <li>Runner: performance metrics and debug info</li> <li>Tracing: enable Cloud Trace via <code>trace_to_cloud=True</code> in FastAPI app</li> </ul> <p>Snippets</p> <pre><code>metrics = runner.get_performance_metrics()\nprint(metrics)\n\nstats = tool_registry.get_registry_stats()\nprint(stats)\n</code></pre> <p>Add logging, structured logs, and traces as needed for your environment.</p>"},{"location":"tutorials/openapi-tool/","title":"Tutorial: OpenAPI Tool with Retries and Circuit Breaker","text":"<p>Goal</p> <ul> <li>Register an OpenAPI tool and execute via a strategy with retries and circuit breaker.</li> </ul> <p>Outline</p> <p>1) Create an <code>OpenApiToolExecutionStrategy</code> with custom timeouts and retry config. 2) Register the strategy in a <code>ToolExecutionStrategyManager</code>. 3) Use a Tool Registry to register an API tool or toolset. 4) Execute the tool through the registry or via the runner.</p> <p>Tip: Use the tool registry\u2019s health and usage APIs to monitor behavior.</p>"},{"location":"tutorials/yaml-runner/","title":"Tutorial: YAML\u2011Driven Runner","text":"<p>Use <code>EnhancedRunConfig</code> loaded from YAML with environment interpolation.</p> <p>Steps</p> <p>1) Create <code>config.yaml</code> with runtime settings (timeouts, retries, debug). 2) Load with <code>ConfigurationSystem.load_config(EnhancedRunConfig, \"config.yaml\")</code>. 3) Pass <code>result.config</code> to <code>EnhancedRunner</code>. 4) Observe debug logs and error context on failures.</p> <p>Example YAML</p> <pre><code>streaming_mode: NONE\nmax_llm_calls: 200\ntool_timeouts:\n  function_tools: 10.0\n  openapi_tools: 60.0\nretry_policies:\n  default:\n    max_attempts: 3\ndebug:\n  enabled: true\n</code></pre>"}]}